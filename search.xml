<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>小z有话说</title>
    <url>/2021/03/11/hello/</url>
    <content><![CDATA[<h2 id="我有话说"><a href="#我有话说" class="headerlink" title="我有话说"></a>我有话说</h2><p>​    这是我的第二个博客，之前的博客实在阿里云服务器上，算是草草搭建起来的吧，内容也是写的有点点随意，由于毕设要用到服务器，老是把服务器搞崩（脑瓜子疼），每次部署博客费老大劲了，所以决定重新撘个正经的博客，也方便以后写点优质的文章。</p>
<p>​    最近毕设有点忙，就索性先把这个博客的搭建过程详细分享出来，之前博客上的内容比如ftp，sprintgoot写的太随意不够严谨，先放一放，之后好好完善后再登出吧。</p>
<p><img src="/2021/03/11/hello/sasasas.jpg"></p>
<hr>
<hr>
]]></content>
      <categories>
        <category>welcome</category>
      </categories>
  </entry>
  <entry>
    <title>使用hexo搭建个人博客</title>
    <url>/2021/03/10/blog/</url>
    <content><![CDATA[<p>强烈推荐！！！使用hexo，基于gitgub搭建你想要的博客。Hexo 是一个快速、简洁且高效的博客框架。</p>
<span id="more"></span>

<hr>
<!-- toc -->

<ul>
<li><a href="#%E5%89%8D%E8%A8%80">前言</a></li>
<li><a href="#1-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">1. 准备工作</a></li>
<li><a href="#2%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2">2.搭建github博客</a><ul>
<li><a href="#21-%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93">2.1. 创建仓库</a></li>
<li><a href="#22-%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E5%8F%AF%E9%80%89">2.2. 绑定域名（可选）</a></li>
<li><a href="#23-%E6%B5%8B%E8%AF%95%E6%98%AF%E5%90%A6%E6%88%90%E5%8A%9F">2.3. 测试是否成功</a></li>
</ul>
</li>
<li><a href="#3%E4%BD%BF%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2git-bash%E4%B8%AD%E5%86%99">3.使用hexo写博客（git bash中写）</a><ul>
<li><a href="#31-hexo%E7%AE%80%E4%BB%8B">3.1. hexo简介</a></li>
<li><a href="#32-%E5%8E%9F%E7%90%86">3.2. 原理</a></li>
<li><a href="#33-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">3.3. 注意事项</a></li>
<li><a href="#34-%E5%AE%89%E8%A3%85">3.4. 安装</a></li>
<li><a href="#35-%E5%88%9D%E5%A7%8B%E5%8C%96">3.5. 初始化</a></li>
<li><a href="#36-%E4%BF%AE%E6%94%B9%E4%B8%BB%E9%A2%98%E8%BF%99%E9%83%A8%E5%88%86%E8%BE%83%E9%95%BF%E5%8F%AF%E5%85%88%E8%B7%B3%E8%BF%87%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%BF%9B%E9%98%B6%E5%9C%A8-%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%864%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%BF%9B%E9%98%B6next">3.6. 修改主题(这部分较长，可先跳过，主题配置进阶在 <a href="#4.%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%BF%9B%E9%98%B6%EF%BC%88next%EF%BC%89">第四部分</a> )</a></li>
<li><a href="#38-%E4%B8%8A%E4%BC%A0%E5%88%B0github">3.8. 上传到github</a></li>
<li><a href="#39-%E5%B8%B8%E7%94%A8hexo%E5%91%BD%E4%BB%A4">3.9. 常用hexo命令</a></li>
<li><a href="#310-_configyml">3.10. _config.yml</a></li>
<li><a href="#311-%E5%86%99%E5%8D%9A%E5%AE%A2">3.11. 写博客</a><ul>
<li><a href="#3111-%E5%86%99%E5%8D%9A%E5%AE%A2%E5%B7%A5%E5%85%B7">3.11.1. 写博客工具</a></li>
<li><a href="#3112-%E5%A6%82%E4%BD%95%E8%AE%A9%E5%8D%9A%E6%96%87%E5%88%97%E8%A1%A8%E4%B8%8D%E6%98%BE%E7%A4%BA%E5%85%A8%E9%83%A8%E5%86%85%E5%AE%B9">3.11.2. 如何让博文列表不显示全部内容</a></li>
<li><a href="#3113%E9%87%8D%E8%A6%81">3.11.3.重要！！！</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#4%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%BF%9B%E9%98%B6next">4.主题配置进阶（next）</a><ul>
<li><a href="#41%E8%AE%BE%E7%BD%AEtags-categories%E7%AD%89%E8%8F%9C%E5%8D%95%E6%A0%8F">4.1.设置tags、categories等菜单栏</a><ul>
<li><a href="#2-%E7%BC%96%E8%BE%91tags%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84indexmd"><strong>2、编辑tags文件夹下的index.md</strong></a></li>
</ul>
</li>
<li><a href="#42%E6%B7%BB%E5%8A%A0toc%E6%94%AF%E6%8C%81%E7%94%9F%E6%88%90%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95">4.2.添加Toc支持，生成文章目录</a></li>
<li><a href="#43%E8%AE%BE%E7%BD%AE-rss%E6%A0%B7%E5%BC%8F%E9%A3%8E%E6%A0%BC">4.3.设置 RSS(样式风格)</a></li>
<li><a href="#44%E8%AE%BE%E7%BD%AE%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87">4.4.设置阅读全文</a></li>
<li><a href="#45%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD">4.5.添加评论功能</a><ul>
<li><a href="#1%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9valine">1.为什么选择Valine</a></li>
<li><a href="#2%E7%AC%AC%E4%B8%80%E6%AD%A5%E6%B3%A8%E5%86%8Cleanclound%E8%8E%B7%E5%8F%96app-id-%E5%92%8C-app-key">2.第一步，注册LeanClound,获取APP ID 和 APP Key</a></li>
<li><a href="#3%E5%9C%A8hexo-next%E4%B8%BB%E9%A2%98%E4%B8%AD%E9%85%8D%E7%BD%AE">3.在Hexo Next主题中配置</a></li>
</ul>
</li>
<li><a href="#46%E8%AE%BE%E7%BD%AE%E5%A4%B4%E5%83%8F">4.6.设置头像</a></li>
<li><a href="#47%E8%AE%BE%E7%BD%AE%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6">4.7.设置文章置顶</a></li>
<li><a href="#48%E5%90%AF%E7%94%A8%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD">4.8.启用代码块复制功能</a></li>
<li><a href="#49%E6%B7%BB%E5%8A%A0-live2d-%E7%9C%8B%E6%9D%BF%E5%A8%98-%E8%90%8C%E5%AE%A0">4.9.添加 Live2D 看板娘 萌宠</a></li>
<li><a href="#410%E6%B7%BB%E5%8A%A0%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E6%95%88%E6%9E%9C">4.10.添加鼠标点击效果</a></li>
<li><a href="#411%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%E6%94%BE%E5%A4%A7%E9%A2%84%E8%A7%88%E5%8A%9F%E8%83%BD">4.11.添加图片放大预览功能</a></li>
<li><a href="#412%E6%B7%BB%E5%8A%A0%E9%9B%AA%E8%8A%B1%E9%A3%98%E8%90%BD%E8%83%8C%E6%99%AF%E6%95%88%E6%9E%9C">4.12.添加雪花飘落背景效果</a></li>
</ul>
<ul>
<li><a href="#5%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91">5.踩过的坑</a><ul>
<li><a href="#51%E6%B7%BB%E5%8A%A0%E4%BE%A7%E8%BE%B9%E6%A0%8F%E7%9B%AE%E5%BD%95%E5%90%8E%E7%82%B9%E5%87%BB%E6%B2%A1%E6%9C%89%E5%8F%8D%E5%BA%94">5.1.添加侧边栏目录后，点击没有反应</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- tocstop -->

<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用github 搭建博客的好处有：</p>
<ol>
<li>全是静态文件，访问速度快；</li>
<li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</li>
<li>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</li>
<li>数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</li>
<li>博客内容可以轻松打包、转移、发布到其它平台；</li>
<li>可以直接托管github，而不是必须要有你的云服务器和域名</li>
</ol>
<h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h1><p>在开始一切之前，你必须已经：</p>
<ul>
<li>有一个github账号，没有的话去注册一个；</li>
<li>安装了node.js、npm，并了解相关基础知识；</li>
<li>安装了git for windows（或者其它git客户端）</li>
</ul>
<h1 id="2搭建github博客"><a href="#2-搭建github博客" class="headerlink" title="2.搭建github博客"></a>2.搭建github博客</h1><h2 id="21-创建仓库"><a href="#2-1-创建仓库" class="headerlink" title="2.1. 创建仓库"></a>2.1. 创建仓库</h2><p>新建一个名为<code>你的用户名.github.io</code>的仓库，比如说，如果你的github用户名是test，那么你就新建<code>test.github.io</code>的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://test.github.io/">http://test.github.io</a> 了，是不是很方便？</p>
<p>由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。</p>
<p>几个注意的地方：</p>
<ol>
<li>注册的邮箱一定要验证，否则不会成功；</li>
<li>仓库名字必须是：<code>username.github.io</code>，其中<code>username</code>是你的用户名（账户名）； </li>
<li>仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟；</li>
</ol>
<p>创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。</p>
<p><img src="/2021/03/10/blog/image-20210311145848286.png"></p>
<h2 id="22-绑定域名可选"><a href="#2-2-绑定域名（可选）" class="headerlink" title="2.2. 绑定域名（可选）"></a>2.2. 绑定域名（可选）</h2><p>我是直接使用github的名字的，并没有使用自己的域名。</p>
<p>当然你也可以去弄一个，自行百度吧，很简单。</p>
<p>在你绑定了新域名之后，原来的<code>你的用户名.github.io</code>并没有失效，而是会自动跳转到你的新域名。</p>
<p>配置SSH key</p>
<p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。</p>
<p>用git bash执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh  <span class="comment">#检查本机已存在的ssh密钥</span></span><br></pre></td></tr></table></figure>

<p>如果提示：No such file or directory 说明你是第一次使用git。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br><span class="line">例：ssh-keygen -t rsa -C &quot;2290280646@qq.com&quot;</span><br></pre></td></tr></table></figure>

<p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到<code>.ssh\id_rsa.pub</code>文件，</p>
<p>可能有小伙伴不知道在哪里去找这个文件，这有何难，其实就是在你的c盘用户目录下.ssh文件夹里面</p>
<p><img src="/2021/03/10/blog/image-20210311150629390.png"></p>
<p>记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p>
<p>如果之前你已经填了ssh key（idea这些里面填的），建议删掉这个key，新建一个key，名字随便取，比如test，并且本地重新绑定你的github</p>
<p><img src="/2021/03/10/blog/20160818_143914_495_9084.png"></p>
<h2 id="23-测试是否成功"><a href="#2-3-测试是否成功" class="headerlink" title="2.3. 测试是否成功"></a>2.3. 测试是否成功</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com    # 注意邮箱地址不用改，直接复制粘贴就好了</span><br></pre></td></tr></table></figure>

<p>如果提示<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到：</p>
<blockquote>
<p>Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access.</p>
</blockquote>
<p>看到这个信息说明SSH已配置成功！</p>
<p>此时你还需要配置：这个是你的github账户，用来连接时会使用到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;zhouzhe111&quot;&#x2F;&#x2F; 你的github用户名，非昵称</span><br><span class="line">$ git config --global user.email  &quot;2290280646@qq.com&quot;&#x2F;&#x2F; 填写你的github注册邮箱</span><br></pre></td></tr></table></figure>

<p>本地就和github连接上了</p>
<h1 id="3使用hexo写博客git-bash中写"><a href="#3-使用hexo写博客（git-bash中写）" class="headerlink" title="3.使用hexo写博客（git bash中写）"></a>3.使用hexo写博客（git bash中写）</h1><h2 id="31-hexo简介"><a href="#3-1-hexo简介" class="headerlink" title="3.1. hexo简介"></a>3.1. hexo简介</h2><p>Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。</p>
<p>官网： <a href="http://hexo.io/">http://hexo.io</a><br>github: <a href="https://github.com/hexojs/hexo">https://github.com/hexojs/hexo</a></p>
<h2 id="32-原理"><a href="#3-2-原理" class="headerlink" title="3.2. 原理"></a>3.2. 原理</h2><p>由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p>
<h2 id="33-注意事项"><a href="#3-3-注意事项" class="headerlink" title="3.3. 注意事项"></a>3.3. 注意事项</h2><p>安装之前先来说几个注意事项：</p>
<ol>
<li>很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用<code>git bash</code>来执行；</li>
<li>hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导；</li>
<li>hexo有2种<code>_config.yml</code>文件，一个是根目录下的全局的<code>_config.yml</code>，一个是各个<code>theme</code>下的；</li>
</ol>
<h2 id="34-安装"><a href="#3-4-安装" class="headerlink" title="3.4. 安装"></a>3.4. 安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure>

<h2 id="35-初始化"><a href="#3-5-初始化" class="headerlink" title="3.5. 初始化"></a>3.5. 初始化</h2><p>在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是<code>F:\Workspaces\hexo</code>，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /d/hexo/</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>

<p>hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图：</p>
<p><img src="/2021/03/10/blog/20160818_115922_773_1148.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g <span class="comment"># 生成</span></span><br><span class="line">$ hexo s <span class="comment"># 启动服务</span></span><br></pre></td></tr></table></figure>

<p>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的：</p>
<p><img src="/2021/03/10/blog/20160818_120700_028_2426.png"></p>
<p><code>hexo s</code>是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了</p>
<p>第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑，打开时就是这个样子：</p>
<p><img src="/2021/03/10/blog/image-20210311143728099.png"></p>
<h2 id="36-修改主题这部分较长可先跳过主题配置进阶在-第四部分"><a href="#3-6-修改主题-这部分较长，可先跳过，主题配置进阶在-第四部分" class="headerlink" title="3.6. 修改主题(这部分较长，可先跳过，主题配置进阶在 第四部分 )"></a>3.6. 修改主题(这部分较长，可先跳过，主题配置进阶在 <a href="#4.%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%BF%9B%E9%98%B6%EF%BC%88next%EF%BC%89">第四部分</a> )</h2><p>强烈推荐 next  官网<a href="http://theme-next.iissnan.com/">http://theme-next.iissnan.com/</a></p>
<p>下面下载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next.git themes&#x2F;next</span><br></pre></td></tr></table></figure>

<p>启用主题</p>
<p>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 <strong>站点配置文件</strong>， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>。</p>
<p>启用 NexT 主题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<p>然后重新执行<code>hexo g</code>来重新生成。</p>
<p>如果出现一些莫名其妙的问题，可以先执行<code>hexo clean</code>来清理一下public的内容，然后再来重新生成和发布。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean  #清理缓存</span><br><span class="line">hexo g   #生成</span><br><span class="line">hexo s   #本地预览（4000端口）</span><br><span class="line">hexo d   #发布到github</span><br></pre></td></tr></table></figure>

<h2 id><a href="#" class="headerlink" title></a></h2><p>在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。</p>
<h2 id="38-上传到github"><a href="#3-8-上传到github" class="headerlink" title="3.8. 上传到github"></a>3.8. 上传到github</h2><p>如果你一切都配置好了，发布上传很容易，一句<code>hexo d</code>就搞定，当然关键还是你要把所有东西配置好。</p>
<p>首先，<code>ssh key</code>肯定要配置好。</p>
<p>其次，配置<code>_config.yml</code>中有关deploy的部分：</p>
<p>正确写法：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:zhouzhe111/zhouzhe111.github.io.git</span>  <span class="comment">#中间是冒号！</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span>  <span class="comment">#这个表示在你的github的那个分支下，配置文件默认是master，但是很可能你的github是main，要改成一样的</span></span><br></pre></td></tr></table></figure>

<p>错误写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: github</span><br><span class="line">  repository: https:&#x2F;&#x2F;github.com&#x2F;liuxianan&#x2F;liuxianan.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>后面一种写法是hexo2.x的写法，现在已经不行了，无论是哪种写法，此时直接执行<code>hexo d</code>的话一般会报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Deployer not found: github 或者 Deployer not found: git</span><br></pre></td></tr></table></figure>

<p>原因是还需要安装一个插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>其它命令不确定，部署这个命令一定要用git bash，否则会提示<code>Permission denied (publickey).</code></p>
<p>打开你的git bash，输入<code>hexo d</code>就会将本次有改动的代码全部提交，没有改动的不会：</p>
<p><img src="/2021/03/10/blog/20160818_140441_769_5024.png"></p>
<h2 id="39-常用hexo命令"><a href="#3-9-常用hexo命令" class="headerlink" title="3.9. 常用hexo命令"></a>3.9. 常用hexo命令</h2><p>常见命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章 默认位置在source&#x2F;_post</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面 即菜单栏</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br><span class="line">hexo clean  #清理缓存</span><br></pre></td></tr></table></figure>

<p>缩写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n &#x3D;&#x3D; hexo new</span><br><span class="line">hexo g &#x3D;&#x3D; hexo generate</span><br><span class="line">hexo s &#x3D;&#x3D; hexo server</span><br><span class="line">hexo d &#x3D;&#x3D; hexo deploy</span><br></pre></td></tr></table></figure>

<p>组合命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure>

<p>更新文章时一般的命令流程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean  #清理缓存 如果不清理就上传，很可能不是最新的文件（缓存中的可能是以前的版本</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure>



<h2 id="310-_configyml"><a href="#3-10-config-yml" class="headerlink" title="3.10. _config.yml"></a>3.10. _config.yml</h2><p>这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。</p>
<p>需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。</p>
<h2 id="311-写博客"><a href="#3-11-写博客" class="headerlink" title="3.11. 写博客"></a>3.11. 写博客</h2><p>定位到我们的hexo根目录，执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &#39;my-first-blog&#39;</span><br></pre></td></tr></table></figure>

<p>hexo会帮我们在<code>_posts</code>下生成相关md文件：</p>
<p><img src="/2021/03/10/blog/20160823_183047_352_1475.png"></p>
<p>我们只需要打开这个文件就可以开始写博客了，默认生成如下内容：</p>
<p><img src="/2021/03/10/blog/20160823_183325_470_9306.png"></p>
<p>当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。</p>
<p>一般完整格式如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: postName #文章页面上的显示名称，一般是中文</span><br><span class="line">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</span><br><span class="line">categories: 默认分类 #分类</span><br><span class="line">tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格</span><br><span class="line">description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">以下是正文</span><br></pre></td></tr></table></figure>

<h3 id="3111-写博客工具"><a href="#3-11-1-写博客工具" class="headerlink" title="3.11.1. 写博客工具"></a>3.11.1. 写博客工具</h3><p>我个人用的是typera <a href="https://www.typora.io/">https://www.typora.io/</a> 挺好用的</p>
<h3 id="3112-如何让博文列表不显示全部内容"><a href="#3-11-2-如何让博文列表不显示全部内容" class="headerlink" title="3.11.2. 如何让博文列表不显示全部内容"></a>3.11.2. 如何让博文列表不显示全部内容</h3><p>默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？</p>
<p>答案是在合适的位置加上<code>&lt;!--more--&gt;</code>即可，例如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 前言</span></span><br><span class="line"></span><br><span class="line">使用github pages服务搭建博客的好处有：</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全是静态文件，访问速度快；</span><br><span class="line"><span class="bullet">2.</span> 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</span><br><span class="line"><span class="bullet">3.</span> 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</span><br><span class="line"><span class="bullet">5.</span> 博客内容可以轻松打包、转移、发布到其它平台；</span><br><span class="line"><span class="bullet">6.</span> 等等；</span><br></pre></td></tr></table></figure>

<p>最终效果：</p>
<p><img src="/2021/03/10/blog/image-20210311153303575.png"></p>
<p>部分内容摘自 ：参考链接：<a href="http://blog.haoji.me/build-blog-website-by-hexo-github.html">使用hexo+github搭建免费个人博客详细教程</a> ，并加入了自己的一些配置</p>
<h3 id="3113重要"><a href="#3-11-3-重要！！！" class="headerlink" title="3.11.3.重要！！！"></a>3.11.3.重要！！！</h3><p>引入图片的路径，这是个很大的坑，本地能正常预览，可是github那里可不认账，需要好好整理一下：</p>
<p>首先，找到<code>_config.yml</code>配置文件<code>post_asset_folder</code>项为<code>true</code>。</p>
<p>这样，在使用<code>hexo new “这是一个新的博客”</code>时，会在source的 .md的位置创建同名文件夹这样你就可以把图片放在这下面了</p>
<p>比如你现在的文章名时是mmmm，name，图片放在mmmm文件夹中，在mmmm.md文件中你就可以这样引用图片了</p>
<p><code>![xxxx](mmmm/xxxx.png)</code></p>
<h1 id="4主题配置进阶next"><a href="#4-主题配置进阶（next）" class="headerlink" title="4.主题配置进阶（next）"></a>4.主题配置进阶（next）</h1><h3 id="41设置tags-categories等菜单栏"><a href="#4-1-设置tags、categories等菜单栏" class="headerlink" title="4.1.设置tags、categories等菜单栏"></a>4.1.设置tags、categories等菜单栏</h3><p>首先，讲讲这两个命令的区别</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new  helloworld  <span class="comment">#新建一篇文章，也就是source\_posts下的一篇篇文章</span></span><br><span class="line">hexo new page tags  <span class="comment">#新建一个菜单栏，相当于顶部导航</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/03/10/blog/image-20210311153803902.png"></p>
<p>tags 创建步骤</p>
<ul>
<li><strong>1、新建一个页面，命名为tags。命令如下：</strong></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page tags</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在/source下会新生成一个新的文件夹tags<br> ，在该文件夹下会有一个index.md文件</p>
</blockquote>
<ul>
<li><h4 id="2-编辑tags文件夹下的indexmd"><a href="#2、编辑tags文件夹下的index-md" class="headerlink" title="2、编辑tags文件夹下的index.md"></a><strong>2、编辑tags文件夹下的index.md</strong></h4></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2017-07-10 16:36:26</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;tags&quot;</span>  <span class="comment">#表示这是个tags菜单栏</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>3、在菜单中添加链接。编辑主题的 <code>themes/next/_config.yml</code> ，添加tags到menu中，如下:</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span>  <span class="comment">#新增</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>4、怎么给你的文章设置标签呢</strong></p>
</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tags:</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">tags:</span> [<span class="string">运动</span>, <span class="string">球类运动</span>]</span><br></pre></td></tr></table></figure>

<p>你可以按照这个流程新建 <code>about</code>、<code>categories</code>、<code>archives</code>等等</p>
<h3 id="42添加toc支持生成文章目录"><a href="#4-2-添加Toc支持，生成文章目录" class="headerlink" title="4.2.添加Toc支持，生成文章目录"></a>4.2.添加Toc支持，生成文章目录</h3><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-toc --save</span><br></pre></td></tr></table></figure>

<p>配置</p>
<p>在博客根目录下的 <code>_config.yml</code> 中如下配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">maxDepth:</span> <span class="number">3</span>  <span class="comment">#表示目录深度为3，即最多生成三级目录。</span></span><br></pre></td></tr></table></figure>

<p>然后就可以使用啦，在你想用的地方，添加</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;!--</span> <span class="string">toc</span> <span class="string">--&gt;</span></span><br></pre></td></tr></table></figure>

<p>就行了</p>
<h3 id="43设置-rss样式风格"><a href="#4-3-设置-RSS-样式风格" class="headerlink" title="4.3.设置 RSS(样式风格)"></a>4.3.设置 RSS(样式风格)</h3><p>NexT 中 RSS 有三个设置选项，满足特定的使用场景：</p>
<p>首先在站点根目录下执行下列命令安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>

<p>更改 主题配置文件，设定 rss 字段的值如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rss: url  <span class="comment">#url就是的的连接</span></span><br></pre></td></tr></table></figure>

<p>重新生成、启动服务器显示如下：</p>
<p><img src="/2021/03/10/blog/image-20210311155816806.png"></p>
<h3 id="44设置阅读全文"><a href="#4-4-设置阅读全文" class="headerlink" title="4.4.设置阅读全文"></a>4.4.设置阅读全文</h3><p>在首页显示一篇文章的部分内容，并提供一个链接跳转到全文页面是一个常见的需求。NexT 提供三种方式来控制文章在首页的显示方式。也就是说，在首页显示文章的摘录并显示 阅读全文 按钮，可以通过以下方法实现：</p>
<p>使用 <code>&lt;!-- more --&gt;</code><br>在文章中嵌入 <code>&lt;!-- more --&gt;</code>标记，Hexo 会将其之上的内容作为首页预览内容，这是 Hexo 提供的方式</p>
<p>这个基本功一定要会，所以这儿我又重复写了一遍</p>
<h3 id="45添加评论功能"><a href="#4-5-添加评论功能" class="headerlink" title="4.5.添加评论功能"></a>4.5.添加评论功能</h3><p>推荐： Valine</p>
<h4 id="1为什么选择valine"><a href="#1-为什么选择Valine" class="headerlink" title="1.为什么选择Valine"></a>1.为什么选择Valine</h4><p>在笔者进行评论系统选择时，我觉得我的需求就是方便，简洁，最重要一点是要支持Markdown ，对比之下，最终选定了这款Valine，当然，如果你不喜欢这样简洁的，可以参考 Hexo（NexT 主题）评论系统哪个好？</p>
<h4 id="2第一步注册leanclound获取app-id-和-app-key"><a href="#2-第一步，注册LeanClound-获取APP-ID-和-APP-Key" class="headerlink" title="2.第一步，注册LeanClound,获取APP ID 和 APP Key"></a>2.第一步，注册LeanClound,获取APP ID 和 APP Key</h4><p>链接： <a href="https://valine.js.org/quickstart.html">https://valine.js.org/quickstart.html</a></p>
<p>Valine 是基于 LeanCloud 作为数据存储的，所以需要注册一个账号，注册完成后，我们找到创建应用</p>
<p>在这里填写你的应用名称,名称可以自己定义，然后下面选择开发版 点击创建。</p>
<p>然后点击应用进入设置。</p>
<p>然后点击设置 &gt; 安全中心 ,将除了数据存储的服务全部关闭。</p>
<p><img src="/2021/03/10/blog/fhsidhfsdi.png"></p>
<p>最后点击应用 Key 取得我们 AppKey 和 App id</p>
<h4 id="3在hexo-next主题中配置"><a href="#3-在Hexo-Next主题中配置" class="headerlink" title="3.在Hexo Next主题中配置"></a>3.在Hexo Next主题中配置</h4><p>首先打开 <a href="https://www.jsdelivr.com/package/npm/valine">https://www.jsdelivr.com/package/npm/valine</a> 获取最新的 valine.min.js 的cdn地址：</p>
<p><img src="/2021/03/10/blog/adfdaad.png"></p>
<p>然后我们修改主题配置文件，配置CDN：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">valine:</span> <span class="string">https://cdn.jsdelivr.net/npm/valine@1.3.9/dist/Valine.min.js</span> </span><br></pre></td></tr></table></figure>

<p>再打开配置Valine功能：(记得修改key)</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Valine</span></span><br><span class="line"><span class="comment"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class="line"><span class="comment"># More info available at https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line"> <span class="comment"># 功能开关</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version</span></span><br><span class="line">  <span class="attr">appid:</span>  <span class="comment"># Your leancloud application appid #LeanClound获得的appid</span></span><br><span class="line">  <span class="attr">appkey:</span>  <span class="comment"># Your leancloud application appkey #LeanClound获得的appkey</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># Mail notifier. See: https://github.com/xCss/Valine/wiki # 邮件提醒</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code </span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">欢迎畅所欲言</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># Gravatar style #默认头像设置</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># Custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-cn</span> <span class="comment"># Language, available values: en, zh-cn # 语言，设为zh-cn</span></span><br><span class="line">  <span class="comment"># 是否开启当前文章阅读量统计</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span> <span class="comment"># leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors&#x27; for counter compatibility. Article reading statistic https://valine.js.org/visitor.html</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>每篇文章默认都会开启评论功能，包括about，tags这些</p>
<p>所以，在不需要评论的地方你可以关闭</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">about</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2021-03-10 20:24:43</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;about&quot;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>当然， 会帮你储存、管理这些评论</p>
<p><img src="/2021/03/10/blog/image-20210311161651870.png"></p>
<p>你可以到这里，为所欲为啦（删除某个评论等等）</p>
<h3 id="46设置头像"><a href="#4-6-设置头像" class="headerlink" title="4.6.设置头像"></a>4.6.设置头像</h3><p>主题配置文件：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/uploads/my.jpg</span> <span class="comment">#/images/avatar.gif</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span>  <span class="comment">#是否显示呈圆形，默认是方的</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span>  <span class="comment">#鼠标放在图片上时 是否可以旋转</span></span><br></pre></td></tr></table></figure>

<p>把你的图片放在/source/uploads下面（如果没有就新建文件夹</p>
<h3 id="47设置文章置顶"><a href="#4-7-设置文章置顶" class="headerlink" title="4.7.设置文章置顶"></a>4.7.设置文章置顶</h3><p>Hexo 默认主页文章按日期降序。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: 博客主页根路径. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: 每页显示文章数量. (0 = 禁用分页)</span></span><br><span class="line"><span class="comment"># order_by: 文章排序. (默认按日期降序)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br></pre></td></tr></table></figure>

<p>安装 <a href="https://github.com/netcan/hexo-generator-index-pin-top">hexo-generator-index-pin-top</a></p>
<p>首先是卸载默认排序插件，安装新插件，新插件支持文章置顶：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>

<p>置顶文章</p>
<p>在需要置顶的文章的 <code>front-matter</code> 中设置 <code>top: 1</code> 即可实现文章置顶功能，并且数字越大文章越靠前，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">top: 1</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>添加置顶图标<br>上面置顶文章会文章排在前面，但是不会有任何有关 “置顶” 的标识。我们可以修改 NexT 主题的/themes/next/layout/_macro/post.swig 文件，在 <div class="post-meta"> 下加入 “置顶” 标识，如图标和文字描述：</div></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">%</span> <span class="string">if</span> <span class="string">post.top</span> <span class="string">%</span>&#125;</span><br><span class="line">  <span class="string">&lt;i</span> <span class="string">class=&quot;fa</span> <span class="string">fa-thumb-tack&quot;&gt;&lt;/i&gt;</span></span><br><span class="line">  <span class="string">&lt;font</span> <span class="string">color=7D26CD&gt;&#123;&#123;</span> <span class="string">__(&#x27;post.sticky&#x27;)</span> <span class="string">&#125;&#125;&lt;/font&gt;</span></span><br><span class="line">  <span class="string">&lt;span</span> <span class="string">class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span></span><br><span class="line">&#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="48启用代码块复制功能"><a href="#4-8-启用代码块复制功能" class="headerlink" title="4.8.启用代码块复制功能"></a>4.8.启用代码块复制功能</h3><p>编辑 <code>主题配置文件</code>，启用 <code>codeblock</code> 模块，如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Manual define the border radius in codeblock, leave it blank for the default value: 1</span></span><br><span class="line">  <span class="attr">border_radius:</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Style: only &#x27;flat&#x27; is currently available, leave it blank if you prefer default theme</span></span><br><span class="line">    <span class="attr">style:</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/03/10/blog/image-20210311162819748.png"></p>
<h3 id="49添加-live2d-看板娘-萌宠"><a href="#4-9-添加-Live2D-看板娘-萌宠" class="headerlink" title="4.9.添加 Live2D 看板娘 萌宠"></a>4.9.添加 Live2D 看板娘 萌宠</h3><p>插件 <code>hexo-helper-live2d</code> 的使用说明详见 <a href="https://github.com/EYHN/hexo-helper-live2d">https://github.com/EYHN/hexo-helper-live2d</a></p>
<p>Step 1</p>
<p>进入到工程目录下，安装 Hexo 插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-helper-live2d --save</span><br></pre></td></tr></table></figure>

<p>Step 2<br>在 插件作者的博客 中挑选一个模型，记录该模型的名字。模型资源名称为 live2d-widget-model-模型名称，例如选择模型 shizuku ，则其对应的 Live2D 资源名称为 live2d-widget-model-shizuku，然后直接在站点根目录下安装该模型，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install live2d-widget-model-shizuku --save</span><br></pre></td></tr></table></figure>

<p>Step 3</p>
<p>编辑 <code>站点配置文件</code>，添加如下内容：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo plugin: hexo-helper-live2d</span></span><br><span class="line"><span class="comment">## https://github.com/EYHN/hexo-helper-live2d</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span> <span class="comment"># Root path of plugin to be on the site (Relative)</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span> <span class="comment"># JavaScript path related to plugin&#x27;s root (Relative)</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span> <span class="comment"># Relative model path related to plugin&#x27;s root (Relative)</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span> <span class="comment"># Default</span></span><br><span class="line">  <span class="comment">#scriptFrom: jsdelivr # jsdelivr CDN</span></span><br><span class="line">  <span class="comment">#scriptFrom: unpkg # unpkg CDN</span></span><br><span class="line">  <span class="comment">#scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # Your custom url</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span> <span class="comment"># Whether only to replace live2d tag instead of inject to all pages</span></span><br><span class="line">  <span class="attr">log:</span> <span class="literal">false</span> <span class="comment"># Whether to show logs in console</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-shizuku</span> <span class="comment"># npm-module package name</span></span><br><span class="line">    <span class="comment">#use: wanko # folder name in (hexo base dir)/live2d_models/</span></span><br><span class="line">    <span class="comment">#use: ./wives/wanko # folder path relative to hexo base dir</span></span><br><span class="line">    <span class="comment">#use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # Your custom url</span></span><br><span class="line">    <span class="attr">scale:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">hHeadPos:</span> <span class="number">0.5</span></span><br><span class="line">    <span class="attr">vHeadPos:</span> <span class="number">0.618</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">superSample:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">hOffset:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">vOffset:</span> <span class="number">-10</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">scale:</span> <span class="number">0.05</span></span><br><span class="line">  <span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacityDefault:</span> <span class="number">0.7</span></span><br><span class="line">    <span class="attr">opacityOnHover:</span> <span class="number">0.2</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/03/10/blog/image-20210311163110377.png"></p>
<p>默认在页面右下角，上面的参数也可以自己调整</p>
<p>个人还喜欢的动图</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">可选：Epsilon2.1</span> <span class="string">nipsilon</span> <span class="string">z16</span> <span class="string">hibiki</span></span><br><span class="line"><span class="string">使用</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">live2d-widget-model-shizuku</span> <span class="string">--save</span> <span class="string">安装</span></span><br></pre></td></tr></table></figure>

<h3 id="410添加鼠标点击效果"><a href="#4-10-添加鼠标点击效果" class="headerlink" title="4.10.添加鼠标点击效果"></a>4.10.添加鼠标点击效果</h3><p>这个其实还比较简单，只需要在主题目录下<code>next/source/js/src</code>下面新建一个<code>clicklove.js</code>文件，当然名字可以自己任取，然后在其中加入以下内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*网页鼠标点击特效（爱心）*/</span></span><br><span class="line">!<span class="function"><span class="keyword">function</span> (<span class="params">e, t, a</span>) </span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>) </span>&#123;<span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; s.length; e++) s[e].alpha &lt;= <span class="number">0</span> ? (t.body.removeChild(s[e].el), s.splice(e, <span class="number">1</span>)) : (s[e].y--, s[e].scale += <span class="number">.004</span>, s[e].alpha -= <span class="number">.013</span>, s[e].el.style.cssText = <span class="string">&quot;left:&quot;</span> + s[e].x + <span class="string">&quot;px;top:&quot;</span> + s[e].y + <span class="string">&quot;px;opacity:&quot;</span> + s[e].alpha + <span class="string">&quot;;transform:scale(&quot;</span> + s[e].scale + <span class="string">&quot;,&quot;</span> + s[e].scale + <span class="string">&quot;) rotate(45deg);background:&quot;</span> + s[e].color + <span class="string">&quot;;z-index:99999&quot;</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>) </span>&#123;<span class="keyword">var</span> t = <span class="string">&quot;function&quot;</span> == <span class="keyword">typeof</span> e.onclick &amp;&amp; e.onclick;e.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;t &amp;&amp; t(), o(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">e</span>) </span>&#123;<span class="keyword">var</span> a = t.createElement(<span class="string">&quot;div&quot;</span>);a.className = <span class="string">&quot;heart&quot;</span>, s.push(&#123;<span class="attr">el</span>: a,<span class="attr">x</span>: e.clientX - <span class="number">5</span>,<span class="attr">y</span>: e.clientY - <span class="number">5</span>,<span class="attr">scale</span>: <span class="number">1</span>,<span class="attr">alpha</span>: <span class="number">1</span>,<span class="attr">color</span>: c()&#125;), t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>) </span>&#123;<span class="keyword">var</span> a = t.createElement(<span class="string">&quot;style&quot;</span>);a.type = <span class="string">&quot;text/css&quot;</span>;<span class="keyword">try</span> &#123;a.appendChild(t.createTextNode(e))&#125; <span class="keyword">catch</span> (t) &#123;a.styleSheet.cssText = e&#125;t.getElementsByTagName(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="string">&quot;rgb(&quot;</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">&quot;,&quot;</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">&quot;,&quot;</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">&quot;)&quot;</span>&#125;<span class="keyword">var</span> s = [];e.requestAnimationFrame = e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;<span class="built_in">setTimeout</span>(e, <span class="number">1e3</span> / <span class="number">60</span>)&#125;, i(<span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>), n(), r()&#125;(<span class="built_in">window</span>, <span class="built_in">document</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面这个是鼠标点击出现小心心的文件，也可以加上鼠标点击出现社会主义核心价值观的js文件，如果只想要一个就只加一个文件即可，在刚才的目录下继续创建<code>clicksocialvalue.js</code>文件，然后在文件中加入以下内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> coreSocialistValues = [<span class="string">&quot;富强&quot;</span>, <span class="string">&quot;民主&quot;</span>, <span class="string">&quot;文明&quot;</span>, <span class="string">&quot;和谐&quot;</span>, <span class="string">&quot;自由&quot;</span>, <span class="string">&quot;平等&quot;</span>, <span class="string">&quot;公正&quot;</span>, <span class="string">&quot;法治&quot;</span>, <span class="string">&quot;爱国&quot;</span>, <span class="string">&quot;敬业&quot;</span>, <span class="string">&quot;诚信&quot;</span>, <span class="string">&quot;友善&quot;</span>],</span><br><span class="line">    index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * coreSocialistValues.length);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">document</span>.body.addEventListener(<span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//过滤a标签</span></span><br><span class="line">        <span class="keyword">if</span> (e.target.tagName == <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> x = e.pageX,</span><br><span class="line">        y = e.pageY,</span><br><span class="line">        span = <span class="built_in">document</span>.createElement(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">        span.textContent = coreSocialistValues[index];</span><br><span class="line">        index = (index + <span class="number">1</span>) % coreSocialistValues.length;</span><br><span class="line">        span.style.cssText = [<span class="string">&#x27;z-index: 9999999; position: absolute; font-weight: bold; color: #ff6651; top: &#x27;</span>, y - <span class="number">20</span>, <span class="string">&#x27;px; left: &#x27;</span>, x, <span class="string">&#x27;px;&#x27;</span>].join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(span);</span><br><span class="line">        animate(span);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p>当然如果两个都需要的话，可以直接将两个文件的代码合并到一个文件即可。</p>
<p>然后在主题目录下<code>next/layout/_layout.swig</code>文件中的<code>&lt;body&gt;&lt;/body&gt;</code>体标签内引入刚才创建的js文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/src/clicklove.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/src/clicksocialvalue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/03/10/blog/image-20210311164038387.png"></p>
<h3 id="411添加图片放大预览功能"><a href="#4-11-添加图片放大预览功能" class="headerlink" title="4.11.添加图片放大预览功能"></a>4.11.添加图片放大预览功能</h3><p>利用 Fancybox 能放大查看图片。</p>
<p>有 <a href="https://github.com/theme-next/theme-next-fancybox">Fancybox2</a> 和 <a href="https://github.com/theme-next/theme-next-fancybox3">Fancybox3</a> 两个版本，这里使用 Fancybox3。</p>
<p>如果已经有 fancybox2 的，需要在站点根目录下执行下列命令进行删除：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf themes/next/<span class="built_in">source</span>/lib/fancybox</span><br></pre></td></tr></table></figure>

<p>进入到 <code>themes/next</code> 主题目录下，执行以下命令安装 fancybox3 模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-fancybox3 <span class="built_in">source</span>/lib/fancybox</span><br></pre></td></tr></table></figure>

<p>编辑 <code>主题配置文件</code>，启用 fancybox，修改配置如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="/2021/03/10/blog/image-20210311163717656.png"></p>
<h3 id="412添加雪花飘落背景效果"><a href="#4-12-添加雪花飘落背景效果" class="headerlink" title="4.12.添加雪花飘落背景效果"></a>4.12.添加雪花飘落背景效果</h3><p>在\blog\themes\next\source\js目录下新建snow2.js文件，添加如下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*样式一*/</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">    $.fn.snow = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $flake = $(<span class="string">&#x27;&lt;div id=&quot;snowbox&quot; /&gt;&#x27;</span>).css(&#123;</span><br><span class="line">                <span class="string">&#x27;position&#x27;</span>: <span class="string">&#x27;absolute&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;z-index&#x27;</span>: <span class="string">&#x27;9999&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;top&#x27;</span>: <span class="string">&#x27;-50px&#x27;</span></span><br><span class="line">            &#125;).html(<span class="string">&#x27;❄&#x27;</span>),</span><br><span class="line">            documentHeight = $(<span class="built_in">document</span>).height(),</span><br><span class="line">            documentWidth = $(<span class="built_in">document</span>).width(),</span><br><span class="line">            defaults = &#123;</span><br><span class="line">                minSize: <span class="number">10</span>,</span><br><span class="line">                maxSize: <span class="number">20</span>,</span><br><span class="line">                newOn: <span class="number">1000</span>,</span><br><span class="line">                flakeColor: <span class="string">&quot;#AFDAEF&quot;</span> <span class="comment">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span></span><br><span class="line">            &#125;,</span><br><span class="line">            options = $.extend(&#123;&#125;, defaults, options);</span><br><span class="line">        <span class="keyword">var</span> interval = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> startPositionLeft = <span class="built_in">Math</span>.random() * documentWidth - <span class="number">100</span>,</span><br><span class="line">                startOpacity = <span class="number">0.5</span> + <span class="built_in">Math</span>.random(),</span><br><span class="line">                sizeFlake = options.minSize + <span class="built_in">Math</span>.random() * options.maxSize,</span><br><span class="line">                endPositionTop = documentHeight - <span class="number">200</span>,</span><br><span class="line">                endPositionLeft = startPositionLeft - <span class="number">500</span> + <span class="built_in">Math</span>.random() * <span class="number">500</span>,</span><br><span class="line">                durationFall = documentHeight * <span class="number">10</span> + <span class="built_in">Math</span>.random() * <span class="number">5000</span>;</span><br><span class="line">            $flake.clone().appendTo(<span class="string">&#x27;body&#x27;</span>).css(&#123;</span><br><span class="line">                left: startPositionLeft,</span><br><span class="line">                opacity: startOpacity,</span><br><span class="line">                <span class="string">&#x27;font-size&#x27;</span>: sizeFlake,</span><br><span class="line">                color: options.flakeColor</span><br><span class="line">            &#125;).animate(&#123;</span><br><span class="line">                top: endPositionTop,</span><br><span class="line">                left: endPositionLeft,</span><br><span class="line">                opacity: <span class="number">0.2</span></span><br><span class="line">            &#125;, durationFall, <span class="string">&#x27;linear&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="built_in">this</span>).remove()</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, options.newOn);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.fn.snow(&#123;</span><br><span class="line">        minSize: <span class="number">5</span>,</span><br><span class="line">        <span class="comment">/* 定义雪花最小尺寸 */</span></span><br><span class="line">        maxSize: <span class="number">50</span>,</span><br><span class="line">        <span class="comment">/* 定义雪花最大尺寸 */</span></span><br><span class="line">        newOn: <span class="number">300</span> <span class="comment">/* 定义密集程度，数字越小越密集 */</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在\blog\themes\next\layout_layout.swig中添加如下代码（文件最后添加即可）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 雪花特效2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/snow2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在\blog\themes\next_config.yml下添加如下代码（文件最后添加即可）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 雪花特效2</span></span><br><span class="line"><span class="attr">snow2:</span> </span><br><span class="line"> <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>如果你已经引入jQuery，请忽略这一步(我本来没有引入但是引入了之后报错，不引入却正常，建议先不要引入看看能不能正常运行)</p>
<p>在第3步中，\blog\themes\next\layout_layout.swig文件中已经引入了snow2.js，需要在这之前引入jQuery，添加代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入jQuery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//libs.baidu.com/jquery/1.8.3/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果想要无齿轮的雪花效果，将snow2.js中的代码替换为下面的代码即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*样式二*/</span></span><br><span class="line"><span class="comment">/* 控制下雪 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snowFall</span>(<span class="params">snow</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 可配置属性 */</span></span><br><span class="line">    snow = snow || &#123;&#125;;</span><br><span class="line">    <span class="built_in">this</span>.maxFlake = snow.maxFlake || <span class="number">200</span>; <span class="comment">/* 最多片数 */</span></span><br><span class="line">    <span class="built_in">this</span>.flakeSize = snow.flakeSize || <span class="number">10</span>; <span class="comment">/* 雪花形状 */</span></span><br><span class="line">    <span class="built_in">this</span>.fallSpeed = snow.fallSpeed || <span class="number">1</span>; <span class="comment">/* 坠落速度 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 兼容写法 */</span></span><br><span class="line">requestAnimationFrame = <span class="built_in">window</span>.requestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.oRequestAnimationFrame ||</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(callback, <span class="number">1000</span> / <span class="number">60</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">cancelAnimationFrame = <span class="built_in">window</span>.cancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.webkitCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.oCancelAnimationFrame;</span><br><span class="line"><span class="comment">/* 开始下雪 */</span></span><br><span class="line">snowFall.prototype.start = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 创建画布 */</span></span><br><span class="line">    snowCanvas.apply(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">/* 创建雪花形状 */</span></span><br><span class="line">    createFlakes.apply(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">/* 画雪 */</span></span><br><span class="line">    drawSnow.apply(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建画布 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snowCanvas</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 添加Dom结点 */</span></span><br><span class="line">    <span class="keyword">var</span> snowcanvas = <span class="built_in">document</span>.createElement(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">    snowcanvas.id = <span class="string">&quot;snowfall&quot;</span>;</span><br><span class="line">    snowcanvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">    snowcanvas.height = <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line">    snowcanvas.setAttribute(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;position:absolute; top: 0; left: 0; z-index: 1; pointer-events: none;&quot;</span>);</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;body&quot;</span>)[<span class="number">0</span>].appendChild(snowcanvas);</span><br><span class="line">    <span class="built_in">this</span>.canvas = snowcanvas;</span><br><span class="line">    <span class="built_in">this</span>.ctx = snowcanvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    <span class="comment">/* 窗口大小改变的处理 */</span></span><br><span class="line">    <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        snowcanvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">        <span class="comment">/* snowcanvas.height = window.innerHeight */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 雪运动对象 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flakeMove</span>(<span class="params">canvasWidth, canvasHeight, flakeSize, fallSpeed</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvasWidth); <span class="comment">/* x坐标 */</span></span><br><span class="line">    <span class="built_in">this</span>.y = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvasHeight); <span class="comment">/* y坐标 */</span></span><br><span class="line">    <span class="built_in">this</span>.size = <span class="built_in">Math</span>.random() * flakeSize + <span class="number">2</span>; <span class="comment">/* 形状 */</span></span><br><span class="line">    <span class="built_in">this</span>.maxSize = flakeSize; <span class="comment">/* 最大形状 */</span></span><br><span class="line">    <span class="built_in">this</span>.speed = <span class="built_in">Math</span>.random() * <span class="number">1</span> + fallSpeed; <span class="comment">/* 坠落速度 */</span></span><br><span class="line">    <span class="built_in">this</span>.fallSpeed = fallSpeed; <span class="comment">/* 坠落速度 */</span></span><br><span class="line">    <span class="built_in">this</span>.velY = <span class="built_in">this</span>.speed; <span class="comment">/* Y方向速度 */</span></span><br><span class="line">    <span class="built_in">this</span>.velX = <span class="number">0</span>; <span class="comment">/* X方向速度 */</span></span><br><span class="line">    <span class="built_in">this</span>.stepSize = <span class="built_in">Math</span>.random() / <span class="number">30</span>; <span class="comment">/* 步长 */</span></span><br><span class="line">    <span class="built_in">this</span>.step = <span class="number">0</span> <span class="comment">/* 步数 */</span></span><br><span class="line">&#125;</span><br><span class="line">flakeMove.prototype.update = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="built_in">this</span>.x,</span><br><span class="line">        y = <span class="built_in">this</span>.y;</span><br><span class="line">    <span class="comment">/* 左右摆动(余弦) */</span></span><br><span class="line">    <span class="built_in">this</span>.velX *= <span class="number">0.98</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.velY &lt;= <span class="built_in">this</span>.speed) &#123;</span><br><span class="line">        <span class="built_in">this</span>.velY = <span class="built_in">this</span>.speed</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.velX += <span class="built_in">Math</span>.cos(<span class="built_in">this</span>.step += <span class="number">.05</span>) * <span class="built_in">this</span>.stepSize;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.y += <span class="built_in">this</span>.velY;</span><br><span class="line">    <span class="built_in">this</span>.x += <span class="built_in">this</span>.velX;</span><br><span class="line">    <span class="comment">/* 飞出边界的处理 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.x &gt;= canvas.width || <span class="built_in">this</span>.x &lt;= <span class="number">0</span> || <span class="built_in">this</span>.y &gt;= canvas.height || <span class="built_in">this</span>.y &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.reset(canvas.width, canvas.height)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 飞出边界-放置最顶端继续坠落 */</span></span><br><span class="line">flakeMove.prototype.reset = <span class="function"><span class="keyword">function</span> (<span class="params">width, height</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * width);</span><br><span class="line">    <span class="built_in">this</span>.y = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.size = <span class="built_in">Math</span>.random() * <span class="built_in">this</span>.maxSize + <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">this</span>.speed = <span class="built_in">Math</span>.random() * <span class="number">1</span> + <span class="built_in">this</span>.fallSpeed;</span><br><span class="line">    <span class="built_in">this</span>.velY = <span class="built_in">this</span>.speed;</span><br><span class="line">    <span class="built_in">this</span>.velX = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 渲染雪花-随机形状（此处可修改雪花颜色！！！）</span></span><br><span class="line">flakeMove.prototype.render = <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> snowFlake = ctx.createRadialGradient(<span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="number">0</span>, <span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="built_in">this</span>.size);</span><br><span class="line">    snowFlake.addColorStop(<span class="number">0</span>, <span class="string">&quot;rgba(255, 255, 255, 0.9)&quot;</span>); <span class="comment">/* 此处是雪花颜色，默认是白色 */</span></span><br><span class="line">    snowFlake.addColorStop(<span class="number">.5</span>, <span class="string">&quot;rgba(255, 255, 255, 0.5)&quot;</span>); <span class="comment">/* 若要改为其他颜色，请自行查 */</span></span><br><span class="line">    snowFlake.addColorStop(<span class="number">1</span>, <span class="string">&quot;rgba(255, 255, 255, 0)&quot;</span>); <span class="comment">/* 找16进制的RGB 颜色代码。 */</span></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.fillStyle = snowFlake;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(<span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="built_in">this</span>.size, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line">    ctx.fill();</span><br><span class="line">    ctx.restore();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 创建雪花-定义形状 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFlakes</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxFlake = <span class="built_in">this</span>.maxFlake,</span><br><span class="line">        flakes = <span class="built_in">this</span>.flakes = [],</span><br><span class="line">        canvas = <span class="built_in">this</span>.canvas;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxFlake; i++) &#123;</span><br><span class="line">        flakes.push(<span class="keyword">new</span> flakeMove(canvas.width, canvas.height, <span class="built_in">this</span>.flakeSize, <span class="built_in">this</span>.fallSpeed))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 画雪 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawSnow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxFlake = <span class="built_in">this</span>.maxFlake,</span><br><span class="line">        flakes = <span class="built_in">this</span>.flakes;</span><br><span class="line">    ctx = <span class="built_in">this</span>.ctx, canvas = <span class="built_in">this</span>.canvas, that = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">/* 清空雪花 */</span></span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; maxFlake; e++) &#123;</span><br><span class="line">        flakes[e].update();</span><br><span class="line">        flakes[e].render(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*  一帧一帧的画 */</span></span><br><span class="line">    <span class="built_in">this</span>.loop = requestAnimationFrame(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        drawSnow.apply(that);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 调用及控制方法 */</span></span><br><span class="line"><span class="keyword">var</span> snow = <span class="keyword">new</span> snowFall(&#123;</span><br><span class="line">    maxFlake: <span class="number">60</span></span><br><span class="line">&#125;);</span><br><span class="line">snow.start();</span><br></pre></td></tr></table></figure>

<p><img src="/2021/03/10/blog/image-20210311164406749.png"></p>
<p>如果你一步不跳到了这里，那我相信你已经熟悉了基本的修改流程，如果你还想增加一些高级效果，请自行百度，我这里就不多写了，当然我还加了不少别的东西，但我感觉不是很必要，所以就没有写进来了。</p>
<p>可参考链接：Hexo 个人博客 NexT 主题进阶配置<a href="https://blog.csdn.net/qq_32767041/article/details/103284412">https://blog.csdn.net/qq_32767041/article/details/103284412</a></p>
<h2 id="5踩过的坑"><a href="#5-踩过的坑" class="headerlink" title="5.踩过的坑"></a>5.踩过的坑</h2><h3 id="51添加侧边栏目录后点击没有反应"><a href="#5-1-添加侧边栏目录后，点击没有反应" class="headerlink" title="5.1.添加侧边栏目录后，点击没有反应"></a>5.1.添加侧边栏目录后，点击没有反应</h3><p><img src="/2021/03/10/blog/image-20210311192727706.png"></p>
<p>点击目录审查元素</p>
<p><img src="/2021/03/10/blog/image-20210311192823128.png"></p>
<p>经过简单的排查，发现现在编译出的 HTML 内容中，如下的 markdown 标题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## title</span><br></pre></td></tr></table></figure>

<p>原来会被编译成 <code>&lt;h2 id=&quot;title&quot;&gt;title&lt;/h2&gt;</code></p>
<p>而现在会被编译成 <code>&lt;h2&gt;&lt;span id=&quot;title&quot;&gt;title&lt;/span&gt;&lt;/h2&gt;</code>，这正是问题出现的原因，前后不匹配，所以js拿不到该拿的值</p>
<p>于是我找遍网上大神，找到了 <a href="https://convivae.top/posts/hexo-bo-ke-cai-keng/#%E6%96%B9%E6%B3%95-2">https://convivae.top/posts/hexo-bo-ke-cai-keng/#%E6%96%B9%E6%B3%95-2</a></p>
<p>推测因此导致了生成 TOC 时，H2 元素的 id 属性为未定义，进而导致 TOC 中的锚点也为未定义的问题。</p>
<p>以上的变更，是包 hexo-toc 的变更导致的，具体应该是这次<a href="https://github.com/bubkoo/hexo-toc/blob/7c9624c2d3fb7d13ce973cb8de4dc10ff865c089/lib/filter.js#L28">提交</a>。</p>
<p>但是目前仅仅是初步排查，暂时没有确定问题就是出在 hexo-toc 上，仅仅是认为这个修改可能会导致后续某些生成 toc 的代码的不兼容。</p>
<p>因此目前阶段，进入你项目根目录的 <code>node_modules\hexo-toc\lib\filter.js</code> 中，把 28 行～31 行修改为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$title.attr(<span class="string">&#x27;id&#x27;</span>, id);</span><br><span class="line"><span class="comment">// $title.children(&#x27;a&#x27;).remove();</span></span><br><span class="line"><span class="comment">// $title.html( &#x27;&lt;span id=&quot;&#x27; + id + &#x27;&quot;&gt;&#x27; + $title.html() + &#x27;&lt;/span&gt;&#x27; );</span></span><br><span class="line"><span class="comment">// $title.removeAttr(&#x27;id&#x27;);</span></span><br></pre></td></tr></table></figure>

<p>而原来是】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// $title.attr(&#x27;id&#x27;, id);</span></span><br><span class="line">$title.children(<span class="string">&#x27;a&#x27;</span>).remove();</span><br><span class="line">$title.html( <span class="string">&#x27;&lt;span id=&quot;&#x27;</span> + id + <span class="string">&#x27;&quot;&gt;&#x27;</span> + $title.html() + <span class="string">&#x27;&lt;/span&gt;&#x27;</span> );</span><br><span class="line">$title.removeAttr(<span class="string">&#x27;id&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>前后呼应，问题解决</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
  </entry>
</search>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>周吉吉的博客</title>
  
  <subtitle>周吉吉的博客</subtitle>
  <link href="http://zhouzhe111.github.io/atom.xml" rel="self"/>
  
  <link href="http://zhouzhe111.github.io/"/>
  <updated>2021-04-09T16:11:48.835Z</updated>
  <id>http://zhouzhe111.github.io/</id>
  
  <author>
    <name>JJZhou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>（leetcode）玩转链表</title>
    <link href="http://zhouzhe111.github.io/2021/04/09/leetcode2/"/>
    <id>http://zhouzhe111.github.io/2021/04/09/leetcode2/</id>
    <published>2021-04-09T15:07:55.000Z</published>
    <updated>2021-04-09T16:11:48.835Z</updated>
    
    <content type="html"><![CDATA[<p>链表本质上就是一个个物理内存不连续的结点，包含储存的数据以及指向下一个结点的指针（单链表），或者包含指向上一个和下一个结点的两个指针（双链表）。</p><span id="more"></span><hr><!-- toc --><ul><li><a href="#1-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AD%E7%AD%89httpsleetcode-cncomproblemsswap-nodes-in-pairs">1、<a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">两两交换链表中的节点（中等）</a></a><ul><li><a href="#%E9%A2%98%E8%A7%A3%E9%93%BE%E6%8E%A5httpsleetcode-cncomproblemsswap-nodes-in-pairssolutionwan-zhuan-lian-biao-ji-bai-100-by-qvtqnz-jtvt">题解链接</a></li><li><a href="#%E9%A2%98%E7%9B%AE%E7%BB%99%E5%AE%9A%E4%B8%80%E4%B8%AA%E9%93%BE%E8%A1%A8%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E5%85%B6%E4%B8%AD%E7%9B%B8%E9%82%BB%E7%9A%84%E8%8A%82%E7%82%B9%E5%B9%B6%E8%BF%94%E5%9B%9E%E4%BA%A4%E6%8D%A2%E5%90%8E%E7%9A%84%E9%93%BE%E8%A1%A8">题目：给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li></ul></li><li><a href="#2-k-%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8%E5%9B%B0%E9%9A%BEhttpsleetcode-cncomproblemsreverse-nodes-in-k-group">2、<a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/">K 个一组翻转链表（困难）</a></a><ul><li><a href="#%E9%A2%98%E8%A7%A3%E9%93%BE%E6%8E%A5httpsleetcode-cncomproblemsreverse-nodes-in-k-groupsolutionkge-yi-zu-fan-zhuan-ji-bai-100-by-qvtqnz-upvm-1">题解链接</a></li><li><a href="#%E9%A2%98%E7%9B%AE">题目</a></li><li><a href="#%E6%80%9D%E8%B7%AF-1">思路</a></li></ul></li></ul><!-- tocstop --><hr><h1 id="1-两两交换链表中的节点中等"><a href="#1、两两交换链表中的节点（中等）" class="headerlink" title="1、两两交换链表中的节点（中等）"></a>1、<a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">两两交换链表中的节点（中等）</a></h1><h2 id="题解链接"><a href="#题解链接" class="headerlink" title="题解链接"></a><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/solution/wan-zhuan-lian-biao-ji-bai-100-by-qvtqnz-jtvt/">题解链接</a></h2><p><img src="/2021/04/09/leetcode2/image-20210409231314028.png"></p><h2 id="题目给定一个链表两两交换其中相邻的节点并返回交换后的链表"><a href="#题目：给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。" class="headerlink" title="题目：给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。"></a>题目：给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</h2><p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><p>示例 1：</p><p>输入：head = [1,2,3,4]<br>输出：[2,1,4,3]</p><p><img src="/2021/04/09/leetcode2/swap_ex1.jpg"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>题意是每两个就交换一次，并且实质进行交换结点本身而不是改变值</p><p>很显然，最直白的思路就是往后遍历，每两个节点进行一次交换，为了节省空间，用两个指针保存下一次的节点位置，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head; <span class="comment">// 如果少于两个节点，不需要交换直接返回</span></span><br><span class="line">        ListNode ans = head.next;<span class="comment">//第二个节点就是头结点</span></span><br><span class="line">        head.next = ans.next;  <span class="comment">//把第三个节点（不管是不是null）接到第一个节点后面</span></span><br><span class="line">        ans.next = head;  <span class="comment">//头结点接到第二个节点后面，这样前两个就交换成功，并且找到了返回的节点</span></span><br><span class="line">        ListNode cur = head.next; <span class="comment">//标记连着的两个节点的第一个节点</span></span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span> &amp;&amp; cur.next != <span class="keyword">null</span>) &#123;<span class="comment">//每当找到两个节点，就循环一次</span></span><br><span class="line">            ListNode next = cur.next;  <span class="comment">//标记循环中的第二个节点</span></span><br><span class="line">            cur.next = next.next;  <span class="comment">//把循环中的两个节点之后的全部接到第一个节点之后</span></span><br><span class="line">            head.next = next;   <span class="comment">//第二个节点接到head后面（head表示的是循环前的那个节点）</span></span><br><span class="line">            next.next = cur;  <span class="comment">//第一个节点放到第二个节点之后，完成交换</span></span><br><span class="line">            head = cur;   <span class="comment">//为下次一循环准备</span></span><br><span class="line">            cur = cur.next;  <span class="comment">//为下次一循环准备</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-k-个一组翻转链表困难"><a href="#2、K-个一组翻转链表（困难）" class="headerlink" title="2、K 个一组翻转链表（困难）"></a>2、<a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/">K 个一组翻转链表（困难）</a></h1><h2 id="题解链接"><a href="#题解链接-1" class="headerlink" title="题解链接"></a><a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/solution/kge-yi-zu-fan-zhuan-ji-bai-100-by-qvtqnz-upvm/">题解链接</a></h2><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。</p><p>k 是一个正整数，它的值小于或等于链表的长度。</p><p>如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><p>进阶：</p><p>你可以设计一个只使用常数额外空间的算法来解决此问题吗？<br>你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</p><p><img src="/2021/04/09/leetcode2/reverse_ex1.jpg"></p><p>这和两两交换是一个道理</p><p>就是把2变成k而已</p><p><img src="/2021/04/09/leetcode2/image-20210410000137839.png"></p><h2 id="思路"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>每次寻找k个存在的结点，然后翻转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">       ListNode[] cnt;<span class="comment">//常数空间，翻转时利用的额外空间</span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKGroup</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">           ListNode root = <span class="keyword">new</span> ListNode(<span class="number">0</span>, head);<span class="comment">//定义一个head之前的结点，使得可以从头到尾循环</span></span><br><span class="line">           ListNode before = <span class="keyword">null</span>; <span class="comment">// 记录每一次每组k个结点之前的那个节点</span></span><br><span class="line">           <span class="keyword">if</span> (judge(head, k)) &#123;  <span class="comment">//</span></span><br><span class="line">               before = helper(root, k);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">while</span> (judge(before.next, k)) &#123;<span class="comment">//每当找到k个节点，就循环一次,进行翻转</span></span><br><span class="line">               before = helper(before, k);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> root.next; <span class="comment">//root是新加的结点，那root之后的那个节点就是翻转之后的头结点</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//判断从head开始的k个结点是否满足k个</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">           ListNode sssss = head;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">               <span class="keyword">if</span> (sssss == <span class="keyword">null</span>)</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">               sssss = sssss.next;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//从root之后的k和结点进行翻转</span></span><br><span class="line">       <span class="function"><span class="keyword">private</span> ListNode <span class="title">helper</span><span class="params">(ListNode root, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">           ListNode per = root;</span><br><span class="line">           cnt = <span class="keyword">new</span> ListNode[k];  <span class="comment">//初始化</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;  <span class="comment">//用数组记录</span></span><br><span class="line">               cnt[i] = per.next;</span><br><span class="line">               per = per.next;</span><br><span class="line">           &#125;</span><br><span class="line">           cnt[<span class="number">0</span>].next = cnt[k - <span class="number">1</span>].next; <span class="comment">//先把最后一个结点的后一个接到第一个节点的后面</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; i++) &#123;  <span class="comment">//再依次把前一个节点接到后一个节点的后面</span></span><br><span class="line">               cnt[i].next = cnt[i - <span class="number">1</span>];</span><br><span class="line">           &#125;</span><br><span class="line">           root.next = cnt[k - <span class="number">1</span>];  <span class="comment">//最后把最后一个节点接到root之后，便成了这组节点的第一个</span></span><br><span class="line">           <span class="keyword">return</span> cnt[<span class="number">0</span>]; <span class="comment">//返回这组节点的最后一个，方便下一次循环</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;链表本质上就是一个个物理内存不连续的结点，包含储存的数据以及指向下一个结点的指针（单链表），或者包含指向上一个和下一个结点的两个指针（双链表）。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="http://zhouzhe111.github.io/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>（leetcode）螺旋矩阵篇通用解法</title>
    <link href="http://zhouzhe111.github.io/2021/04/09/leetcode1/"/>
    <id>http://zhouzhe111.github.io/2021/04/09/leetcode1/</id>
    <published>2021-04-09T13:27:29.000Z</published>
    <updated>2021-04-09T15:05:52.227Z</updated>
    
    <content type="html"><![CDATA[<p>（leetcode）螺旋矩阵篇通用解法，螺旋矩阵-顾名思义，就是在一个二维矩阵中旋转赋值这么一种操作，可通过设置状态量来解决在一个方向上到头时，转向解决问题的方法。</p><span id="more"></span><hr><!-- toc --><ul><li><a href="#1-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5-iihttpsleetcode-cncomproblemsspiral-matrix-ii">1、<a href="https://leetcode-cn.com/problems/spiral-matrix-ii/">螺旋矩阵 II</a></a><ul><li><a href="#%E9%A2%98%E8%A7%A3%E5%8E%9F%E6%96%87%E9%93%BE%E6%8E%A5java%E5%87%BB%E8%B4%A5100httpsleetcode-cncomproblemsspiral-matrix-iisolutionji-bai-100-by-qvtqnzbnxm-1roj">题解原文链接（java击败100%）</a><ul><li><a href="#%E9%A2%98%E7%9B%AE">题目：</a></li></ul></li></ul></li></ul><!-- tocstop --><hr><h1 id="1-螺旋矩阵-ii"><a href="#1、螺旋矩阵-II" class="headerlink" title="1、螺旋矩阵 II"></a>1、<a href="https://leetcode-cn.com/problems/spiral-matrix-ii/">螺旋矩阵 II</a></h1><h2 id="题解原文链接java击败100"><a href="#题解原文链接（java击败100-）" class="headerlink" title="题解原文链接（java击败100%）"></a><a href="https://leetcode-cn.com/problems/spiral-matrix-ii/solution/ji-bai-100-by-qvtqnzbnxm-1roj/">题解原文链接（java击败100%）</a></h2><h3 id="题目"><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p>给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。</p><p>示例 1：</p><p>输入：n = 3<br>输出：[[1,2,3],[8,9,4],[7,6,5]]</p><p><img src="/2021/04/09/leetcode1/spiraln.jpg"></p><p>思路就是每次添加当前的数，同时用一个数组<strong>isVisited</strong>记录已经到达过的点的位置，然后判断这个方向（初始方向向右）还有没有新点</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、已经到达边界，如1-&gt;2-&gt;3,3右边已经没有位置了</span><br><span class="line">2、在往前的点之前已经到达过，如7-&gt;8，这个方向上的1是起点，已经到达过</span><br></pre></td></tr></table></figure><p>如果没有的话，按照顺时针调整方向（point和pair[]），循环往复，直到计数到n^2结束</p><p>其中方向<strong>point</strong>的切换要注意</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] generateMatrix(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">int</span>[][] ans = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        <span class="keyword">int</span>[][] pair = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;<span class="comment">//方向，依次是向右，向下，向左，向上</span></span><br><span class="line">        <span class="keyword">int</span> point = <span class="number">0</span>;<span class="comment">//初始是向右走的</span></span><br><span class="line">        <span class="keyword">boolean</span>[][] isVisited = <span class="keyword">new</span> <span class="keyword">boolean</span>[n][n];<span class="comment">//标记到达过的位置</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;<span class="comment">//计数</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (count &lt; n * n) &#123;</span><br><span class="line">            ans[i][j] = ++count;</span><br><span class="line">            isVisited[i][j] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (count == n * n) <span class="keyword">return</span> ans;</span><br><span class="line">            <span class="keyword">while</span> (i + pair[point][<span class="number">0</span>] &gt;= n || i + pair[point][<span class="number">0</span>] &lt; <span class="number">0</span>  <span class="comment">//i改变后是不是满足条件</span></span><br><span class="line">                    || j + pair[point][<span class="number">1</span>] &gt;= n || j + pair[point][<span class="number">1</span>] &lt; <span class="number">0</span>  <span class="comment">//j改变后是不是满足条</span></span><br><span class="line">                    || isVisited[i + pair[point][<span class="number">0</span>]][j + pair[point][<span class="number">1</span>]]) &#123; <span class="comment">//节点访问过</span></span><br><span class="line">                point = point == <span class="number">3</span> ? <span class="number">0</span> : point + <span class="number">1</span>; <span class="comment">//改变方向</span></span><br><span class="line">            &#125;</span><br><span class="line">            i = i + pair[point][<span class="number">0</span>]; <span class="comment">//新位置</span></span><br><span class="line">            j = j + pair[point][<span class="number">1</span>]; <span class="comment">//新位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;（leetcode）螺旋矩阵篇通用解法，螺旋矩阵-顾名思义，就是在一个二维矩阵中旋转赋值这么一种操作，可通过设置状态量来解决在一个方向上到头时，转向解决问题的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="leetcode" scheme="http://zhouzhe111.github.io/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>linux常用组件</title>
    <link href="http://zhouzhe111.github.io/2021/04/09/linux2/"/>
    <id>http://zhouzhe111.github.io/2021/04/09/linux2/</id>
    <published>2021-04-09T12:47:00.000Z</published>
    <updated>2021-04-09T13:20:15.068Z</updated>
    
    <content type="html"><![CDATA[<p>linux常用组件（CentOS）</p><span id="more"></span><hr><!-- toc --><ul><li><a href="#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="#1-rz%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6">1、rz上传下载文件</a><ul><li><a href="#11%E5%AE%89%E8%A3%85">1.1.安装</a></li><li><a href="#12%E4%BD%BF%E7%94%A8">1.2.使用</a></li></ul></li><li><a href="#2-jdk%E5%8F%8A%E7%8E%AF%E5%A2%83">2、jdk及环境</a><ul><li><a href="#21%E5%AE%89%E8%A3%85">2.1.安装</a><ul><li><a href="#211%E8%BF%9B%E5%85%A5%E4%B8%8A%E4%BC%A0%E7%9A%84%E5%8C%85%E7%9B%AE%E5%BD%95%E8%A7%A3%E5%8E%8B%E5%88%97%E5%A6%82">2.1.1.进入上传的包目录，解压，列如</a></li><li><a href="#212%E7%BC%96%E8%BE%91etcprofile%E6%96%87%E4%BB%B6">2.1.2.编辑/etc/profile文件</a></li><li><a href="#213%E7%94%9F%E6%95%88%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">2.1.3.生效环境变量</a></li><li><a href="#214%E9%AA%8C%E8%AF%81%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F%E4%B8%8E%E5%90%A6">2.1.4.验证安装成功与否</a></li></ul></li></ul></li><li><a href="#3-tomcat">3、tomcat</a><ul><li><a href="#1%E9%83%A8%E7%BD%B2%E5%88%B0-usrlocaltomcat%E5%88%9B%E5%BB%BA%E5%A5%BD%E6%96%87%E4%BB%B6%E5%A4%B9-%E7%9B%AE%E5%BD%95">1.部署到 /usr/local/tomcat，创建好文件夹、目录。</a></li><li><a href="#2-%E8%A7%A3%E5%8E%8B%E7%BC%A9">2、解压缩</a></li><li><a href="#3-%E5%90%AF%E5%8A%A8tomcat"><strong>3、启动tomcat</strong></a></li><li><a href="#4-%E9%80%9A%E8%BF%87%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BF%E9%97%AE"><strong>4、通过浏览器访问</strong></a><ul><li><a href="#1%E8%BF%9B%E5%85%A5%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%BB%E6%9C%BA%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%AE%89%E5%85%A8%E7%BB%84%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%E7%82%B9%E5%87%BB%E9%85%8D%E7%BD%AE%E8%A7%84%E5%88%99">(1)进入阿里云主机控制台，安全组，如下图所示，点击配置规则</a></li><li><a href="#2%E9%85%8D%E7%BD%AE%E8%A7%84%E5%88%99%E6%B7%BB%E5%8A%A0%E8%A7%84%E5%88%99%E5%85%81%E8%AE%B8%E4%BB%BB%E4%BD%95ip%E8%AE%BF%E9%97%AE8080">(2)配置规则，添加规则允许任何IP访问8080</a></li><li><a href="#3%E5%86%8D%E6%AC%A1%E8%AE%BF%E9%97%AE%E5%B0%B1%E6%88%90%E5%8A%9F%E4%BA%86">(3)再次访问，就成功了</a></li></ul></li><li><a href="#5-tomcat%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%92%8C%E8%87%AA%E5%90%AF%E5%8A%A8%E5%8F%AF%E9%80%89%E5%8F%AF%E4%BB%A5%E4%B8%8D%E8%AE%BE%E7%BD%AE"><strong>5、Tomcat配置服务和自启动(可选，可以不设置)</strong></a></li></ul></li><li><a href="#4-svn%E5%92%8Cftp%E6%9C%8D%E5%8A%A1%E5%99%A8">4、svn和ftp服务器</a></li><li><a href="#5-docker">5、docker</a><ul><li><a href="#51%E5%AE%89%E8%A3%85">5.1.安装</a></li><li><a href="#52%E5%90%AF%E5%8A%A8-docker-%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B">5.2.启动 docker 守护进程</a></li><li><a href="#53docker-%E5%91%BD%E4%BB%A4">5.3.docker 命令</a></li></ul></li></ul><!-- tocstop --><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>1、rz上传下载文件</p><p>2、jdk及环境</p><p>3、tomcat</p><p>4、svn和ftp服务器</p><p>5、docker</p><h1 id="1-rz上传下载文件"><a href="#1、rz上传下载文件" class="headerlink" title="1、rz上传下载文件"></a>1、rz上传下载文件</h1><h2 id="11安装"><a href="#1-1-安装" class="headerlink" title="1.1.安装"></a>1.1.安装</h2><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install lrzsz</span><br></pre></td></tr></table></figure></blockquote><h2 id="12使用"><a href="#1-2-使用" class="headerlink" title="1.2.使用"></a>1.2.使用</h2><p>sz命令发送文件到本地：</p><blockquote><p>sz filename</p></blockquote><p>rz命令本地上传文件到服务器</p><blockquote><p>rz</p></blockquote><p>客户端推荐使用fz来进行文件传输</p><h1 id="2-jdk及环境"><a href="#2、jdk及环境" class="headerlink" title="2、jdk及环境"></a>2、jdk及环境</h1><h2 id="21安装"><a href="#2-1-安装" class="headerlink" title="2.1.安装"></a>2.1.安装</h2><p>上传jdk包到linux，可使用上面的rz</p><h3 id="211进入上传的包目录解压列如"><a href="#2-1-1-进入上传的包目录，解压，列如" class="headerlink" title="2.1.1.进入上传的包目录，解压，列如"></a>2.1.1.进入上传的包目录，解压，列如</h3><blockquote><p>tar zxvf jdk-8u191-linux-x64.tar.gz</p></blockquote><h3 id="212编辑etcprofile文件"><a href="#2-1-2-编辑-etc-profile文件" class="headerlink" title="2.1.2.编辑/etc/profile文件"></a>2.1.2.编辑/etc/profile文件</h3><blockquote><p>vi /etc/profile</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java/jdk1.8.0_191</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/jre/lib/rt.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"><span class="comment">#（！！！注意：JAVA_HOME的路径是你实际解压后的JDK的路径，千万别写错了）</span></span><br></pre></td></tr></table></figure><p>根据你的目录修改</p><p>按<code>Esc</code>退出编辑模式，输入<code>:wq</code>保存并退出</p><h3 id="213生效环境变量"><a href="#2-1-3-生效环境变量" class="headerlink" title="2.1.3.生效环境变量"></a>2.1.3.生效环境变量</h3><p> 对于/etc/profile编写完成之后是不够的，还需要最后一个步骤，就是让刚刚我们修改的文件变成有效起来，所以我们再输入一个命令，让修改生效。<br> 生效命令：</p><blockquote><p>source /etc/profile</p></blockquote><h3 id="214验证安装成功与否"><a href="#2-1-4-验证安装成功与否" class="headerlink" title="2.1.4.验证安装成功与否"></a>2.1.4.验证安装成功与否</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p><img src="/2021/04/09/linux2/14946112-8b1ba52354a01d7f.png"></p><h1 id="3-tomcat"><a href="#3、tomcat" class="headerlink" title="3、tomcat"></a>3、tomcat</h1><h2 id="1部署到-usrlocaltomcat创建好文件夹-目录"><a href="#1-部署到-usr-local-tomcat，创建好文件夹、目录。" class="headerlink" title="1.部署到 /usr/local/tomcat，创建好文件夹、目录。"></a>1.部署到 /usr/local/tomcat，创建好文件夹、目录。</h2><p>使用wget指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;mirrors.shu.edu.cn&#x2F;apache&#x2F;tomcat&#x2F;tomcat-9&#x2F;v9.0.10&#x2F;bin&#x2F;apache-tomcat-9.0.10.tar.gz</span><br></pre></td></tr></table></figure><p>结果如下，成功下载了apache-tomcat-9.0.10.tar.gz</p><p><img src="/2021/04/09/linux2/1-2.png"></p><h2 id="2-解压缩"><a href="#2、解压缩" class="headerlink" title="2、解压缩"></a>2、解压缩</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-9.0.10.tar.gz</span><br></pre></td></tr></table></figure><p>自动解压<br><img src="/2021/04/09/linux2/2-1.png"></p><h2 id="3-启动tomcat"><a href="#3、启动tomcat" class="headerlink" title="3、启动tomcat"></a><strong>3、启动tomcat</strong></h2><p>进入tomcat下的bin目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@izuf6famz0x92jd98na1kiz bin]# .&#x2F;catalina.sh start</span><br></pre></td></tr></table></figure><p><img src="/2021/04/09/linux2/3-1.png"></p><p>发现 tomcat started</p><h2 id="4-通过浏览器访问"><a href="#4、通过浏览器访问" class="headerlink" title="4、通过浏览器访问"></a><strong>4、通过浏览器访问</strong></h2><p>经搜索查询，可能是 阿里云服务器，对安全性的要求，使得，无法直接访问：</p><p><img src="/2021/04/09/linux2/4-1.png"></p><p>解决方式：</p><h3 id="1进入阿里云主机控制台安全组如下图所示点击配置规则"><a href="#1-进入阿里云主机控制台，安全组，如下图所示，点击配置规则" class="headerlink" title="(1)进入阿里云主机控制台，安全组，如下图所示，点击配置规则"></a>(1)进入阿里云主机控制台，安全组，如下图所示，点击配置规则</h3><p><img src="/2021/04/09/linux2/5-1.png"></p><h3 id="2配置规则添加规则允许任何ip访问8080"><a href="#2-配置规则，添加规则允许任何IP访问8080" class="headerlink" title="(2)配置规则，添加规则允许任何IP访问8080"></a>(2)配置规则，添加规则允许任何IP访问8080</h3><p><img src="/2021/04/09/linux2/7.png"></p><p><img src="/2021/04/09/linux2/8.png"></p><h3 id="3再次访问就成功了"><a href="#3-再次访问，就成功了" class="headerlink" title="(3)再次访问，就成功了"></a>(3)再次访问，就成功了</h3><p><img src="/2021/04/09/linux2/9.png"></p><p>成功完成 tomcat 服务器的下载和安装!</p><p>[这样，直接进入 apache-tomcat 文件夹下的 bin 目录中，运行起来tomcat，会有一个问题：一旦重新启动 reboot 服务器，tomcat也关闭了。]</p><h2 id="5-tomcat配置服务和自启动可选可以不设置"><a href="#5、Tomcat配置服务和自启动-可选，可以不设置" class="headerlink" title="5、Tomcat配置服务和自启动(可选，可以不设置)"></a><strong>5、Tomcat配置服务和自启动(可选，可以不设置)</strong></h2><p>把tomcat加入服务当中，到tomcat的bin目录中把catalina.sh复制到/etc/init.d里并命名为tomcat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">[root@izuf6famz0x92jd98na1kiz &#x2F;]# cp &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;apache-tomcat-9.0.10&#x2F;bin&#x2F;catalina.sh &#x2F;etc&#x2F;init.d&#x2F;tomcat</span><br><span class="line"></span><br><span class="line">shell~#cp &#x2F;usr&#x2F;local&#x2F;apache-tomcat&#x2F;bin&#x2F;catalina.sh &#x2F;etc&#x2F;init.d&#x2F;tomcat</span><br><span class="line"></span><br><span class="line">编辑此文件</span><br><span class="line"></span><br><span class="line">[root@izuf6famz0x92jd98na1kiz &#x2F;]# cd &#x2F;etc&#x2F;init.d</span><br><span class="line">[root@izuf6famz0x92jd98na1kiz init.d]# ls</span><br><span class="line">aegis  agentwatch  functions  netconsole  network  README  tomcat</span><br><span class="line">[root@izuf6famz0x92jd98na1kiz init.d]# vi tomcat</span><br><span class="line"></span><br><span class="line">shell~#vi tomcat</span><br><span class="line"></span><br><span class="line">在#!&#x2F;bin&#x2F;sh下加入</span><br><span class="line"></span><br><span class="line">### BEGIN INIT INFO</span><br><span class="line"># Provides: tomcat</span><br><span class="line"># Required-Start: $remote_fs $network</span><br><span class="line"># Required-Stop: $remote_fs $network</span><br><span class="line"># Default-Start: 2 3 4 5</span><br><span class="line"># Default-Stop: 0 1 6</span><br><span class="line"># Short-Description: The tomcat Java Application Server</span><br><span class="line">### END INIT INFO</span><br><span class="line"></span><br><span class="line">在分割线下加入环境变量</span><br><span class="line"></span><br><span class="line">JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.7.0_07</span><br><span class="line">export JAVA_HOME</span><br><span class="line">PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH</span><br><span class="line">export PATH</span><br><span class="line">CATALINA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;apache-tomcat</span><br><span class="line"></span><br><span class="line">给这个脚本与权限</span><br><span class="line"></span><br><span class="line">shell～#chmod 755 tomcat</span><br><span class="line"></span><br><span class="line">添加tomcat服务这里用chkconfig</span><br><span class="line"></span><br><span class="line">shell～#chkconfig --add tomcat</span><br><span class="line"></span><br><span class="line">如果这里出现提示</span><br><span class="line"></span><br><span class="line">insserv: warning: script &#39;tomcat&#39; missing LSB tags and overrides</span><br><span class="line">insserv: There is a loop between service nginx and tomcat if stopped</span><br><span class="line">insserv: loop involving service tomcat at depth 2</span><br><span class="line">insserv: loop involving service nginx at depth 1</span><br><span class="line">insserv: Stopping tomcat depends on nginx and therefore on system facility &#96;$all&#39; which can not be true!</span><br><span class="line">insserv: exiting now without changing boot order!</span><br><span class="line"></span><br><span class="line">则需要安装chkconfig安装方法</span><br><span class="line"></span><br><span class="line">shell～#apt-get install chkconfig</span><br><span class="line"></span><br><span class="line">就可以如出现以下表示成功</span><br><span class="line"></span><br><span class="line">tomcat                    0:off  1:off  2:on   3:on   4:on   5:on   6:off</span><br><span class="line"></span><br><span class="line">也可以在输入以下命令查看一下</span><br><span class="line"></span><br><span class="line">shell～#chkconfig --list tomcat</span><br><span class="line"></span><br><span class="line">tomcat                    0:off  1:off  2:on   3:on   4:on   5:on   6:off</span><br><span class="line"></span><br><span class="line">如果345 为关闭状态。执行如下命令设置tomcat为开机自启动。</span><br><span class="line"></span><br><span class="line"> shell～# chkconfig tomcat on </span><br><span class="line"></span><br><span class="line">启动一下看看</span><br><span class="line"></span><br><span class="line">shell～# service tomcat start</span><br><span class="line">Using CATALINA_BASE: &#x2F;usr&#x2F;local&#x2F;apache-tomcat</span><br><span class="line">Using CATALINA_HOME: &#x2F;usr&#x2F;local&#x2F;apache-tomcat</span><br><span class="line">Using CATALINA_TMPDIR: &#x2F;usr&#x2F;local&#x2F;apache-tomcat&#x2F;temp</span><br><span class="line">Using JRE_HOME: &#x2F;usr&#x2F;java&#x2F;jdk1.7.0_07</span><br><span class="line">Using CLASSPATH: &#x2F;usr&#x2F;local&#x2F;apache-tomcat&#x2F;bin&#x2F;bootstrap.jar:&#x2F;usr&#x2F;local&#x2F;apache-tomcat&#x2F;bin&#x2F;tomcat-juli.jar</span><br><span class="line"></span><br><span class="line">启动，停止，重启</span><br><span class="line"></span><br><span class="line">shell～# service tomcat start</span><br><span class="line"></span><br><span class="line">shell～# service tomcat stop</span><br><span class="line"></span><br><span class="line">shell～# service tomcat restart</span><br></pre></td></tr></table></figure><h1 id="4-svn和ftp服务器"><a href="#4、svn和ftp服务器" class="headerlink" title="4、svn和ftp服务器"></a>4、svn和ftp服务器</h1><p>由于这两个服务器已经整理了文章，也在我的博客上，欢迎去光临光临，下面是链接</p><p>svn <a href="https://zhouzhe111.github.io/2021/03/14/svn/#more">https://zhouzhe111.github.io/2021/03/14/svn/#more</a></p><p>ftp <a href="https://zhouzhe111.github.io/2021/03/14/ftp/#more">https://zhouzhe111.github.io/2021/03/14/ftp/#more</a></p><h1 id="5-docker"><a href="#5、docker" class="headerlink" title="5、docker"></a>5、docker</h1><h2 id="51安装"><a href="#5-1-安装" class="headerlink" title="5.1.安装"></a>5.1.安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce</span><br></pre></td></tr></table></figure><h2 id="52启动-docker-守护进程"><a href="#5-2-启动-docker-守护进程" class="headerlink" title="5.2.启动 docker 守护进程"></a>5.2.启动 docker 守护进程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h2 id="53docker-命令"><a href="#5-3-docker-命令" class="headerlink" title="5.3.docker 命令"></a>5.3.docker 命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker --help</span></span><br><span class="line">管理命令:</span><br><span class="line">  container   管理容器</span><br><span class="line">  image       管理镜像</span><br><span class="line">  network     管理网络</span><br><span class="line">命令：</span><br><span class="line">  attach      介入到一个正在运行的容器</span><br><span class="line">  build       根据 Dockerfile 构建一个镜像</span><br><span class="line">  commit      根据容器的更改创建一个新的镜像</span><br><span class="line">  cp          在本地文件系统与容器中复制 文件/文件夹</span><br><span class="line">  create      创建一个新容器</span><br><span class="line">  <span class="built_in">exec</span>        在容器中执行一条命令</span><br><span class="line">  images      列出镜像</span><br><span class="line">  <span class="built_in">kill</span>        杀死一个或多个正在运行的容器    </span><br><span class="line">  logs        取得容器的日志</span><br><span class="line">  pause       暂停一个或多个容器的所有进程</span><br><span class="line">  ps          列出所有容器</span><br><span class="line">  pull        拉取一个镜像或仓库到 registry</span><br><span class="line">  push        推送一个镜像或仓库到 registry</span><br><span class="line">  rename      重命名一个容器</span><br><span class="line">  restart     重新启动一个或多个容器</span><br><span class="line">  rm          删除一个或多个容器</span><br><span class="line">  rmi         删除一个或多个镜像</span><br><span class="line">  run         在一个新的容器中执行一条命令</span><br><span class="line">  search      在 Docker Hub 中搜索镜像</span><br><span class="line">  start       启动一个或多个已经停止运行的容器</span><br><span class="line">  stats       显示一个容器的实时资源占用</span><br><span class="line">  stop        停止一个或多个正在运行的容器</span><br><span class="line">  tag         为镜像创建一个新的标签</span><br><span class="line">  top         显示一个容器内的所有进程</span><br><span class="line">  unpause     恢复一个或多个容器内所有被暂停的进程</span><br></pre></td></tr></table></figure><p>上面是不是很多，</p><p>没办法，博主是个好人。。。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker search name <span class="comment">#查找镜像</span></span><br><span class="line">docker pull name  <span class="comment">#拉取镜像（下载到本地</span></span><br><span class="line">docker images <span class="comment">#查看当前有些什么images</span></span><br><span class="line">docker rmi &lt;image id&gt; <span class="comment">#删除images，通过image的id来指定删除谁</span></span><br><span class="line">docker ps <span class="comment">#查看长在运行中的容器</span></span><br><span class="line">docker run name <span class="comment">#使用镜像生成容器</span></span><br><span class="line">docker stop Name/ID   <span class="comment">#停止容器</span></span><br><span class="line">docker rm name <span class="comment">#删除容器</span></span><br><span class="line">docker ps -a <span class="comment">#查看所有容器，包括关闭的</span></span><br><span class="line">sudo docker <span class="built_in">exec</span> -it name /bin/bash   <span class="comment">#接下来我们使用该命令进入一个已经在运行的容器</span></span><br></pre></td></tr></table></figure><p>其中使用镜像产生容器是个大工程，为此我在这里详细介绍常用的参数</p><blockquote><p>docker run name #使用镜像生成容器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-d: 后台运行容器，并返回容器ID；</span><br><span class="line">-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</span><br><span class="line">--name&#x3D;&quot;nginx-lb&quot;: 为容器指定一个名称；</span><br><span class="line">-it 交互模式启动一个容器</span><br><span class="line">&#x2F;bin&#x2F;bash 在容器内执行&#x2F;bin&#x2F;bash命令</span><br></pre></td></tr></table></figure><p>列如：</p><blockquote><p>docker run -p 8080:8080 -d –name mytomcat tomcat:latest</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;linux常用组件（CentOS）&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="http://zhouzhe111.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>linux基本命令</title>
    <link href="http://zhouzhe111.github.io/2021/04/09/linux1/"/>
    <id>http://zhouzhe111.github.io/2021/04/09/linux1/</id>
    <published>2021-04-09T12:45:10.000Z</published>
    <updated>2021-04-09T12:46:32.788Z</updated>
    
    <content type="html"><![CDATA[<p>linux基本命令</p><span id="more"></span><hr><!-- toc --><ul><li><a href="#%E5%89%8D%E8%A8%80">前言</a><ul><li><a href="#1-ls%E5%91%BD%E4%BB%A4">1、ls命令</a></li><li><a href="#2-cd-%E5%91%BD%E4%BB%A4">2、cd 命令</a></li><li><a href="#3-pwd-%E5%91%BD%E4%BB%A4">3、pwd 命令</a></li><li><a href="#5-rm-%E5%91%BD%E4%BB%A4">5、rm 命令</a></li><li><a href="#6-rmdir-%E5%91%BD%E4%BB%A4">6、rmdir 命令</a></li><li><a href="#7-mv-%E5%91%BD%E4%BB%A4">7、mv 命令</a></li><li><a href="#8-cp-%E5%91%BD%E4%BB%A4">8、cp 命令</a></li><li><a href="#9-cat-%E5%91%BD%E4%BB%A4">9、cat 命令</a></li><li><a href="#10-more-%E5%91%BD%E4%BB%A4">10、more 命令</a></li><li><a href="#11-less-%E5%91%BD%E4%BB%A4">11、less 命令</a></li><li><a href="#12-head-%E5%91%BD%E4%BB%A4">12、head 命令</a></li><li><a href="#13-tail-%E5%91%BD%E4%BB%A4">13、tail 命令</a></li><li><a href="#14-which-%E5%91%BD%E4%BB%A4">14、which 命令</a></li><li><a href="#15-whereis-%E5%91%BD%E4%BB%A4">15、whereis 命令</a></li><li><a href="#16-locate-%E5%91%BD%E4%BB%A4">16、locate 命令</a></li><li><a href="#17-find-%E5%91%BD%E4%BB%A4">17、find 命令</a></li><li><a href="#18-chmod-%E5%91%BD%E4%BB%A4">18、chmod 命令</a></li><li><a href="#20-chown-%E5%91%BD%E4%BB%A4">20、chown 命令</a></li><li><a href="#21-df-%E5%91%BD%E4%BB%A4">21、df 命令</a></li><li><a href="#22-du-%E5%91%BD%E4%BB%A4">22、du 命令</a></li><li><a href="#23-ln-%E5%91%BD%E4%BB%A4">23、ln 命令</a></li><li><a href="#24-date-%E5%91%BD%E4%BB%A4">24、date 命令</a></li><li><a href="#25-cal-%E5%91%BD%E4%BB%A4">25、cal 命令</a></li><li><a href="#26-grep-%E5%91%BD%E4%BB%A4">26、grep 命令</a></li><li><a href="#27-wc-%E5%91%BD%E4%BB%A4">27、wc 命令</a></li><li><a href="#28-ps-%E5%91%BD%E4%BB%A4">28、ps 命令</a></li><li><a href="#30-kill-%E5%91%BD%E4%BB%A4">30、kill 命令</a></li><li><a href="#31-free-%E5%91%BD%E4%BB%A4">31、free 命令</a></li></ul></li></ul><!-- tocstop --><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>linux基本命令是使用linux的基础</p><h3 id="1-ls命令"><a href="#1、ls命令" class="headerlink" title="1、ls命令"></a>1、ls命令</h3><p>就是 list 的缩写，通过 ls 命令不仅可以查看 linux 文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)查看目录信息等等。</p><p><strong>常用参数搭配：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ls -a 列出目录所有文件，包含以.开始的隐藏文件</span><br><span class="line">ls -A 列出除.及..的其它文件</span><br><span class="line">ls -r 反序排列</span><br><span class="line">ls -t 以文件修改时间排序</span><br><span class="line">ls -S 以文件大小排序</span><br><span class="line">ls -h 以易读大小显示</span><br><span class="line">ls -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>(1) 按易读方式按时间反序排序，并显示文件详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lhrt</span><br></pre></td></tr></table></figure><p>(2) 按大小反序显示文件详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lrS</span><br></pre></td></tr></table></figure><p>(3)列出当前目录中所有以”t”开头的目录的详细内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l t*</span><br></pre></td></tr></table></figure><p>(4) 列出文件绝对路径（不包含隐藏文件）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls | sed &quot;s:^:&#96;pwd&#96;&#x2F;:&quot;</span><br></pre></td></tr></table></figure><p>(5) 列出文件绝对路径（包含隐藏文件）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find $pwd -maxdepth 1 | xargs ls -ld</span><br></pre></td></tr></table></figure><h3 id="2-cd-命令"><a href="#2、cd-命令" class="headerlink" title="2、cd 命令"></a>2、cd 命令</h3><p>cd(changeDirectory) 命令语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd [目录名]</span><br></pre></td></tr></table></figure><p>说明：切换当前目录至 dirName。</p><p><strong>实例：</strong></p><p>（1）进入要目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;</span><br></pre></td></tr></table></figure><p>（2）进入 “home” 目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure><p>（3）进入上一次工作路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd -</span><br></pre></td></tr></table></figure><p>（4）把上个命令的参数作为cd参数使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd !$</span><br></pre></td></tr></table></figure><h3 id="3-pwd-命令"><a href="#3、pwd-命令" class="headerlink" title="3、pwd 命令"></a>3、pwd 命令</h3><p>pwd 命令用于查看当前工作目录路径。</p><p><strong>实例：</strong></p><p>（1）查看当前路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><p>（2）查看软链接的实际路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd -P</span><br></pre></td></tr></table></figure><p>4、mkdir 命令</p><p>mkdir 命令用于创建文件夹。</p><p>可用选项：</p><ul><li><strong>-m</strong>: 对新建目录设置存取权限，也可以用 chmod 命令设置;</li><li><strong>-p</strong>: 可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后，系统将自动建立好那些尚不在的目录，即一次可以建立多个目录。</li></ul><p><strong>实例：</strong></p><p>（1）当前工作目录下创建名为 t的文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir t</span><br></pre></td></tr></table></figure><p>（2）在 tmp 目录下创建路径为 test/t1/t 的目录，若不存在，则创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;tmp&#x2F;test&#x2F;t1&#x2F;t</span><br></pre></td></tr></table></figure><h3 id="5-rm-命令"><a href="#5、rm-命令" class="headerlink" title="5、rm 命令"></a>5、rm 命令</h3><p>删除一个目录中的一个或多个文件或目录，如果没有使用 -r 选项，则 rm 不会删除目录。如果使用 rm 来删除文件，通常仍可以将该文件恢复原状。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm [选项] 文件…</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）删除任何 .log 文件，删除前逐一询问确认：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -i *.log</span><br></pre></td></tr></table></figure><p>（2）删除 test 子目录及子目录中所有档案删除，并且不用一一确认：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf test</span><br></pre></td></tr></table></figure><p>（3）删除以 -f 开头的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -- -f*</span><br></pre></td></tr></table></figure><h3 id="6-rmdir-命令"><a href="#6、rmdir-命令" class="headerlink" title="6、rmdir 命令"></a>6、rmdir 命令</h3><p>从一个目录中删除一个或多个子目录项，删除某目录时也必须具有对其父目录的写权限。</p><p><strong>注意</strong>：不能删除非空目录</p><p><strong>实例：</strong></p><p>（1）当 parent 子目录被删除后使它也成为空目录的话，则顺便一并删除：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir -p parent&#x2F;child&#x2F;child11</span><br></pre></td></tr></table></figure><h3 id="7-mv-命令"><a href="#7、mv-命令" class="headerlink" title="7、mv 命令"></a>7、mv 命令</h3><p>移动文件或修改文件名，根据第二参数类型（如目录，则移动文件；如为文件则重命令该文件）。</p><p>当第二个参数为目录时，第一个参数可以是多个以空格分隔的文件或目录，然后移动第一个参数指定的多个文件到第二个参数指定的目录中。</p><p><strong>实例：</strong></p><p>（1）将文件 test.log 重命名为 test1.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv test.log test1.txt</span><br></pre></td></tr></table></figure><p>（2）将文件 log1.txt,log2.txt,log3.txt 移动到根的 test3 目录中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv llog1.txt log2.txt log3.txt &#x2F;test3</span><br></pre></td></tr></table></figure><p>（3）将文件 file1 改名为 file2，如果 file2 已经存在，则询问是否覆盖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv -i log1.txt log2.txt</span><br></pre></td></tr></table></figure><p>（4）移动当前文件夹下的所有文件到上一级目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv * ..&#x2F;</span><br></pre></td></tr></table></figure><h3 id="8-cp-命令"><a href="#8、cp-命令" class="headerlink" title="8、cp 命令"></a>8、cp 命令</h3><p>将源文件复制至目标文件，或将多个源文件复制至目标目录。</p><p>注意：命令行复制，如果目标文件已经存在会提示是否覆盖，而在 shell 脚本中，如果不加 -i 参数，则不会提示，而是直接覆盖！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-i 提示</span><br><span class="line">-r 复制目录及目录内所有项目</span><br><span class="line">-a 复制的文件与原文件时间一样</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）复制 a.txt 到 test 目录下，保持原文件时间，如果原文件存在提示是否覆盖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -ai a.txt test</span><br></pre></td></tr></table></figure><p>（2）为 a.txt 建立一个链接（快捷方式）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -s a.txt link_a.txt</span><br></pre></td></tr></table></figure><h3 id="9-cat-命令"><a href="#9、cat-命令" class="headerlink" title="9、cat 命令"></a>9、cat 命令</h3><p>cat 主要有三大功能：</p><p>1.一次显示整个文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat filename</span><br></pre></td></tr></table></figure><p>2.从键盘创建一个文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; filename</span><br></pre></td></tr></table></figure><p>只能创建新文件，不能编辑已有文件。</p><p>3.将几个文件合并为一个文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file1 file2 &gt; file</span><br></pre></td></tr></table></figure><ul><li>-b 对非空输出行号</li><li>-n 输出所有行号</li></ul><p><strong>实例：</strong></p><p>（1）把 log2012.log 的文件内容加上行号后输入 log2013.log 这个文件里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -n log2012.log log2013.log</span><br></pre></td></tr></table></figure><p>（2）把 log2012.log 和 log2013.log 的文件内容加上行号（空白行不加）之后将内容附加到 log.log 里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -b log2012.log log2013.log log.log</span><br></pre></td></tr></table></figure><p>（3）使用 here doc 生成新文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;log.txt &lt;&lt;EOF</span><br><span class="line">&gt;Hello</span><br><span class="line">&gt;World</span><br><span class="line">&gt;PWD&#x3D;$(pwd)</span><br><span class="line">&gt;EOF</span><br><span class="line">ls -l log.txt</span><br><span class="line">cat log.txt</span><br><span class="line">Hello</span><br><span class="line">World</span><br><span class="line">PWD&#x3D;&#x2F;opt&#x2F;soft&#x2F;test</span><br></pre></td></tr></table></figure><p>（4）反向列示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tac log.txt</span><br><span class="line">PWD&#x3D;&#x2F;opt&#x2F;soft&#x2F;test</span><br><span class="line">World</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><h3 id="10-more-命令"><a href="#10、more-命令" class="headerlink" title="10、more 命令"></a>10、more 命令</h3><p>功能类似于 cat, more 会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示。</p><p><strong>命令参数：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+n      从笫 n 行开始显示</span><br><span class="line">-n       定义屏幕大小为n行</span><br><span class="line">+&#x2F;pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示 </span><br><span class="line">-c       从顶部清屏，然后显示</span><br><span class="line">-d       提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能</span><br><span class="line">-l        忽略Ctrl+l（换页）字符</span><br><span class="line">-p       通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似</span><br><span class="line">-s       把连续的多个空行显示为一行</span><br><span class="line">-u       把文件内容中的下画线去掉</span><br></pre></td></tr></table></figure><p><strong>常用操作命令：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Enter    向下 n 行，需要定义。默认为 1 行</span><br><span class="line">Ctrl+F   向下滚动一屏</span><br><span class="line">空格键  向下滚动一屏</span><br><span class="line">Ctrl+B  返回上一屏</span><br><span class="line">&#x3D;       输出当前行的行号</span><br><span class="line">:f     输出文件名和当前行的行号</span><br><span class="line">V      调用vi编辑器</span><br><span class="line">!命令   调用Shell，并执行命令</span><br><span class="line">q       退出more</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示文件中从第3行起的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more +3 text.txt</span><br></pre></td></tr></table></figure><p>（2）在所列出文件目录详细信息，借助管道使每次显示 5 行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l | more -5</span><br></pre></td></tr></table></figure><p>按空格显示下 5 行。</p><h3 id="11-less-命令"><a href="#11、less-命令" class="headerlink" title="11、less 命令"></a>11、less 命令</h3><p>less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。</p><p><strong>常用命令参数：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-i  忽略搜索时的大小写</span><br><span class="line">-N  显示每行的行号</span><br><span class="line">-o  &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来</span><br><span class="line">-s  显示连续空行为一行</span><br><span class="line">&#x2F;字符串：向下搜索“字符串”的功能</span><br><span class="line">?字符串：向上搜索“字符串”的功能</span><br><span class="line">n：重复前一个搜索（与 &#x2F; 或 ? 有关）</span><br><span class="line">N：反向重复前一个搜索（与 &#x2F; 或 ? 有关）</span><br><span class="line">-x &lt;数字&gt; 将“tab”键显示为规定的数字空格</span><br><span class="line">b  向后翻一页</span><br><span class="line">d  向后翻半页</span><br><span class="line">h  显示帮助界面</span><br><span class="line">Q  退出less 命令</span><br><span class="line">u  向前滚动半页</span><br><span class="line">y  向前滚动一行</span><br><span class="line">空格键 滚动一行</span><br><span class="line">回车键 滚动一页</span><br><span class="line">[pagedown]： 向下翻动一页</span><br><span class="line">[pageup]：   向上翻动一页</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）ps 查看进程信息并通过 less 分页显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | less -N</span><br></pre></td></tr></table></figure><p>（2）查看多个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less 1.log 2.log</span><br></pre></td></tr></table></figure><p>可以使用 n 查看下一个，使用 p 查看前一个。</p><h3 id="12-head-命令"><a href="#12、head-命令" class="headerlink" title="12、head 命令"></a>12、head 命令</h3><p>head 用来显示档案的开头至标准输出中，默认 head 命令打印其相应文件的开头 10 行。</p><p><strong>常用参数：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-n&lt;行数&gt; 显示的行数（行数为复数表示从最后向前数）</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示 1.log 文件中前 20 行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head 1.log -n 20</span><br></pre></td></tr></table></figure><p>（2）显示 1.log 文件前 20 字节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -c 20 log2014.log</span><br></pre></td></tr></table></figure><p>（3）显示 t.log最后 10 行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -n -10 t.log</span><br></pre></td></tr></table></figure><h3 id="13-tail-命令"><a href="#13、tail-命令" class="headerlink" title="13、tail 命令"></a>13、tail 命令</h3><p>用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。</p><p><strong>常用参数：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-f 循环读取（常用于查看递增的日志文件）</span><br><span class="line">-n&lt;行数&gt; 显示行数（从后向前）</span><br></pre></td></tr></table></figure><p>（1）循环读取逐渐增加的文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 127.0.0.1 &gt; ping.log &amp;</span><br></pre></td></tr></table></figure><p>后台运行：可使用 jobs -l 查看，也可使用 fg 将其移到前台运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f ping.log</span><br></pre></td></tr></table></figure><p>（查看日志）</p><h3 id="14-which-命令"><a href="#14、which-命令" class="headerlink" title="14、which 命令"></a>14、which 命令</h3><p>在 linux 要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">which     查看可执行文件的位置。</span><br><span class="line">whereis 查看文件的位置。</span><br><span class="line">locate  配合数据库查看文件位置。</span><br><span class="line">find        实际搜寻硬盘查询文件名称。</span><br></pre></td></tr></table></figure><p>which 是在 PATH 就是指定的路径中，搜索某个系统命令的位置，并返回第一个搜索结果。使用 which 命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。</p><p><strong>常用参数：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-n 　指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查看 ls 命令是否存在，执行哪个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which ls</span><br></pre></td></tr></table></figure><p>（2）查看 which</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which which</span><br></pre></td></tr></table></figure><p>（3）查看 cd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which cd（显示不存在，因为 cd 是内建命令，而 which 查找显示是 PATH 中的命令）</span><br></pre></td></tr></table></figure><p>查看当前 PATH 配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure><p>或使用 env 查看所有环境变量及对应值</p><h3 id="15-whereis-命令"><a href="#15、whereis-命令" class="headerlink" title="15、whereis 命令"></a>15、whereis 命令</h3><p>whereis 命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。whereis 及 locate 都是基于系统内建的数据库进行搜索，因此效率很高，而find则是遍历硬盘查找文件。</p><p><strong>常用参数：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-b   定位可执行文件。</span><br><span class="line">-m   定位帮助文件。</span><br><span class="line">-s   定位源代码文件。</span><br><span class="line">-u   搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件。</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查找 locate 程序相关文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis locate</span><br></pre></td></tr></table></figure><p>（2）查找 locate 的源码文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis -s locate</span><br></pre></td></tr></table></figure><p>（3）查找 lcoate 的帮助文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis -m locate</span><br></pre></td></tr></table></figure><h3 id="16-locate-命令"><a href="#16、locate-命令" class="headerlink" title="16、locate 命令"></a>16、locate 命令</h3><p>locate 通过搜寻系统内建文档数据库达到快速找到档案，数据库由 updatedb 程序来更新，updatedb 是由 cron daemon 周期性调用的。默认情况下 locate 命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是 locate 所找到的档案若是最近才建立或 刚更名的，可能会找不到，在内定值中，updatedb 每天会跑一次，可以由修改 crontab 来更新设定值 (etc/crontab)。</p><p>locate 与 find 命令相似，可以使用如 *、? 等进行正则匹配查找</p><p><strong>常用参数：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-l num（要显示的行数）</span><br><span class="line">-f   将特定的档案系统排除在外，如将proc排除在外</span><br><span class="line">-r   使用正则运算式做为寻找条件</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查找和 pwd 相关的所有文件(文件名中包含 pwd）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate pwd</span><br></pre></td></tr></table></figure><p>（2）搜索 etc 目录下所有以 sh 开头的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate &#x2F;etc&#x2F;sh</span><br></pre></td></tr></table></figure><p>（3）查找 /var 目录下，以 reason 结尾的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate -r &#39;^&#x2F;var.*reason$&#39;（其中.表示一个字符，*表示任务多个；.*表示任意多个字符）</span><br></pre></td></tr></table></figure><h3 id="17-find-命令"><a href="#17、find-命令" class="headerlink" title="17、find 命令"></a>17、find 命令</h3><p>用于在文件树中查找文件，并作出相应的处理。</p><p>命令格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find pathname -options [-print -exec -ok ...]</span><br></pre></td></tr></table></figure><p>命令参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pathname: find命令所查找的目录路径。例如用.来表示当前目录，用&#x2F;来表示系统根目录。</span><br><span class="line">-print： find命令将匹配的文件输出到标准输出。</span><br><span class="line">-exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为&#39;command&#39; &#123;  &#125; \;，注意&#123;   &#125;和\；之间的空格。</span><br><span class="line">-ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。</span><br></pre></td></tr></table></figure><p><strong>命令选项：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-name 按照文件名查找文件</span><br><span class="line">-perm 按文件权限查找文件</span><br><span class="line">-user 按文件属主查找文件</span><br><span class="line">-group  按照文件所属的组来查找文件。</span><br><span class="line">-type  查找某一类型的文件，诸如：</span><br><span class="line">   b - 块设备文件</span><br><span class="line">   d - 目录</span><br><span class="line">   c - 字符设备文件</span><br><span class="line">   l - 符号链接文件</span><br><span class="line">   p - 管道文件</span><br><span class="line">   f - 普通文件</span><br><span class="line"></span><br><span class="line">-size n :[c] 查找文件长度为n块文件，带有c时表文件字节大小</span><br><span class="line">-amin n   查找系统中最后N分钟访问的文件</span><br><span class="line">-atime n  查找系统中最后n*24小时访问的文件</span><br><span class="line">-cmin n   查找系统中最后N分钟被改变文件状态的文件</span><br><span class="line">-ctime n  查找系统中最后n*24小时被改变文件状态的文件</span><br><span class="line">-mmin n   查找系统中最后N分钟被改变文件数据的文件</span><br><span class="line">-mtime n  查找系统中最后n*24小时被改变文件数据的文件</span><br><span class="line">(用减号-来限定更改时间在距今n日以内的文件，而用加号+来限定更改时间在距今n日以前的文件。 )</span><br><span class="line">-maxdepth n 最大查找目录深度</span><br><span class="line">-prune 选项来指出需要忽略的目录。在使用-prune选项时要当心，因为如果你同时使用了-depth选项，那么-prune选项就会被find命令忽略</span><br><span class="line">-newer 如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用-newer选项</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查找 48 小时内修改过的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -atime -2</span><br></pre></td></tr></table></figure><p>（2）在当前目录查找 以 .log 结尾的文件。 <strong>.</strong> 代表当前目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find .&#x2F; -name &#39;*.log&#39;</span><br></pre></td></tr></table></figure><p>（3）查找 /opt 目录下 权限为 777 的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find &#x2F;opt -perm 777</span><br></pre></td></tr></table></figure><p>（4）查找大于 1K 的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -size +1000c</span><br></pre></td></tr></table></figure><p>查找等于 1000 字符的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -size 1000c </span><br></pre></td></tr></table></figure><p>-exec 参数后面跟的是 command 命令，它的终止是以 ; 为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。{} 花括号代表前面find查找出来的文件名。</p><p><strong>实例：</strong></p><p>（5）在当前目录中查找更改时间在10日以前的文件并删除它们(无提醒）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -mtime +10 -exec rm -f &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>（6）当前目录中查找所有文件名以.log结尾、更改时间在5日以上的文件，并删除它们，只不过在删除之前先给出提示。 按y键删除文件，按n键不删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name &#39;*.log&#39; mtime +5 -ok -exec rm &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>（7）当前目录下查找文件名以 passwd 开头，内容包含 “pkg” 字符的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -f -name &#39;passwd*&#39; -exec grep &quot;pkg&quot; &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>（8）用 exec 选项执行 cp 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name &#39;*.log&#39; -exec cp &#123;&#125; test3 \;</span><br></pre></td></tr></table></figure><p>-xargs find 命令把匹配到的文件传递给 xargs 命令，而 xargs 命令每次只获取一部分文件而不是全部，不像 -exec 选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。</p><p>实例：</p><p>（9）查找当前目录下每个普通文件，然后使用 xargs 来判断文件类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -print | xargs file</span><br></pre></td></tr></table></figure><p>（10）查找当前目录下所有以 js 结尾的并且其中包含 ‘editor’ 字符的普通文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -name &quot;*.js&quot; -exec grep -lF &#39;ueditor&#39; &#123;&#125; \;</span><br><span class="line">find -type f -name &#39;*.js&#39; | xargs grep -lF &#39;editor&#39;</span><br></pre></td></tr></table></figure><p>（11）利用 xargs 执行 mv 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name &quot;*.log&quot; | xargs -i mv &#123;&#125; test4</span><br></pre></td></tr></table></figure><p>（12）用 grep 命令在当前目录下的所有普通文件中搜索 hostnames 这个词，并标出所在行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name \*(转义） -type f -print | xargs grep -n &#39;hostnames&#39;</span><br></pre></td></tr></table></figure><p>（13）查找当前目录中以一个小写字母开头，最后是 4 到 9 加上 .log 结束的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name &#39;[a-z]*[4-9].log&#39; -print</span><br></pre></td></tr></table></figure><p>（14）在 test 目录查找不在 test4 子目录查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find test -path &#39;test&#x2F;test4&#39; -prune -o -print</span><br></pre></td></tr></table></figure><p>（15）实例1：查找更改时间比文件 log2012.log新但比文件 log2017.log 旧的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -newer log2012.log ! -newer log2017.log</span><br></pre></td></tr></table></figure><p><strong>使用 depth 选项：</strong></p><p>depth 选项可以使 find 命令向磁带上备份文件系统时，希望首先备份所有的文件，其次再备份子目录中的文件。</p><p>实例：find 命令从文件系统的根目录开始，查找一个名为 CON.FILE 的文件。 它将首先匹配所有的文件然后再进入子目录中查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find &#x2F; -name &quot;CON.FILE&quot; -depth -print</span><br></pre></td></tr></table></figure><h3 id="18-chmod-命令"><a href="#18、chmod-命令" class="headerlink" title="18、chmod 命令"></a>18、chmod 命令</h3><p>用于改变 linux 系统文件或目录的访问权限。用它控制文件或目录的访问权限。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。</p><p>每一文件或目录的访问权限都有三组，每组用三位表示，分别为文件属主的读、写和执行权限；与属主同组的用户的读、写和执行权限；系统中其他用户的读、写和执行权限。可使用 ls -l test.txt 查找。</p><p>以文件 log2012.log 为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 root root 296K 11-13 06:03 log2012.log</span><br></pre></td></tr></table></figure><p>第一列共有 10 个位置，第一个字符指定了文件类型。在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是 d，表示是一个目录。从第二个字符开始到第十个 9 个字符，3 个字符一组，分别表示了 3 组用户对文件或者目录的权限。权限字符用横线代表空许可，r 代表只读，w 代表写，x 代表可执行。</p><p>常用参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-c 当发生改变时，报告处理信息</span><br><span class="line">-R 处理指定目录以及其子目录下所有文件</span><br></pre></td></tr></table></figure><p>权限范围：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">u ：目录或者文件的当前的用户</span><br><span class="line">g ：目录或者文件的当前的群组</span><br><span class="line">o ：除了目录或者文件的当前用户或群组之外的用户或者群组</span><br><span class="line">a ：所有的用户及群组</span><br></pre></td></tr></table></figure><p>权限代号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r ：读权限，用数字4表示</span><br><span class="line">w ：写权限，用数字2表示</span><br><span class="line">x ：执行权限，用数字1表示</span><br><span class="line">- ：删除权限，用数字0表示</span><br><span class="line">s ：特殊权限</span><br></pre></td></tr></table></figure><p>实例：</p><p>（1）增加文件 t.log 所有用户可执行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x t.log</span><br></pre></td></tr></table></figure><p>（2）撤销原来所有的权限，然后使拥有者具有可读权限,并输出处理信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u&#x3D;r t.log -c</span><br></pre></td></tr></table></figure><p>（3）给 file 的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 751 t.log -c（或者：chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;x t.log -c)</span><br></pre></td></tr></table></figure><p>（4）将 test 目录及其子目录所有文件添加可读权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+r,g+r,o+r -R text&#x2F; -c</span><br></pre></td></tr></table></figure><p>19、tar 命令</p><p>用来压缩和解压文件。tar 本身不具有压缩功能，只具有打包功能，有关压缩及解压是调用其它的功能来完成。</p><p>弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件</p><p><strong>常用参数：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-c 建立新的压缩文件</span><br><span class="line">-f 指定压缩文件</span><br><span class="line">-r 添加文件到已经压缩文件包中</span><br><span class="line">-u 添加改了和现有的文件到压缩包中</span><br><span class="line">-x 从压缩包中抽取文件</span><br><span class="line">-t 显示压缩文件中的内容</span><br><span class="line">-z 支持gzip压缩</span><br><span class="line">-j 支持bzip2压缩</span><br><span class="line">-Z 支持compress解压文件</span><br><span class="line">-v 显示操作过程</span><br></pre></td></tr></table></figure><p>有关 gzip 及 bzip2 压缩:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gzip 实例：压缩 gzip fileName .tar.gz 和.tgz  解压：gunzip filename.gz 或 gzip -d filename.gz</span><br><span class="line">          对应：tar zcvf filename.tar.gz     tar zxvf filename.tar.gz</span><br><span class="line"></span><br><span class="line">bz2实例：压缩 bzip2 -z filename .tar.bz2 解压：bunzip filename.bz2或bzip -d filename.bz2</span><br><span class="line">       对应：tar jcvf filename.tar.gz         解压：tar jxvf filename.tar.bz2</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）将文件全部打包成 tar 包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf log.tar 1.log,2.log 或tar -cvf log.*</span><br></pre></td></tr></table></figure><p>（2）将 /etc 下的所有文件及目录打包到指定目录，并使用 gz 压缩</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf &#x2F;tmp&#x2F;etc.tar.gz &#x2F;etc</span><br></pre></td></tr></table></figure><p>（3）查看刚打包的文件内容（一定加z，因为是使用 gzip 压缩的）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -ztvf &#x2F;tmp&#x2F;etc.tar.gz</span><br></pre></td></tr></table></figure><p>（4）要压缩打包 /home, /etc ，但不要 /home/dmtsai</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar --exclude &#x2F;home&#x2F;dmtsai -zcvf myfile.tar.gz &#x2F;home&#x2F;* &#x2F;etc</span><br></pre></td></tr></table></figure><h3 id="20-chown-命令"><a href="#20、chown-命令" class="headerlink" title="20、chown 命令"></a>20、chown 命令</h3><p>chown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户 ID；组可以是组名或者组 ID；文件是以空格分开的要改变权限的文件列表，支持通配符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-c 显示更改的部分的信息</span><br><span class="line">-R 处理指定目录及子目录</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）改变拥有者和群组 并显示改变信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -c mail:mail log2012.log</span><br></pre></td></tr></table></figure><p>（2）改变文件群组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -c :mail t.log</span><br></pre></td></tr></table></figure><p>（3）改变文件夹及子文件目录属主及属组为 mail</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -cR mail: test&#x2F;</span><br></pre></td></tr></table></figure><h3 id="21-df-命令"><a href="#21、df-命令" class="headerlink" title="21、df 命令"></a>21、df 命令</h3><p>显示磁盘空间使用情况。获取硬盘被占用了多少空间，目前还剩下多少空间等信息，如果没有文件名被指定，则所有当前被挂载的文件系统的可用空间将被显示。默认情况下，磁盘空间将以 1KB 为单位进行显示，除非环境变量 POSIXLY_CORRECT 被指定，那样将以512字节为单位进行显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-a 全部文件系统列表</span><br><span class="line">-h 以方便阅读的方式显示信息</span><br><span class="line">-i 显示inode信息</span><br><span class="line">-k 区块为1024字节</span><br><span class="line">-l 只显示本地磁盘</span><br><span class="line">-T 列出文件系统类型</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示磁盘使用情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -l</span><br></pre></td></tr></table></figure><p>（2）以易读方式列出所有文件系统及其类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -haT</span><br></pre></td></tr></table></figure><h3 id="22-du-命令"><a href="#22、du-命令" class="headerlink" title="22、du 命令"></a>22、du 命令</h3><p>du 命令也是查看使用空间的，但是与 df 命令不同的是 Linux du 命令是对文件和目录磁盘使用的空间的查看：</p><p>命令格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du [选项] [文件]</span><br></pre></td></tr></table></figure><p><strong>常用参数：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-a 显示目录中所有文件大小</span><br><span class="line">-k 以KB为单位显示文件大小</span><br><span class="line">-m 以MB为单位显示文件大小</span><br><span class="line">-g 以GB为单位显示文件大小</span><br><span class="line">-h 以易读方式显示文件大小</span><br><span class="line">-s 仅显示总计</span><br><span class="line">-c或--total  除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）以易读方式显示文件夹内及子文件夹大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -h scf&#x2F;</span><br></pre></td></tr></table></figure><p>（2）以易读方式显示文件夹内所有文件大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -ah scf&#x2F;</span><br></pre></td></tr></table></figure><p>（3）显示几个文件或目录各自占用磁盘空间的大小，还统计它们的总和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -hc test&#x2F; scf&#x2F;</span><br></pre></td></tr></table></figure><p>（4）输出当前目录下各个子目录所使用的空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -hc --max-depth&#x3D;1 scf&#x2F;</span><br></pre></td></tr></table></figure><h3 id="23-ln-命令"><a href="#23、ln-命令" class="headerlink" title="23、ln 命令"></a>23、ln 命令</h3><p>功能是为文件在另外一个位置建立一个同步的链接，当在不同目录需要该问题时，就不需要为每一个目录创建同样的文件，通过 ln 创建的链接（link）减少磁盘占用量。</p><p>链接分类：软件链接及硬链接</p><p>软链接：</p><ul><li>1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式</li><li>2.软链接可以 跨文件系统 ，硬链接不可以</li><li>3.软链接可以对一个不存在的文件名进行链接</li><li>4.软链接可以对目录进行链接</li></ul><p>硬链接:</p><ul><li>1.硬链接，以文件副本的形式存在。但不占用实际空间。</li><li>2.不允许给目录创建硬链接</li><li>3.硬链接只有在同一个文件系统中才能创建</li></ul><p><strong>需要注意：</strong></p><ul><li>第一：ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；</li><li>第二：ln的链接又分软链接和硬链接两种，软链接就是ln –s 源文件 目标文件，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接 ln 源文件 目标文件，没有参数-s， 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。</li><li>第三：ln指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。</li></ul><p><strong>常用参数：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-b 删除，覆盖以前建立的链接</span><br><span class="line">-s 软链接（符号链接）</span><br><span class="line">-v 显示详细处理过程</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）给文件创建软链接，并显示操作信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sv source.log link.log</span><br></pre></td></tr></table></figure><p>（2）给文件创建硬链接，并显示操作信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -v source.log link1.log</span><br></pre></td></tr></table></figure><p>（3）给目录创建软链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sv &#x2F;opt&#x2F;soft&#x2F;test&#x2F;test3 &#x2F;opt&#x2F;soft&#x2F;test&#x2F;test5</span><br></pre></td></tr></table></figure><h3 id="24-date-命令"><a href="#24、date-命令" class="headerlink" title="24、date 命令"></a>24、date 命令</h3><p>显示或设定系统的日期与时间。</p><p>命令参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-d&lt;字符串&gt; 　显示字符串所指的日期与时间。字符串前后必须加上双引号。</span><br><span class="line">-s&lt;字符串&gt; 　根据字符串来设置日期与时间。字符串前后必须加上双引号。</span><br><span class="line">-u 　显示GMT。</span><br><span class="line">%H 小时(00-23)</span><br><span class="line">%I 小时(00-12)</span><br><span class="line">%M 分钟(以00-59来表示)</span><br><span class="line">%s 总秒数。起算时间为1970-01-01 00:00:00 UTC。</span><br><span class="line">%S 秒(以本地的惯用法来表示)</span><br><span class="line">%a 星期的缩写。</span><br><span class="line">%A 星期的完整名称。</span><br><span class="line">%d 日期(以01-31来表示)。</span><br><span class="line">%D 日期(含年月日)。</span><br><span class="line">%m 月份(以01-12来表示)。</span><br><span class="line">%y 年份(以00-99来表示)。</span><br><span class="line">%Y 年份(以四位数来表示)。</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示下一天</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date +%Y%m%d --date&#x3D;&quot;+1 day&quot;  &#x2F;&#x2F;显示下一天的日期</span><br></pre></td></tr></table></figure><p>（2）-d参数使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">date -d &quot;nov 22&quot;  今年的 11 月 22 日是星期三</span><br><span class="line">date -d &#39;2 weeks&#39; 2周后的日期</span><br><span class="line">date -d &#39;next monday&#39; (下周一的日期)</span><br><span class="line">date -d next-day +%Y%m%d（明天的日期）或者：date -d tomorrow +%Y%m%d</span><br><span class="line">date -d last-day +%Y%m%d(昨天的日期) 或者：date -d yesterday +%Y%m%d</span><br><span class="line">date -d last-month +%Y%m(上个月是几月)</span><br><span class="line">date -d next-month +%Y%m(下个月是几月)</span><br></pre></td></tr></table></figure><h3 id="25-cal-命令"><a href="#25、cal-命令" class="headerlink" title="25、cal 命令"></a>25、cal 命令</h3><p>可以用户显示公历（阳历）日历如只有一个参数，则表示年份(1-9999)，如有两个参数，则表示月份和年份：</p><p>常用参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-3 显示前一月，当前月，后一月三个月的日历</span><br><span class="line">-m 显示星期一为第一列</span><br><span class="line">-j 显示在当前年第几天</span><br><span class="line">-y [year]显示当前年[year]份的日历</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示指定年月日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cal 9 2012</span><br></pre></td></tr></table></figure><p>（2）显示2013年每个月日历</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cal -y 2013</span><br></pre></td></tr></table></figure><p>（3）将星期一做为第一列,显示前中后三月</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cal -3m</span><br></pre></td></tr></table></figure><h3 id="26-grep-命令"><a href="#26、grep-命令" class="headerlink" title="26、grep 命令"></a>26、grep 命令</h3><p>强大的文本搜索命令，grep(Global Regular Expression Print) 全局正则表达式搜索。</p><p>grep 的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。</p><p>命令格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [option] pattern file|dir</span><br></pre></td></tr></table></figure><p>常用参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-A n --after-context显示匹配字符后n行</span><br><span class="line">-B n --before-context显示匹配字符前n行</span><br><span class="line">-C n --context 显示匹配字符前后n行</span><br><span class="line">-c --count 计算符合样式的列数</span><br><span class="line">-i 忽略大小写</span><br><span class="line">-l 只列出文件内容符合指定的样式的文件名称</span><br><span class="line">-f 从文件中读取关键词</span><br><span class="line">-n 显示匹配内容的所在文件中行数</span><br><span class="line">-R 递归查找文件夹</span><br></pre></td></tr></table></figure><p>grep 的规则表达式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">^  #锚定行的开始 如：&#39;^grep&#39;匹配所有以grep开头的行。 </span><br><span class="line">$  #锚定行的结束 如：&#39;grep$&#39;匹配所有以grep结尾的行。 </span><br><span class="line">.  #匹配一个非换行符的字符 如：&#39;gr.p&#39;匹配gr后接一个任意字符，然后是p。  </span><br><span class="line">*  #匹配零个或多个先前字符 如：&#39;*grep&#39;匹配所有一个或多个空格后紧跟grep的行。</span><br><span class="line">.*   #一起用代表任意字符。  </span><br><span class="line">[]   #匹配一个指定范围内的字符，如&#39;[Gg]rep&#39;匹配Grep和grep。 </span><br><span class="line">[^]  #匹配一个不在指定范围内的字符，如：&#39;[^A-FH-Z]rep&#39;匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。  </span><br><span class="line">\(..\)  #标记匹配字符，如&#39;\(love\)&#39;，love被标记为1。   </span><br><span class="line">\&lt;      #锚定单词的开始，如:&#39;\&lt;grep&#39;匹配包含以grep开头的单词的行。</span><br><span class="line">\&gt;      #锚定单词的结束，如&#39;grep\&gt;&#39;匹配包含以grep结尾的单词的行。</span><br><span class="line">x\&#123;m\&#125;  #重复字符x，m次，如：&#39;0\&#123;5\&#125;&#39;匹配包含5个o的行。 </span><br><span class="line">x\&#123;m,\&#125;  #重复字符x,至少m次，如：&#39;o\&#123;5,\&#125;&#39;匹配至少有5个o的行。  </span><br><span class="line">x\&#123;m,n\&#125;  #重复字符x，至少m次，不多于n次，如：&#39;o\&#123;5,10\&#125;&#39;匹配5--10个o的行。  </span><br><span class="line">\w    #匹配文字和数字字符，也就是[A-Za-z0-9]，如：&#39;G\w*p&#39;匹配以G后跟零个或多个文字或数字字符，然后是p。  </span><br><span class="line">\W    #\w的反置形式，匹配一个或多个非单词字符，如点号句号等。  </span><br><span class="line">\b    #单词锁定符，如: &#39;\bgrep\b&#39;只匹配grep。</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查找指定进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep svn</span><br></pre></td></tr></table></figure><p>（2）查找指定进程个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep svn -c</span><br></pre></td></tr></table></figure><p>（3）从文件中读取关键词</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat test1.txt | grep -f key.log</span><br></pre></td></tr></table></figure><p>（4）从文件夹中递归查找以grep开头的行，并只列出文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -lR &#39;^grep&#39; &#x2F;tmp</span><br></pre></td></tr></table></figure><p>（5）查找非x开关的行内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &#39;^[^x]&#39; test.txt</span><br></pre></td></tr></table></figure><p>（6）显示包含 ed 或者 at 字符的内容行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -E &#39;ed|at&#39; test.txt</span><br></pre></td></tr></table></figure><h3 id="27-wc-命令"><a href="#27、wc-命令" class="headerlink" title="27、wc 命令"></a>27、wc 命令</h3><p>wc(word count)功能为统计指定的文件中字节数、字数、行数，并将统计结果输出</p><p>命令格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc [option] file..</span><br></pre></td></tr></table></figure><p><strong>命令参数：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-c 统计字节数</span><br><span class="line">-l 统计行数</span><br><span class="line">-m 统计字符数</span><br><span class="line">-w 统计词数，一个字被定义为由空白、跳格或换行字符分隔的字符串</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）查找文件的 行数 单词数 字节数 文件名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc text.txt</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7     8     70     test.txt</span><br></pre></td></tr></table></figure><p>（2）统计输出结果的行数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat test.txt | wc -l</span><br></pre></td></tr></table></figure><h3 id="28-ps-命令"><a href="#28、ps-命令" class="headerlink" title="28、ps 命令"></a>28、ps 命令</h3><p>ps(process status)，用来查看当前运行的进程状态，一次性查看，如果需要动态连续结果使用 top</p><p>linux上进程有5种状态:</p><ul><li>\1. 运行(正在运行或在运行队列中等待)</li><li>\2. 中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)</li><li>\3. 不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)</li><li>\4. 僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)</li><li>\5. 停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)</li></ul><p>ps 工具标识进程的5种状态码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D 不可中断 uninterruptible sleep (usually IO)</span><br><span class="line">R 运行 runnable (on run queue)</span><br><span class="line">S 中断 sleeping</span><br><span class="line">T 停止 traced or stopped</span><br><span class="line">Z 僵死 a defunct (”zombie”) process</span><br></pre></td></tr></table></figure><p><strong>命令参数：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-A 显示所有进程</span><br><span class="line">a 显示所有进程</span><br><span class="line">-a 显示同一终端下所有进程</span><br><span class="line">c 显示进程真实名称</span><br><span class="line">e 显示环境变量</span><br><span class="line">f 显示进程间的关系</span><br><span class="line">r 显示当前终端运行的进程</span><br><span class="line">-aux 显示所有包含其它使用的进程</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示当前所有进程环境变量及进程间关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef</span><br></pre></td></tr></table></figure><p>（2）显示当前所有进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -A</span><br></pre></td></tr></table></figure><p>（3）与grep联用查找某进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep apache</span><br></pre></td></tr></table></figure><p>（4）找出与 cron 与 syslog 这两个服务有关的 PID 号码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep &#39;(cron|syslog)&#39;</span><br></pre></td></tr></table></figure><p>29、top 命令</p><p>显示当前系统正在执行的进程的相关信息，包括进程 ID、内存占用率、CPU 占用率等</p><p><strong>常用参数：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-c 显示完整的进程命令</span><br><span class="line">-s 保密模式</span><br><span class="line">-p &lt;进程号&gt; 指定进程显示</span><br><span class="line">-n &lt;次数&gt;循环显示次数</span><br></pre></td></tr></table></figure><p>实例：</p><p><strong>（1）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">top - 14:06:23 up 70 days, 16:44,  2 users,  load average: 1.25, 1.32, 1.35</span><br><span class="line">Tasks: 206 total,   1 running, 205 sleeping,   0 stopped,   0 zombie</span><br><span class="line">Cpu(s):  5.9%us,  3.4%sy,  0.0%ni, 90.4%id,  0.0%wa,  0.0%hi,  0.2%si,  0.0%st</span><br><span class="line">Mem:  32949016k total, 14411180k used, 18537836k free,   169884k buffers</span><br><span class="line">Swap: 32764556k total,        0k used, 32764556k free,  3612636k cached</span><br><span class="line">PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND  </span><br><span class="line">28894 root      22   0 1501m 405m  10m S 52.2  1.3   2534:16 java  </span><br></pre></td></tr></table></figure><p>前五行是当前系统情况整体的统计信息区。</p><p><strong>第一行，任务队列信息，同 uptime 命令的执行结果，具体参数说明情况如下：</strong></p><p>14:06:23 — 当前系统时间</p><p>up 70 days, 16:44 — 系统已经运行了70天16小时44分钟（在这期间系统没有重启过的吆！）</p><p>2 users — 当前有2个用户登录系统</p><p>load average: 1.15, 1.42, 1.44 — load average后面的三个数分别是1分钟、5分钟、15分钟的负载情况。</p><p>load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。</p><p><strong>第二行，Tasks — 任务（进程），具体信息说明如下：</strong></p><p>系统现在共有206个进程，其中处于运行中的有1个，205个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。</p><p><strong>第三行，cpu状态信息，具体属性说明如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">5.9%us — 用户空间占用CPU的百分比。</span><br><span class="line">3.4% sy — 内核空间占用CPU的百分比。</span><br><span class="line">0.0% ni — 改变过优先级的进程占用CPU的百分比</span><br><span class="line">90.4% id — 空闲CPU百分比</span><br><span class="line">0.0% wa — IO等待占用CPU的百分比</span><br><span class="line">0.0% hi — 硬中断（Hardware IRQ）占用CPU的百分比</span><br><span class="line">0.2% si — 软中断（Software Interrupts）占用CPU的百分比</span><br></pre></td></tr></table></figure><p><strong>备注：</strong>在这里CPU的使用比率和windows概念不同，需要理解linux系统用户空间和内核空间的相关知识！</p><p>第四行，内存状态，具体信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">32949016k total — 物理内存总量（32GB）</span><br><span class="line">14411180k used — 使用中的内存总量（14GB）</span><br><span class="line">18537836k free — 空闲内存总量（18GB）</span><br><span class="line">169884k buffers — 缓存的内存量 （169M）</span><br></pre></td></tr></table></figure><p><strong>第五行，swap交换分区信息，具体信息说明如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">32764556k total — 交换区总量（32GB）</span><br><span class="line">0k used — 使用的交换区总量（0K）</span><br><span class="line">32764556k free — 空闲交换区总量（32GB）</span><br><span class="line">3612636k cached — 缓冲的交换区总量（3.6GB）</span><br></pre></td></tr></table></figure><p><strong>第六行，空行。</strong></p><p><strong>第七行以下：各进程（任务）的状态监控，项目列信息说明如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PID — 进程id</span><br><span class="line">USER — 进程所有者</span><br><span class="line">PR — 进程优先级</span><br><span class="line">NI — nice值。负值表示高优先级，正值表示低优先级</span><br><span class="line">VIRT — 进程使用的虚拟内存总量，单位kb。VIRT&#x3D;SWAP+RES</span><br><span class="line">RES — 进程使用的、未被换出的物理内存大小，单位kb。RES&#x3D;CODE+DATA</span><br><span class="line">SHR — 共享内存大小，单位kb</span><br><span class="line">S — 进程状态。D&#x3D;不可中断的睡眠状态 R&#x3D;运行 S&#x3D;睡眠 T&#x3D;跟踪&#x2F;停止 Z&#x3D;僵尸进程</span><br><span class="line">%CPU — 上次更新到现在的CPU时间占用百分比</span><br><span class="line">%MEM — 进程使用的物理内存百分比</span><br><span class="line">TIME+ — 进程使用的CPU时间总计，单位1&#x2F;100秒</span><br><span class="line">COMMAND — 进程名称（命令名&#x2F;命令行）</span><br></pre></td></tr></table></figure><p><strong>top 交互命令</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">h 显示top交互命令帮助信息</span><br><span class="line">c 切换显示命令名称和完整命令行</span><br><span class="line">m 以内存使用率排序</span><br><span class="line">P 根据CPU使用百分比大小进行排序</span><br><span class="line">T 根据时间&#x2F;累计时间进行排序</span><br><span class="line">W 将当前设置写入~&#x2F;.toprc文件中</span><br><span class="line">o或者O 改变显示项目的顺序</span><br></pre></td></tr></table></figure><h3 id="30-kill-命令"><a href="#30、kill-命令" class="headerlink" title="30、kill 命令"></a>30、kill 命令</h3><p>发送指定的信号到相应进程。不指定型号将发送SIGTERM（15）终止指定进程。如果任无法终止该程序可用”-KILL” 参数，其发送的信号为SIGKILL(9) ，将强制结束进程，使用ps命令或者jobs 命令可以查看进程号。root用户将影响用户的进程，非root用户只能影响自己的进程。</p><p><strong>常用参数：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-l  信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称</span><br><span class="line">-a  当处理当前进程时，不限制命令名和进程号的对应关系</span><br><span class="line">-p  指定kill 命令只打印相关进程的进程号，而不发送任何信号</span><br><span class="line">-s  指定发送信号</span><br><span class="line">-u  指定用户</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）先使用ps查找进程pro1，然后用kill杀掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 $(ps -ef | grep pro1)</span><br></pre></td></tr></table></figure><h3 id="31-free-命令"><a href="#31、free-命令" class="headerlink" title="31、free 命令"></a>31、free 命令</h3><p>显示系统内存使用情况，包括物理内存、交互区内存(swap)和内核缓冲区内存。</p><p><strong>命令参数：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-b 以Byte显示内存使用情况</span><br><span class="line">-k 以kb为单位显示内存使用情况</span><br><span class="line">-m 以mb为单位显示内存使用情况</span><br><span class="line">-g 以gb为单位显示内存使用情况</span><br><span class="line">-s&lt;间隔秒数&gt; 持续显示内存</span><br><span class="line">-t 显示内存使用总合</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><p>（1）显示内存使用情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">free</span><br><span class="line">free -k</span><br><span class="line">free -m</span><br></pre></td></tr></table></figure><p>（2）以总和的形式显示内存的使用信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -t</span><br></pre></td></tr></table></figure><p>（3）周期性查询内存使用情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free -s 10</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;linux基本命令&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="http://zhouzhe111.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>svn服务器的搭建（centos7）</title>
    <link href="http://zhouzhe111.github.io/2021/03/14/svn/"/>
    <id>http://zhouzhe111.github.io/2021/03/14/svn/</id>
    <published>2021-03-14T11:56:51.000Z</published>
    <updated>2021-03-14T12:14:16.360Z</updated>
    
    <content type="html"><![CDATA[<p>个人非常喜欢的文件共享、版本控制服务器，强烈推荐团队合作时使用，大大减少不必要的文件传输带来的麻烦。svn，肯定适合你~~</p><span id="more"></span><hr><!-- toc --><ul><li><a href="#%E5%89%8D%E8%A8%80">前言</a><ul><li><a href="#1-%E6%A3%80%E6%9F%A5%E7%B3%BB%E7%BB%9F%E6%98%AF%E5%90%A6%E5%B7%B2%E7%BB%8F%E5%AE%89%E8%A3%85%E5%A6%82%E6%9E%9C%E5%AE%89%E8%A3%85%E5%B0%B1%E5%8D%B8%E8%BD%BD">1、检查系统是否已经安装如果安装就卸载</a><ul><li><a href="#%E6%A3%80%E6%9F%A5">检查：</a></li><li><a href="#%E5%8D%B8%E8%BD%BD">卸载：</a></li></ul></li><li><a href="#2-%E5%AE%89%E8%A3%85">2、安装</a></li><li><a href="#3-%E5%BB%BA%E7%AB%8Bsvn%E5%BA%93%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE%E5%8F%AF%E8%87%AA%E7%94%B1">3、建立SVN库（文件位置可自由）</a><ul><li><a href="#%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93%E6%96%87%E4%BB%B6%E5%A4%B9">创建仓库文件夹：</a></li><li><a href="#%E7%94%A8svn%E7%AE%A1%E7%90%86%E5%91%98%E8%BA%AB%E4%BB%BD%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93">用svn管理员身份创建一个仓库：</a></li></ul></li><li><a href="#4-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE">4、权限配置</a><ul><li><a href="#1authz%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E8%AE%BE%E7%BD%AE%E5%93%AA%E4%BA%9B%E7%94%A8%E6%88%B7%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E5%93%AA%E4%BA%9B%E7%9B%AE%E5%BD%95%E8%BF%9B%E5%85%A5varsvnrepositoryconf%E4%B8%8A%E9%9D%A2%E7%94%9F%E6%88%90%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B">（1）authz文件配置，设置哪些用户可以访问哪些目录：进入/var/svn/repository/conf上面生成的文件夹下，</a></li><li><a href="#2passwd%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE-%E4%B8%BB%E8%A6%81%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%E4%BE%8B%E5%A6%82">（2）passwd文件配置 主要添加用户名和密码，例如：：</a></li><li><a href="#3svnserveconf-%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE-%E9%85%8D%E7%BD%AE%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90">（3）svnserve.conf 文件配置 配置访问权限</a></li></ul></li><li><a href="#5-%E5%90%AF%E5%8A%A8svn">5、启动svn</a></li><li><a href="#6%E6%9F%A5%E7%9C%8Bsvn%E8%BF%9B%E7%A8%8B">6.查看svn进程</a></li><li><a href="#7%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5">7.客户端连接</a><ul><li><a href="#1-%E5%AE%89%E8%A3%85svn%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%80%E8%B7%AFnext%E5%8D%B3%E5%8F%AF">1、 安装svn客户端，一路next即可</a></li><li><a href="#2-%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%E5%8F%B3%E9%94%AE-check-out">2、 新建文件夹，右键 check out</a></li><li><a href="#3-%E8%BE%93%E5%85%A5-url">3、 输入 url =》</a></li><li><a href="#4-%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81%E9%83%BD%E6%98%AF-usst">4、 用户名密码都是 usst</a></li><li><a href="#5-svn%E6%93%8D%E4%BD%9C">5、 Svn操作</a><ul><li><a href="#1-update-%E6%9B%B4%E6%96%B0%E5%88%B0%E6%9C%AC%E5%9C%B0">1、 update =》更新到本地</a></li><li><a href="#2-commit-%E4%B8%8A%E4%BC%A0%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8">2、 commit =》上传到服务器</a></li></ul></li></ul></li></ul></li></ul><!-- tocstop --><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>优点：</strong></p><p><strong>1.svn优点：集中式管理，管理方式在服务端配置好，客户端只需要同步提交即可，使用方便，操作简单，很容易就可以上手</strong></p><p><strong>2.在服务端统一控制好访问权限，利用代码的安全管理。</strong></p><p><strong>3.所有的代码以服务端为准，代码一致性高。</strong></p><p><strong>缺点：</strong></p><p><strong>1.所有操作都需要通过服务端进行同步，这会导致服务器性能要求比较高。如果服务器宕机了就无法提交代码了。</strong></p><p><strong>2.分支管理不灵活，svn分支是一个完整的目录，且这个目录拥有完整的实际文件，这些操作都是在服务端进行同步的，</strong></p><p>  <strong>不是本 地化操作，如果要删除分支，也是需要将远程的分支进行删除，这会导致大家都得同步</strong></p><p><strong>3.需要连网，如果无法连接到服务器就无法提交代码</strong></p><h2 id="1-检查系统是否已经安装如果安装就卸载"><a href="#1、检查系统是否已经安装如果安装就卸载" class="headerlink" title="1、检查系统是否已经安装如果安装就卸载"></a>1、检查系统是否已经安装如果安装就卸载</h2><h3 id="检查"><a href="#检查：" class="headerlink" title="检查："></a>检查：</h3><blockquote><p>svnserve –version</p></blockquote><h3 id="卸载"><a href="#卸载：" class="headerlink" title="卸载："></a>卸载：</h3><blockquote><p>yum remove subversion</p></blockquote><h2 id="2-安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><blockquote><p>yum install subversion</p></blockquote><h2 id="3-建立svn库文件位置可自由"><a href="#3、建立SVN库（文件位置可自由）" class="headerlink" title="3、建立SVN库（文件位置可自由）"></a>3、建立SVN库（文件位置可自由）</h2><h3 id="创建仓库文件夹"><a href="#创建仓库文件夹：" class="headerlink" title="创建仓库文件夹："></a>创建仓库文件夹：</h3><blockquote><p>mkdir -p /var/svn/repository/</p></blockquote><h3 id="用svn管理员身份创建一个仓库"><a href="#用svn管理员身份创建一个仓库：" class="headerlink" title="用svn管理员身份创建一个仓库："></a>用svn管理员身份创建一个仓库：</h3><blockquote><p>svnadmin create /var/svn/repository/</p></blockquote><p>执行上面的命令后，自动建立repositories库，查看/var/svn/repository/ 文件夹发现包含了conf, db,format,hooks, locks, README.txt等文件，说明一个SVN库已经建立。</p><p><img src="/2021/03/14/svn/1924"></p><h2 id="4-权限配置"><a href="#4、权限配置" class="headerlink" title="4、权限配置"></a>4、权限配置</h2><h3 id="1authz文件配置设置哪些用户可以访问哪些目录进入varsvnrepositoryconf上面生成的文件夹下"><a href="#（1）authz文件配置，设置哪些用户可以访问哪些目录：进入-var-svn-repository-conf上面生成的文件夹下，" class="headerlink" title="（1）authz文件配置，设置哪些用户可以访问哪些目录：进入/var/svn/repository/conf上面生成的文件夹下，"></a>（1）authz文件配置，设置哪些用户可以访问哪些目录：进入/var/svn/repository/conf上面生成的文件夹下，</h3><blockquote><p>vi authz</p></blockquote><p>进行配置 authz文件配置，vi authz,向authz文件追加以下内容,左边是用户名，右边是读写权限(r、w、rw、no access),</p><blockquote><p>#一般 ，追加</p><p>[/]   </p><p>usst=rw</p><p>#这两行即可，格式：用户名=rw (r =&gt; read w =&gt; write)</p></blockquote><p>每个目录的读写权限都可精细控制，例如：</p><p> <img src="https://img2018.cnblogs.com/blog/1608463/201905/1608463-20190528115050747-584463236.png" alt="img"></p><h3 id="2passwd文件配置-主要添加用户名和密码例如"><a href="#（2）passwd文件配置-主要添加用户名和密码，例如：：" class="headerlink" title="（2）passwd文件配置 主要添加用户名和密码，例如：："></a>（2）passwd文件配置 主要添加用户名和密码，例如：：</h3><blockquote><p>vi passwd</p></blockquote><blockquote><p>追加</p><p>usst=usst</p><p>格式：用户名=密码</p></blockquote><p><img src="/2021/03/14/svn/1608463-20190528115217793-754927928.png"></p><h3 id="3svnserveconf-文件配置-配置访问权限"><a href="#（3）svnserve-conf-文件配置-配置访问权限" class="headerlink" title="（3）svnserve.conf 文件配置 配置访问权限"></a>（3）svnserve.conf 文件配置 配置访问权限</h3><blockquote><p>vi svnserve.conf</p></blockquote><p>追加到[general]下（或者取消注释，改写）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">anon-access = none  <span class="comment">#不允许匿名登录</span></span><br><span class="line"></span><br><span class="line">auth-access = write   <span class="comment">#写权限</span></span><br><span class="line"></span><br><span class="line">password-db = passwd  <span class="comment">#指定用户名密码配置文件</span></span><br><span class="line"></span><br><span class="line">authz-db = authz  <span class="comment">#指定账户权限配置文件</span></span><br></pre></td></tr></table></figure><p> <img src="/2021/03/14/svn/1608463-20190528115404201-1593471956.png"></p><h2 id="5-启动svn"><a href="#5、启动svn" class="headerlink" title="5、启动svn"></a>5、启动svn</h2><p>本人建议指定端口的启动方式，如果建立多个仓库，也便于管理。</p><p>svn默认端口为3690，需要在防火墙添加才可在svn客户端访问</p><p>当然，云服务器可以直接在安全组中配置防火墙</p><p>启动命令：</p><blockquote><p> svnserve -d -r /var/svn/repository/ –listen-port 3690</p></blockquote><p>建立多个的话可以选择用3691等其他端口启动</p><h2 id="6查看svn进程"><a href="#6-查看svn进程" class="headerlink" title="6.查看svn进程"></a>6.查看svn进程</h2><blockquote><p>ps -ef|grep svn</p></blockquote><p>可以看到服务启动成功，想要重新启动则kill -9 pid，再重新使用</p><blockquote><p>svnserve -d -r /opt/svn/repository –listen-port 3691</p></blockquote><p>命令启动</p><p><img src="/2021/03/14/svn/1608463-20190528120008423-631669417.png"></p><p> 这时候，用svn客户端连接会发现svn://ip:port/opt/svn/repository无法使用，这是因为linux没有开放该端口，需要手动添加；</p><p>步骤如下：</p><p>vi /etc/sysconfig/iptables,开放新端口</p><p><img src="/2021/03/14/svn/1608463-20190528120647098-2073087851.png"></p><p>重启防火墙</p><p>service iptables restart</p><p>重新使用客户端就可以正常连接了！</p><h2 id="7客户端连接"><a href="#7-客户端连接" class="headerlink" title="7.客户端连接"></a>7.客户端连接</h2><p>推荐使用TortoiseSVN <a href="https://tortoisesvn.net/">https://tortoisesvn.net/</a></p><h3 id="1-安装svn客户端一路next即可"><a href="#1、-安装svn客户端，一路next即可" class="headerlink" title="1、 安装svn客户端，一路next即可"></a>1、 安装svn客户端，一路next即可</h3><h3 id="2-新建文件夹右键-check-out"><a href="#2、-新建文件夹，右键-check-out" class="headerlink" title="2、 新建文件夹，右键 check out"></a>2、 新建文件夹，右键 check out</h3><p><img src="/2021/03/14/svn/clip_image002.jpg"></p><h3 id="3-输入-url"><a href="#3、-输入-url-》" class="headerlink" title="3、 输入 url =》"></a>3、 输入 url =》</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">svn://ip:3690   <span class="comment">#ip+端口号</span></span><br><span class="line"><span class="comment">#例如  svn://106.15.250.152:3690 </span></span><br></pre></td></tr></table></figure><p>新建你本地的svn仓库， 目标文件夹（必须是空的）</p><p><img src="/2021/03/14/svn/clip_image004.jpg"></p><h3 id="4-用户名密码都是-usst"><a href="#4、-用户名密码都是-usst" class="headerlink" title="4、 用户名密码都是 usst"></a>4、 用户名密码都是 usst</h3><h3 id="5-svn操作"><a href="#5、-Svn操作" class="headerlink" title="5、 Svn操作"></a>5、 Svn操作</h3><p><img src="/2021/03/14/svn/clip_image006.jpg"></p><p>右键根目录</p><h4 id="1-update-更新到本地"><a href="#1、-update-》更新到本地" class="headerlink" title="1、 update =》更新到本地"></a>1、 update =》更新到本地</h4><p>同名文件会覆盖本地的文件</p><h4 id="2-commit-上传到服务器"><a href="#2、-commit-》上传到服务器" class="headerlink" title="2、 commit =》上传到服务器"></a>2、 commit =》上传到服务器</h4><p><img src="/2021/03/14/svn/clip_image008.jpg" alt="img"></p><p>点击ALL =》全选  =》ok </p><p>正常来说，你的仓库文件夹上有特殊标记（红点，或者绿点），就表明在正常运出行了</p><p><img src="/2021/03/14/svn/image-20210314201246127.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;个人非常喜欢的文件共享、版本控制服务器，强烈推荐团队合作时使用，大大减少不必要的文件传输带来的麻烦。svn，肯定适合你~~&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="http://zhouzhe111.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>ftp服务器的简单搭建（centos7），并且配置虚拟用户登录</title>
    <link href="http://zhouzhe111.github.io/2021/03/14/ftp/"/>
    <id>http://zhouzhe111.github.io/2021/03/14/ftp/</id>
    <published>2021-03-14T11:17:18.000Z</published>
    <updated>2021-03-14T11:50:25.065Z</updated>
    
    <content type="html"><![CDATA[<p>ftp服务器是非常实用的网上存储工具，你可以在你的ftp上为所欲为，还可以在上面多人管理文件,来看看怎么搭建你的第一台ftp吧！</p><span id="more"></span><hr><!-- toc --><ul><li><a href="#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="#1%E5%AE%89%E8%A3%85%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87">1.安装前的准备</a></li><li><a href="#2%E5%AE%89%E8%A3%85vsftpd">2.安装vsftpd</a></li><li><a href="#3%E9%85%8D%E7%BD%AEvsftpd">3.配置vsftpd</a></li><li><a href="#4%E8%BF%9E%E6%8E%A5">4.连接</a></li></ul><!-- tocstop --><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>拥有FTP服务器的好处:</p><p>1.在本地电脑上登陆到国际互联网；</p><p>2.搜索有文件共享主机或者个人电脑(一般有专门的FTP服务器网站上公布的,上面有进入该主机或个人电脑的名称,口令和路径)；</p><p>3.当与远程主机或者对方的个人电</p><p>4.脑建立连接后,用对方提供的用户名和口令登陆到该主机或对方的个人电脑；</p><p>5.在远程主机或对方的个人电脑登陆成功后,就可以上传你想跟别人分享的东东或者下载别人授权共享的东东(这里的东东是指能放到电脑里去又能在显示屏上看到的东东)；</p><p>6.完成工作后关闭FTP下载软件,切断连接。</p><h2 id="1安装前的准备"><a href="#1-安装前的准备" class="headerlink" title="1.安装前的准备"></a>1.安装前的准备</h2><ul><li>关闭防火墙或者开端口权限。一般是firewalld或者iptables。</li><li>当然，如果你是阿里云这种云服务器，可以在安全组设置里面配置防火墙，就不需要在命令行去配置了—</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><ul><li><p>关闭sellinux</p><p>sellinux是什么？</p><p>SELinux 主要作用就是最大限度地减小系统中服务进程可访问的资源（最小权限原则）。</p><p>所以，他的权限是非常高的，安装ftp会被他隔断权限，需要关闭</p></li></ul><p>立即关闭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br></pre></td></tr></table></figure><p>重启也关闭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;selinux&#x2F;config</span><br></pre></td></tr></table></figure><p>修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELINUX&#x3D;disabled</span><br></pre></td></tr></table></figure><p>查看是否关闭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getenforce</span><br></pre></td></tr></table></figure><blockquote><p>（注意！！！）SELINUX是系统自带的，必须进行下面的设置，关掉SELINUX对ftp的限制，否则ftp会没有权限</p><p>setsebool -P allow_ftpd_anon_write on<br>setsebool -P allow_ftpd_full_access on</p></blockquote><h2 id="2安装vsftpd"><a href="#2-安装vsftpd" class="headerlink" title="2.安装vsftpd"></a>2.安装vsftpd</h2><p>很简单一句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y vsftpd</span><br></pre></td></tr></table></figure><p>立即启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start vsftpd</span><br></pre></td></tr></table></figure><p>跟随系统启动而启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable vsftpd</span><br></pre></td></tr></table></figure><h2 id="3配置vsftpd"><a href="#3-配置vsftpd" class="headerlink" title="3.配置vsftpd"></a>3.配置vsftpd</h2><blockquote><p>（注意！！！）所有配置文件中每行必须顶格，末尾不能有空格</p><p>（注意！！！）所有配置文件中每行必须顶格，末尾不能有空格</p><p>（注意！！！）所有配置文件中每行必须顶格，末尾不能有空格</p></blockquote><ul><li>创建vsftpd使用的系统用户，主目录为/home/vsftpd，禁止ssh登录。创建之后所有虚拟用户使用这个系统用户访问文件。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd vsftpd -d &#x2F;home&#x2F;vsftpd -s &#x2F;bin&#x2F;false</span><br></pre></td></tr></table></figure><ul><li>创建虚拟用户主目录，比如虚拟用户叫ftp1，执行下面的命令。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;home&#x2F;vsftpd&#x2F;ftp1</span><br></pre></td></tr></table></figure><ul><li>创建这个虚拟用户</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;vsftpd&#x2F;loginusers.conf</span><br></pre></td></tr></table></figure><p>增加  //单行为用户名，双行为密码，而且用户名必须和对应的配置文件重名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ftp1</span><br><span class="line">123456</span><br></pre></td></tr></table></figure><p>这样就创建了ftp1这个虚拟用户，密码为123456</p><ul><li>根据这个文件创建数据库文件，db_load是centos自带的转换工具</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db_load -T -t <span class="built_in">hash</span> -f /etc/vsftpd/loginusers.conf /etc/vsftpd/loginusers.db</span><br><span class="line">chmod 600 /etc/vsftpd/loginusers.db   <span class="comment">#赋予权限</span></span><br></pre></td></tr></table></figure><ul><li>启用这个数据库文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;pam.d&#x2F;vsftpd</span><br></pre></td></tr></table></figure><p>注释掉所有内容后，增加下面的内容 // 把用户加到pam中进行登录验证</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auth    sufficient /lib64/security/pam_userdb.<span class="keyword">so</span> db=/etc/vsftpd/loginusers</span><br><span class="line">account sufficient /lib64/security/pam_userdb.<span class="keyword">so</span> db=/etc/vsftpd/loginusers</span><br></pre></td></tr></table></figure><ul><li>创建虚拟用户配置文件  //自定义</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;etc&#x2F;vsftpd&#x2F;userconf</span><br></pre></td></tr></table></figure><p>这里的文件名称必须与虚拟用户名一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;vsftpd&#x2F;userconf&#x2F;ftp1</span><br></pre></td></tr></table></figure><p>增加下面的内容 </p><blockquote><p>（注意！！！） 赋予虚拟用户相应权限，如果缺省了权限，这个虚拟用户就没有相应权限</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#浏览FTP目录和下载</span></span><br><span class="line">anon_world_readable_only=NO</span><br><span class="line"><span class="comment">#允许上传</span></span><br><span class="line">anon_upload_enable=YES</span><br><span class="line"><span class="comment">#允许建立和删除目录</span></span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line"><span class="comment">#允许改名和删除文件</span></span><br><span class="line">anon_other_write_enable=YES</span><br><span class="line"><span class="comment">#指定虚拟用户在系统用户下面的路径</span></span><br><span class="line">local_root=/home/vsftpd/ftp1/</span><br></pre></td></tr></table></figure><p>设定主目录为/home/vsftpd/ftp1     //这个是ftp登陆上来的主目录</p><blockquote><p>（注意！！！）这个目录默认是root所有，ftp登录为虚拟用户映射的普通用户，没有相应权限，必须修改这个根目录可以被其他用户所修改的权限， 777，这个数字相关解释可以自行百度，简单来说就是赋予所有人都可以读写以及执行这个目录的权限</p><p>chmod -R 777 /home/vsftpd/</p></blockquote><ul><li>最后修改主配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/vsftpd/vsftpd.conf</span><br></pre></td></tr></table></figure><p>更改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anonymous_enable=NO  <span class="comment">#禁止匿名用户登录</span></span><br></pre></td></tr></table></figure><p>去掉注释</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chroot_local_user=YES  <span class="comment">#禁止用户访问除主目录以外的目录</span></span><br><span class="line">ascii_upload_enable=YES <span class="comment">#设定支持ASCII模式的上传和下载功能</span></span><br><span class="line">ascii_download_enable=YES <span class="comment">#设定支持ASCII模式的上传和下载功能</span></span><br></pre></td></tr></table></figure><p>增加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">guest_enable=YES  <span class="comment">#启动虚拟用户</span></span><br><span class="line">guest_username=vsftpd  <span class="comment">#虚拟用户使用的系统用户名</span></span><br><span class="line">user_config_dir=/etc/vsftpd/userconf  <span class="comment">#虚拟用户使用的配置文件目录</span></span><br><span class="line">allow_writeable_chroot=YES  <span class="comment">#最新版的vsftpd为了安全必须用户主目录（也就是/home/vsftpd/ftp1）没有写权限，才能登录，或者使用</span></span><br><span class="line"><span class="comment">#allow_writeable_chroot=YES，也就是说默认是不能写的，你没有配置这个就不能写</span></span><br></pre></td></tr></table></figure><ul><li>最后重启服务使配置生效</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start vsftpd      //启动</span><br><span class="line">systemctl restart vsftpd    //重启</span><br><span class="line">systemctl status vsftpd     //查看状态</span><br></pre></td></tr></table></figure><h2 id="4连接"><a href="#4-连接" class="headerlink" title="4.连接"></a>4.连接</h2><p>推荐用fz，一个灰常好用的ftp客户端，简单易上手</p><p><a href="https://filezilla-project.org/download.php?type=client">https://filezilla-project.org/download.php?type=client</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;ftp服务器是非常实用的网上存储工具，你可以在你的ftp上为所欲为，还可以在上面多人管理文件,来看看怎么搭建你的第一台ftp吧！&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="http://zhouzhe111.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>小z有话说</title>
    <link href="http://zhouzhe111.github.io/2021/03/11/hello/"/>
    <id>http://zhouzhe111.github.io/2021/03/11/hello/</id>
    <published>2021-03-11T14:00:31.000Z</published>
    <updated>2021-03-12T04:30:30.447Z</updated>
    
    <content type="html"><![CDATA[<h2 id="我有话说"><a href="#我有话说" class="headerlink" title="我有话说"></a>我有话说</h2><p>​    这是我的第二个博客，之前的博客实在阿里云服务器上，算是草草搭建起来的吧，内容也是写的有点点随意，由于毕设要用到服务器，老是把服务器搞崩（脑瓜子疼），每次部署博客费老大劲了，所以决定重新撘个正经的博客，也方便以后写点优质的文章。</p><p>​    最近毕设有点忙，就索性先把这个博客的搭建过程详细分享出来，之前博客上的内容比如ftp，sprintgoot写的太随意不够严谨，先放一放，之后好好完善后再登出吧。</p><p><img src="/2021/03/11/hello/sasasas.jpg"></p><hr><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;我有话说&quot;&gt;&lt;a href=&quot;#我有话说&quot; class=&quot;headerlink&quot; title=&quot;我有话说&quot;&gt;&lt;/a&gt;我有话说&lt;/h2&gt;&lt;p&gt;​    这是我的第二个博客，之前的博客实在阿里云服务器上，算是草草搭建起来的吧，内容也是写的有点点随意，由于毕设要用到服务</summary>
      
    
    
    
    <category term="welcome" scheme="http://zhouzhe111.github.io/categories/welcome/"/>
    
    
  </entry>
  
  <entry>
    <title>使用hexo搭建个人博客</title>
    <link href="http://zhouzhe111.github.io/2021/03/10/blog/"/>
    <id>http://zhouzhe111.github.io/2021/03/10/blog/</id>
    <published>2021-03-10T15:53:26.000Z</published>
    <updated>2021-03-11T15:09:35.149Z</updated>
    
    <content type="html"><![CDATA[<p>强烈推荐！！！使用hexo，基于gitgub搭建你想要的博客。Hexo 是一个快速、简洁且高效的博客框架。</p><span id="more"></span><hr><!-- toc --><ul><li><a href="#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="#1-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">1. 准备工作</a></li><li><a href="#2%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2">2.搭建github博客</a><ul><li><a href="#21-%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93">2.1. 创建仓库</a></li><li><a href="#22-%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E5%8F%AF%E9%80%89">2.2. 绑定域名（可选）</a></li><li><a href="#23-%E6%B5%8B%E8%AF%95%E6%98%AF%E5%90%A6%E6%88%90%E5%8A%9F">2.3. 测试是否成功</a></li></ul></li><li><a href="#3%E4%BD%BF%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2git-bash%E4%B8%AD%E5%86%99">3.使用hexo写博客（git bash中写）</a><ul><li><a href="#31-hexo%E7%AE%80%E4%BB%8B">3.1. hexo简介</a></li><li><a href="#32-%E5%8E%9F%E7%90%86">3.2. 原理</a></li><li><a href="#33-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9">3.3. 注意事项</a></li><li><a href="#34-%E5%AE%89%E8%A3%85">3.4. 安装</a></li><li><a href="#35-%E5%88%9D%E5%A7%8B%E5%8C%96">3.5. 初始化</a></li><li><a href="#36-%E4%BF%AE%E6%94%B9%E4%B8%BB%E9%A2%98%E8%BF%99%E9%83%A8%E5%88%86%E8%BE%83%E9%95%BF%E5%8F%AF%E5%85%88%E8%B7%B3%E8%BF%87%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%BF%9B%E9%98%B6%E5%9C%A8-%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%864%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%BF%9B%E9%98%B6next">3.6. 修改主题(这部分较长，可先跳过，主题配置进阶在 <a href="#4.%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%BF%9B%E9%98%B6%EF%BC%88next%EF%BC%89">第四部分</a> )</a></li><li><a href="#38-%E4%B8%8A%E4%BC%A0%E5%88%B0github">3.8. 上传到github</a></li><li><a href="#39-%E5%B8%B8%E7%94%A8hexo%E5%91%BD%E4%BB%A4">3.9. 常用hexo命令</a></li><li><a href="#310-_configyml">3.10. _config.yml</a></li><li><a href="#311-%E5%86%99%E5%8D%9A%E5%AE%A2">3.11. 写博客</a><ul><li><a href="#3111-%E5%86%99%E5%8D%9A%E5%AE%A2%E5%B7%A5%E5%85%B7">3.11.1. 写博客工具</a></li><li><a href="#3112-%E5%A6%82%E4%BD%95%E8%AE%A9%E5%8D%9A%E6%96%87%E5%88%97%E8%A1%A8%E4%B8%8D%E6%98%BE%E7%A4%BA%E5%85%A8%E9%83%A8%E5%86%85%E5%AE%B9">3.11.2. 如何让博文列表不显示全部内容</a></li><li><a href="#3113%E9%87%8D%E8%A6%81">3.11.3.重要！！！</a></li></ul></li></ul></li><li><a href="#4%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%BF%9B%E9%98%B6next">4.主题配置进阶（next）</a><ul><li><a href="#41%E8%AE%BE%E7%BD%AEtags-categories%E7%AD%89%E8%8F%9C%E5%8D%95%E6%A0%8F">4.1.设置tags、categories等菜单栏</a><ul><li><a href="#2-%E7%BC%96%E8%BE%91tags%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84indexmd"><strong>2、编辑tags文件夹下的index.md</strong></a></li></ul></li><li><a href="#42%E6%B7%BB%E5%8A%A0toc%E6%94%AF%E6%8C%81%E7%94%9F%E6%88%90%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95">4.2.添加Toc支持，生成文章目录</a></li><li><a href="#43%E8%AE%BE%E7%BD%AE-rss%E6%A0%B7%E5%BC%8F%E9%A3%8E%E6%A0%BC">4.3.设置 RSS(样式风格)</a></li><li><a href="#44%E8%AE%BE%E7%BD%AE%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87">4.4.设置阅读全文</a></li><li><a href="#45%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD">4.5.添加评论功能</a><ul><li><a href="#1%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9valine">1.为什么选择Valine</a></li><li><a href="#2%E7%AC%AC%E4%B8%80%E6%AD%A5%E6%B3%A8%E5%86%8Cleanclound%E8%8E%B7%E5%8F%96app-id-%E5%92%8C-app-key">2.第一步，注册LeanClound,获取APP ID 和 APP Key</a></li><li><a href="#3%E5%9C%A8hexo-next%E4%B8%BB%E9%A2%98%E4%B8%AD%E9%85%8D%E7%BD%AE">3.在Hexo Next主题中配置</a></li></ul></li><li><a href="#46%E8%AE%BE%E7%BD%AE%E5%A4%B4%E5%83%8F">4.6.设置头像</a></li><li><a href="#47%E8%AE%BE%E7%BD%AE%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6">4.7.设置文章置顶</a></li><li><a href="#48%E5%90%AF%E7%94%A8%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD">4.8.启用代码块复制功能</a></li><li><a href="#49%E6%B7%BB%E5%8A%A0-live2d-%E7%9C%8B%E6%9D%BF%E5%A8%98-%E8%90%8C%E5%AE%A0">4.9.添加 Live2D 看板娘 萌宠</a></li><li><a href="#410%E6%B7%BB%E5%8A%A0%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E6%95%88%E6%9E%9C">4.10.添加鼠标点击效果</a></li><li><a href="#411%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%E6%94%BE%E5%A4%A7%E9%A2%84%E8%A7%88%E5%8A%9F%E8%83%BD">4.11.添加图片放大预览功能</a></li><li><a href="#412%E6%B7%BB%E5%8A%A0%E9%9B%AA%E8%8A%B1%E9%A3%98%E8%90%BD%E8%83%8C%E6%99%AF%E6%95%88%E6%9E%9C">4.12.添加雪花飘落背景效果</a></li></ul><ul><li><a href="#5%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91">5.踩过的坑</a><ul><li><a href="#51%E6%B7%BB%E5%8A%A0%E4%BE%A7%E8%BE%B9%E6%A0%8F%E7%9B%AE%E5%BD%95%E5%90%8E%E7%82%B9%E5%87%BB%E6%B2%A1%E6%9C%89%E5%8F%8D%E5%BA%94">5.1.添加侧边栏目录后，点击没有反应</a></li></ul></li></ul></li></ul><!-- tocstop --><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用github 搭建博客的好处有：</p><ol><li>全是静态文件，访问速度快；</li><li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</li><li>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</li><li>数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</li><li>博客内容可以轻松打包、转移、发布到其它平台；</li><li>可以直接托管github，而不是必须要有你的云服务器和域名</li></ol><h1 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h1><p>在开始一切之前，你必须已经：</p><ul><li>有一个github账号，没有的话去注册一个；</li><li>安装了node.js、npm，并了解相关基础知识；</li><li>安装了git for windows（或者其它git客户端）</li></ul><h1 id="2搭建github博客"><a href="#2-搭建github博客" class="headerlink" title="2.搭建github博客"></a>2.搭建github博客</h1><h2 id="21-创建仓库"><a href="#2-1-创建仓库" class="headerlink" title="2.1. 创建仓库"></a>2.1. 创建仓库</h2><p>新建一个名为<code>你的用户名.github.io</code>的仓库，比如说，如果你的github用户名是test，那么你就新建<code>test.github.io</code>的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://test.github.io/">http://test.github.io</a> 了，是不是很方便？</p><p>由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。</p><p>几个注意的地方：</p><ol><li>注册的邮箱一定要验证，否则不会成功；</li><li>仓库名字必须是：<code>username.github.io</code>，其中<code>username</code>是你的用户名（账户名）； </li><li>仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟；</li></ol><p>创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。</p><p><img src="/2021/03/10/blog/image-20210311145848286.png"></p><h2 id="22-绑定域名可选"><a href="#2-2-绑定域名（可选）" class="headerlink" title="2.2. 绑定域名（可选）"></a>2.2. 绑定域名（可选）</h2><p>我是直接使用github的名字的，并没有使用自己的域名。</p><p>当然你也可以去弄一个，自行百度吧，很简单。</p><p>在你绑定了新域名之后，原来的<code>你的用户名.github.io</code>并没有失效，而是会自动跳转到你的新域名。</p><p>配置SSH key</p><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。</p><p>用git bash执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh  <span class="comment">#检查本机已存在的ssh密钥</span></span><br></pre></td></tr></table></figure><p>如果提示：No such file or directory 说明你是第一次使用git。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br><span class="line">例：ssh-keygen -t rsa -C &quot;2290280646@qq.com&quot;</span><br></pre></td></tr></table></figure><p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到<code>.ssh\id_rsa.pub</code>文件，</p><p>可能有小伙伴不知道在哪里去找这个文件，这有何难，其实就是在你的c盘用户目录下.ssh文件夹里面</p><p><img src="/2021/03/10/blog/image-20210311150629390.png"></p><p>记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p><p>如果之前你已经填了ssh key（idea这些里面填的），建议删掉这个key，新建一个key，名字随便取，比如test，并且本地重新绑定你的github</p><p><img src="/2021/03/10/blog/20160818_143914_495_9084.png"></p><h2 id="23-测试是否成功"><a href="#2-3-测试是否成功" class="headerlink" title="2.3. 测试是否成功"></a>2.3. 测试是否成功</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com    # 注意邮箱地址不用改，直接复制粘贴就好了</span><br></pre></td></tr></table></figure><p>如果提示<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到：</p><blockquote><p>Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote><p>看到这个信息说明SSH已配置成功！</p><p>此时你还需要配置：这个是你的github账户，用来连接时会使用到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;zhouzhe111&quot;&#x2F;&#x2F; 你的github用户名，非昵称</span><br><span class="line">$ git config --global user.email  &quot;2290280646@qq.com&quot;&#x2F;&#x2F; 填写你的github注册邮箱</span><br></pre></td></tr></table></figure><p>本地就和github连接上了</p><h1 id="3使用hexo写博客git-bash中写"><a href="#3-使用hexo写博客（git-bash中写）" class="headerlink" title="3.使用hexo写博客（git bash中写）"></a>3.使用hexo写博客（git bash中写）</h1><h2 id="31-hexo简介"><a href="#3-1-hexo简介" class="headerlink" title="3.1. hexo简介"></a>3.1. hexo简介</h2><p>Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。</p><p>官网： <a href="http://hexo.io/">http://hexo.io</a><br>github: <a href="https://github.com/hexojs/hexo">https://github.com/hexojs/hexo</a></p><h2 id="32-原理"><a href="#3-2-原理" class="headerlink" title="3.2. 原理"></a>3.2. 原理</h2><p>由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p><h2 id="33-注意事项"><a href="#3-3-注意事项" class="headerlink" title="3.3. 注意事项"></a>3.3. 注意事项</h2><p>安装之前先来说几个注意事项：</p><ol><li>很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用<code>git bash</code>来执行；</li><li>hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导；</li><li>hexo有2种<code>_config.yml</code>文件，一个是根目录下的全局的<code>_config.yml</code>，一个是各个<code>theme</code>下的；</li></ol><h2 id="34-安装"><a href="#3-4-安装" class="headerlink" title="3.4. 安装"></a>3.4. 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><h2 id="35-初始化"><a href="#3-5-初始化" class="headerlink" title="3.5. 初始化"></a>3.5. 初始化</h2><p>在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是<code>F:\Workspaces\hexo</code>，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /d/hexo/</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图：</p><p><img src="/2021/03/10/blog/20160818_115922_773_1148.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g <span class="comment"># 生成</span></span><br><span class="line">$ hexo s <span class="comment"># 启动服务</span></span><br></pre></td></tr></table></figure><p>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的：</p><p><img src="/2021/03/10/blog/20160818_120700_028_2426.png"></p><p><code>hexo s</code>是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了</p><p>第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑，打开时就是这个样子：</p><p><img src="/2021/03/10/blog/image-20210311143728099.png"></p><h2 id="36-修改主题这部分较长可先跳过主题配置进阶在-第四部分"><a href="#3-6-修改主题-这部分较长，可先跳过，主题配置进阶在-第四部分" class="headerlink" title="3.6. 修改主题(这部分较长，可先跳过，主题配置进阶在 第四部分 )"></a>3.6. 修改主题(这部分较长，可先跳过，主题配置进阶在 <a href="#4.%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E8%BF%9B%E9%98%B6%EF%BC%88next%EF%BC%89">第四部分</a> )</h2><p>强烈推荐 next  官网<a href="http://theme-next.iissnan.com/">http://theme-next.iissnan.com/</a></p><p>下面下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next.git themes&#x2F;next</span><br></pre></td></tr></table></figure><p>启用主题</p><p>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 <strong>站点配置文件</strong>， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>。</p><p>启用 NexT 主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>然后重新执行<code>hexo g</code>来重新生成。</p><p>如果出现一些莫名其妙的问题，可以先执行<code>hexo clean</code>来清理一下public的内容，然后再来重新生成和发布。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  #清理缓存</span><br><span class="line">hexo g   #生成</span><br><span class="line">hexo s   #本地预览（4000端口）</span><br><span class="line">hexo d   #发布到github</span><br></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title></a></h2><p>在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。</p><h2 id="38-上传到github"><a href="#3-8-上传到github" class="headerlink" title="3.8. 上传到github"></a>3.8. 上传到github</h2><p>如果你一切都配置好了，发布上传很容易，一句<code>hexo d</code>就搞定，当然关键还是你要把所有东西配置好。</p><p>首先，<code>ssh key</code>肯定要配置好。</p><p>其次，配置<code>_config.yml</code>中有关deploy的部分：</p><p>正确写法：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:zhouzhe111/zhouzhe111.github.io.git</span>  <span class="comment">#中间是冒号！</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span>  <span class="comment">#这个表示在你的github的那个分支下，配置文件默认是master，但是很可能你的github是main，要改成一样的</span></span><br></pre></td></tr></table></figure><p>错误写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: github</span><br><span class="line">  repository: https:&#x2F;&#x2F;github.com&#x2F;liuxianan&#x2F;liuxianan.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>后面一种写法是hexo2.x的写法，现在已经不行了，无论是哪种写法，此时直接执行<code>hexo d</code>的话一般会报如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Deployer not found: github 或者 Deployer not found: git</span><br></pre></td></tr></table></figure><p>原因是还需要安装一个插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>其它命令不确定，部署这个命令一定要用git bash，否则会提示<code>Permission denied (publickey).</code></p><p>打开你的git bash，输入<code>hexo d</code>就会将本次有改动的代码全部提交，没有改动的不会：</p><p><img src="/2021/03/10/blog/20160818_140441_769_5024.png"></p><h2 id="39-常用hexo命令"><a href="#3-9-常用hexo命令" class="headerlink" title="3.9. 常用hexo命令"></a>3.9. 常用hexo命令</h2><p>常见命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章 默认位置在source&#x2F;_post</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面 即菜单栏</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br><span class="line">hexo clean  #清理缓存</span><br></pre></td></tr></table></figure><p>缩写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n &#x3D;&#x3D; hexo new</span><br><span class="line">hexo g &#x3D;&#x3D; hexo generate</span><br><span class="line">hexo s &#x3D;&#x3D; hexo server</span><br><span class="line">hexo d &#x3D;&#x3D; hexo deploy</span><br></pre></td></tr></table></figure><p>组合命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure><p>更新文章时一般的命令流程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  #清理缓存 如果不清理就上传，很可能不是最新的文件（缓存中的可能是以前的版本</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure><h2 id="310-_configyml"><a href="#3-10-config-yml" class="headerlink" title="3.10. _config.yml"></a>3.10. _config.yml</h2><p>这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。</p><p>需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。</p><h2 id="311-写博客"><a href="#3-11-写博客" class="headerlink" title="3.11. 写博客"></a>3.11. 写博客</h2><p>定位到我们的hexo根目录，执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &#39;my-first-blog&#39;</span><br></pre></td></tr></table></figure><p>hexo会帮我们在<code>_posts</code>下生成相关md文件：</p><p><img src="/2021/03/10/blog/20160823_183047_352_1475.png"></p><p>我们只需要打开这个文件就可以开始写博客了，默认生成如下内容：</p><p><img src="/2021/03/10/blog/20160823_183325_470_9306.png"></p><p>当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。</p><p>一般完整格式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: postName #文章页面上的显示名称，一般是中文</span><br><span class="line">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</span><br><span class="line">categories: 默认分类 #分类</span><br><span class="line">tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格</span><br><span class="line">description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">以下是正文</span><br></pre></td></tr></table></figure><h3 id="3111-写博客工具"><a href="#3-11-1-写博客工具" class="headerlink" title="3.11.1. 写博客工具"></a>3.11.1. 写博客工具</h3><p>我个人用的是typera <a href="https://www.typora.io/">https://www.typora.io/</a> 挺好用的</p><h3 id="3112-如何让博文列表不显示全部内容"><a href="#3-11-2-如何让博文列表不显示全部内容" class="headerlink" title="3.11.2. 如何让博文列表不显示全部内容"></a>3.11.2. 如何让博文列表不显示全部内容</h3><p>默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？</p><p>答案是在合适的位置加上<code>&lt;!--more--&gt;</code>即可，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 前言</span></span><br><span class="line"></span><br><span class="line">使用github pages服务搭建博客的好处有：</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全是静态文件，访问速度快；</span><br><span class="line"><span class="bullet">2.</span> 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</span><br><span class="line"><span class="bullet">3.</span> 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">4.</span> 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</span><br><span class="line"><span class="bullet">5.</span> 博客内容可以轻松打包、转移、发布到其它平台；</span><br><span class="line"><span class="bullet">6.</span> 等等；</span><br></pre></td></tr></table></figure><p>最终效果：</p><p><img src="/2021/03/10/blog/image-20210311153303575.png"></p><p>部分内容摘自 ：参考链接：<a href="http://blog.haoji.me/build-blog-website-by-hexo-github.html">使用hexo+github搭建免费个人博客详细教程</a> ，并加入了自己的一些配置</p><h3 id="3113重要"><a href="#3-11-3-重要！！！" class="headerlink" title="3.11.3.重要！！！"></a>3.11.3.重要！！！</h3><p>引入图片的路径，这是个很大的坑，本地能正常预览，可是github那里可不认账，需要好好整理一下：</p><p>首先，找到<code>_config.yml</code>配置文件<code>post_asset_folder</code>项为<code>true</code>。</p><p>这样，在使用<code>hexo new “这是一个新的博客”</code>时，会在source的 .md的位置创建同名文件夹这样你就可以把图片放在这下面了</p><p>比如你现在的文章名时是mmmm，name，图片放在mmmm文件夹中，在mmmm.md文件中你就可以这样引用图片了</p><p><code>![xxxx](mmmm/xxxx.png)</code></p><h1 id="4主题配置进阶next"><a href="#4-主题配置进阶（next）" class="headerlink" title="4.主题配置进阶（next）"></a>4.主题配置进阶（next）</h1><h3 id="41设置tags-categories等菜单栏"><a href="#4-1-设置tags、categories等菜单栏" class="headerlink" title="4.1.设置tags、categories等菜单栏"></a>4.1.设置tags、categories等菜单栏</h3><p>首先，讲讲这两个命令的区别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new  helloworld  <span class="comment">#新建一篇文章，也就是source\_posts下的一篇篇文章</span></span><br><span class="line">hexo new page tags  <span class="comment">#新建一个菜单栏，相当于顶部导航</span></span><br></pre></td></tr></table></figure><p><img src="/2021/03/10/blog/image-20210311153803902.png"></p><p>tags 创建步骤</p><ul><li><strong>1、新建一个页面，命名为tags。命令如下：</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page tags</span><br></pre></td></tr></table></figure><blockquote><p>在/source下会新生成一个新的文件夹tags<br> ，在该文件夹下会有一个index.md文件</p></blockquote><ul><li><h4 id="2-编辑tags文件夹下的indexmd"><a href="#2、编辑tags文件夹下的index-md" class="headerlink" title="2、编辑tags文件夹下的index.md"></a><strong>2、编辑tags文件夹下的index.md</strong></h4></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2017-07-10 16:36:26</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;tags&quot;</span>  <span class="comment">#表示这是个tags菜单栏</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><ul><li><p><strong>3、在菜单中添加链接。编辑主题的 <code>themes/next/_config.yml</code> ，添加tags到menu中，如下:</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span>  <span class="comment">#新增</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br></pre></td></tr></table></figure></li><li><p><strong>4、怎么给你的文章设置标签呢</strong></p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tags:</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">tags:</span> [<span class="string">运动</span>, <span class="string">球类运动</span>]</span><br></pre></td></tr></table></figure><p>你可以按照这个流程新建 <code>about</code>、<code>categories</code>、<code>archives</code>等等</p><h3 id="42添加toc支持生成文章目录"><a href="#4-2-添加Toc支持，生成文章目录" class="headerlink" title="4.2.添加Toc支持，生成文章目录"></a>4.2.添加Toc支持，生成文章目录</h3><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-toc --save</span><br></pre></td></tr></table></figure><p>配置</p><p>在博客根目录下的 <code>_config.yml</code> 中如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">maxDepth:</span> <span class="number">3</span>  <span class="comment">#表示目录深度为3，即最多生成三级目录。</span></span><br></pre></td></tr></table></figure><p>然后就可以使用啦，在你想用的地方，添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;!--</span> <span class="string">toc</span> <span class="string">--&gt;</span></span><br></pre></td></tr></table></figure><p>就行了</p><h3 id="43设置-rss样式风格"><a href="#4-3-设置-RSS-样式风格" class="headerlink" title="4.3.设置 RSS(样式风格)"></a>4.3.设置 RSS(样式风格)</h3><p>NexT 中 RSS 有三个设置选项，满足特定的使用场景：</p><p>首先在站点根目录下执行下列命令安装插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>更改 主题配置文件，设定 rss 字段的值如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: url  <span class="comment">#url就是的的连接</span></span><br></pre></td></tr></table></figure><p>重新生成、启动服务器显示如下：</p><p><img src="/2021/03/10/blog/image-20210311155816806.png"></p><h3 id="44设置阅读全文"><a href="#4-4-设置阅读全文" class="headerlink" title="4.4.设置阅读全文"></a>4.4.设置阅读全文</h3><p>在首页显示一篇文章的部分内容，并提供一个链接跳转到全文页面是一个常见的需求。NexT 提供三种方式来控制文章在首页的显示方式。也就是说，在首页显示文章的摘录并显示 阅读全文 按钮，可以通过以下方法实现：</p><p>使用 <code>&lt;!-- more --&gt;</code><br>在文章中嵌入 <code>&lt;!-- more --&gt;</code>标记，Hexo 会将其之上的内容作为首页预览内容，这是 Hexo 提供的方式</p><p>这个基本功一定要会，所以这儿我又重复写了一遍</p><h3 id="45添加评论功能"><a href="#4-5-添加评论功能" class="headerlink" title="4.5.添加评论功能"></a>4.5.添加评论功能</h3><p>推荐： Valine</p><h4 id="1为什么选择valine"><a href="#1-为什么选择Valine" class="headerlink" title="1.为什么选择Valine"></a>1.为什么选择Valine</h4><p>在笔者进行评论系统选择时，我觉得我的需求就是方便，简洁，最重要一点是要支持Markdown ，对比之下，最终选定了这款Valine，当然，如果你不喜欢这样简洁的，可以参考 Hexo（NexT 主题）评论系统哪个好？</p><h4 id="2第一步注册leanclound获取app-id-和-app-key"><a href="#2-第一步，注册LeanClound-获取APP-ID-和-APP-Key" class="headerlink" title="2.第一步，注册LeanClound,获取APP ID 和 APP Key"></a>2.第一步，注册LeanClound,获取APP ID 和 APP Key</h4><p>链接： <a href="https://valine.js.org/quickstart.html">https://valine.js.org/quickstart.html</a></p><p>Valine 是基于 LeanCloud 作为数据存储的，所以需要注册一个账号，注册完成后，我们找到创建应用</p><p>在这里填写你的应用名称,名称可以自己定义，然后下面选择开发版 点击创建。</p><p>然后点击应用进入设置。</p><p>然后点击设置 &gt; 安全中心 ,将除了数据存储的服务全部关闭。</p><p><img src="/2021/03/10/blog/fhsidhfsdi.png"></p><p>最后点击应用 Key 取得我们 AppKey 和 App id</p><h4 id="3在hexo-next主题中配置"><a href="#3-在Hexo-Next主题中配置" class="headerlink" title="3.在Hexo Next主题中配置"></a>3.在Hexo Next主题中配置</h4><p>首先打开 <a href="https://www.jsdelivr.com/package/npm/valine">https://www.jsdelivr.com/package/npm/valine</a> 获取最新的 valine.min.js 的cdn地址：</p><p><img src="/2021/03/10/blog/adfdaad.png"></p><p>然后我们修改主题配置文件，配置CDN：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span> <span class="string">https://cdn.jsdelivr.net/npm/valine@1.3.9/dist/Valine.min.js</span> </span><br></pre></td></tr></table></figure><p>再打开配置Valine功能：(记得修改key)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Valine</span></span><br><span class="line"><span class="comment"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class="line"><span class="comment"># More info available at https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line"> <span class="comment"># 功能开关</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version</span></span><br><span class="line">  <span class="attr">appid:</span>  <span class="comment"># Your leancloud application appid #LeanClound获得的appid</span></span><br><span class="line">  <span class="attr">appkey:</span>  <span class="comment"># Your leancloud application appkey #LeanClound获得的appkey</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># Mail notifier. See: https://github.com/xCss/Valine/wiki # 邮件提醒</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code </span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">欢迎畅所欲言</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># Gravatar style #默认头像设置</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># Custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-cn</span> <span class="comment"># Language, available values: en, zh-cn # 语言，设为zh-cn</span></span><br><span class="line">  <span class="comment"># 是否开启当前文章阅读量统计</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span> <span class="comment"># leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors&#x27; for counter compatibility. Article reading statistic https://valine.js.org/visitor.html</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>每篇文章默认都会开启评论功能，包括about，tags这些</p><p>所以，在不需要评论的地方你可以关闭</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">about</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2021-03-10 20:24:43</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;about&quot;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>当然， 会帮你储存、管理这些评论</p><p><img src="/2021/03/10/blog/image-20210311161651870.png"></p><p>你可以到这里，为所欲为啦（删除某个评论等等）</p><h3 id="46设置头像"><a href="#4-6-设置头像" class="headerlink" title="4.6.设置头像"></a>4.6.设置头像</h3><p>主题配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/uploads/my.jpg</span> <span class="comment">#/images/avatar.gif</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span>  <span class="comment">#是否显示呈圆形，默认是方的</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span>  <span class="comment">#鼠标放在图片上时 是否可以旋转</span></span><br></pre></td></tr></table></figure><p>把你的图片放在/source/uploads下面（如果没有就新建文件夹</p><h3 id="47设置文章置顶"><a href="#4-7-设置文章置顶" class="headerlink" title="4.7.设置文章置顶"></a>4.7.设置文章置顶</h3><p>Hexo 默认主页文章按日期降序。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: 博客主页根路径. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: 每页显示文章数量. (0 = 禁用分页)</span></span><br><span class="line"><span class="comment"># order_by: 文章排序. (默认按日期降序)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br></pre></td></tr></table></figure><p>安装 <a href="https://github.com/netcan/hexo-generator-index-pin-top">hexo-generator-index-pin-top</a></p><p>首先是卸载默认排序插件，安装新插件，新插件支持文章置顶：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><p>置顶文章</p><p>在需要置顶的文章的 <code>front-matter</code> 中设置 <code>top: 1</code> 即可实现文章置顶功能，并且数字越大文章越靠前，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">top: 1</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>添加置顶图标<br>上面置顶文章会文章排在前面，但是不会有任何有关 “置顶” 的标识。我们可以修改 NexT 主题的/themes/next/layout/_macro/post.swig 文件，在 <div class="post-meta"> 下加入 “置顶” 标识，如图标和文字描述：</div></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">%</span> <span class="string">if</span> <span class="string">post.top</span> <span class="string">%</span>&#125;</span><br><span class="line">  <span class="string">&lt;i</span> <span class="string">class=&quot;fa</span> <span class="string">fa-thumb-tack&quot;&gt;&lt;/i&gt;</span></span><br><span class="line">  <span class="string">&lt;font</span> <span class="string">color=7D26CD&gt;&#123;&#123;</span> <span class="string">__(&#x27;post.sticky&#x27;)</span> <span class="string">&#125;&#125;&lt;/font&gt;</span></span><br><span class="line">  <span class="string">&lt;span</span> <span class="string">class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span></span><br><span class="line">&#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="48启用代码块复制功能"><a href="#4-8-启用代码块复制功能" class="headerlink" title="4.8.启用代码块复制功能"></a>4.8.启用代码块复制功能</h3><p>编辑 <code>主题配置文件</code>，启用 <code>codeblock</code> 模块，如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Manual define the border radius in codeblock, leave it blank for the default value: 1</span></span><br><span class="line">  <span class="attr">border_radius:</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Style: only &#x27;flat&#x27; is currently available, leave it blank if you prefer default theme</span></span><br><span class="line">    <span class="attr">style:</span></span><br></pre></td></tr></table></figure><p><img src="/2021/03/10/blog/image-20210311162819748.png"></p><h3 id="49添加-live2d-看板娘-萌宠"><a href="#4-9-添加-Live2D-看板娘-萌宠" class="headerlink" title="4.9.添加 Live2D 看板娘 萌宠"></a>4.9.添加 Live2D 看板娘 萌宠</h3><p>插件 <code>hexo-helper-live2d</code> 的使用说明详见 <a href="https://github.com/EYHN/hexo-helper-live2d">https://github.com/EYHN/hexo-helper-live2d</a></p><p>Step 1</p><p>进入到工程目录下，安装 Hexo 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-helper-live2d --save</span><br></pre></td></tr></table></figure><p>Step 2<br>在 插件作者的博客 中挑选一个模型，记录该模型的名字。模型资源名称为 live2d-widget-model-模型名称，例如选择模型 shizuku ，则其对应的 Live2D 资源名称为 live2d-widget-model-shizuku，然后直接在站点根目录下安装该模型，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install live2d-widget-model-shizuku --save</span><br></pre></td></tr></table></figure><p>Step 3</p><p>编辑 <code>站点配置文件</code>，添加如下内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo plugin: hexo-helper-live2d</span></span><br><span class="line"><span class="comment">## https://github.com/EYHN/hexo-helper-live2d</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span> <span class="comment"># Root path of plugin to be on the site (Relative)</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span> <span class="comment"># JavaScript path related to plugin&#x27;s root (Relative)</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span> <span class="comment"># Relative model path related to plugin&#x27;s root (Relative)</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span> <span class="comment"># Default</span></span><br><span class="line">  <span class="comment">#scriptFrom: jsdelivr # jsdelivr CDN</span></span><br><span class="line">  <span class="comment">#scriptFrom: unpkg # unpkg CDN</span></span><br><span class="line">  <span class="comment">#scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # Your custom url</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span> <span class="comment"># Whether only to replace live2d tag instead of inject to all pages</span></span><br><span class="line">  <span class="attr">log:</span> <span class="literal">false</span> <span class="comment"># Whether to show logs in console</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-shizuku</span> <span class="comment"># npm-module package name</span></span><br><span class="line">    <span class="comment">#use: wanko # folder name in (hexo base dir)/live2d_models/</span></span><br><span class="line">    <span class="comment">#use: ./wives/wanko # folder path relative to hexo base dir</span></span><br><span class="line">    <span class="comment">#use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # Your custom url</span></span><br><span class="line">    <span class="attr">scale:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">hHeadPos:</span> <span class="number">0.5</span></span><br><span class="line">    <span class="attr">vHeadPos:</span> <span class="number">0.618</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">superSample:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">hOffset:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">vOffset:</span> <span class="number">-10</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">scale:</span> <span class="number">0.05</span></span><br><span class="line">  <span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacityDefault:</span> <span class="number">0.7</span></span><br><span class="line">    <span class="attr">opacityOnHover:</span> <span class="number">0.2</span></span><br></pre></td></tr></table></figure><p><img src="/2021/03/10/blog/image-20210311163110377.png"></p><p>默认在页面右下角，上面的参数也可以自己调整</p><p>个人还喜欢的动图</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">可选：Epsilon2.1</span> <span class="string">nipsilon</span> <span class="string">z16</span> <span class="string">hibiki</span></span><br><span class="line"><span class="string">使用</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">live2d-widget-model-shizuku</span> <span class="string">--save</span> <span class="string">安装</span></span><br></pre></td></tr></table></figure><h3 id="410添加鼠标点击效果"><a href="#4-10-添加鼠标点击效果" class="headerlink" title="4.10.添加鼠标点击效果"></a>4.10.添加鼠标点击效果</h3><p>这个其实还比较简单，只需要在主题目录下<code>next/source/js/src</code>下面新建一个<code>clicklove.js</code>文件，当然名字可以自己任取，然后在其中加入以下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*网页鼠标点击特效（爱心）*/</span></span><br><span class="line">!<span class="function"><span class="keyword">function</span> (<span class="params">e, t, a</span>) </span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>) </span>&#123;<span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; s.length; e++) s[e].alpha &lt;= <span class="number">0</span> ? (t.body.removeChild(s[e].el), s.splice(e, <span class="number">1</span>)) : (s[e].y--, s[e].scale += <span class="number">.004</span>, s[e].alpha -= <span class="number">.013</span>, s[e].el.style.cssText = <span class="string">&quot;left:&quot;</span> + s[e].x + <span class="string">&quot;px;top:&quot;</span> + s[e].y + <span class="string">&quot;px;opacity:&quot;</span> + s[e].alpha + <span class="string">&quot;;transform:scale(&quot;</span> + s[e].scale + <span class="string">&quot;,&quot;</span> + s[e].scale + <span class="string">&quot;) rotate(45deg);background:&quot;</span> + s[e].color + <span class="string">&quot;;z-index:99999&quot;</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>) </span>&#123;<span class="keyword">var</span> t = <span class="string">&quot;function&quot;</span> == <span class="keyword">typeof</span> e.onclick &amp;&amp; e.onclick;e.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;t &amp;&amp; t(), o(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">e</span>) </span>&#123;<span class="keyword">var</span> a = t.createElement(<span class="string">&quot;div&quot;</span>);a.className = <span class="string">&quot;heart&quot;</span>, s.push(&#123;<span class="attr">el</span>: a,<span class="attr">x</span>: e.clientX - <span class="number">5</span>,<span class="attr">y</span>: e.clientY - <span class="number">5</span>,<span class="attr">scale</span>: <span class="number">1</span>,<span class="attr">alpha</span>: <span class="number">1</span>,<span class="attr">color</span>: c()&#125;), t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>) </span>&#123;<span class="keyword">var</span> a = t.createElement(<span class="string">&quot;style&quot;</span>);a.type = <span class="string">&quot;text/css&quot;</span>;<span class="keyword">try</span> &#123;a.appendChild(t.createTextNode(e))&#125; <span class="keyword">catch</span> (t) &#123;a.styleSheet.cssText = e&#125;t.getElementsByTagName(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="string">&quot;rgb(&quot;</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">&quot;,&quot;</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">&quot;,&quot;</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">&quot;)&quot;</span>&#125;<span class="keyword">var</span> s = [];e.requestAnimationFrame = e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;<span class="built_in">setTimeout</span>(e, <span class="number">1e3</span> / <span class="number">60</span>)&#125;, i(<span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>), n(), r()&#125;(<span class="built_in">window</span>, <span class="built_in">document</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面这个是鼠标点击出现小心心的文件，也可以加上鼠标点击出现社会主义核心价值观的js文件，如果只想要一个就只加一个文件即可，在刚才的目录下继续创建<code>clicksocialvalue.js</code>文件，然后在文件中加入以下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> coreSocialistValues = [<span class="string">&quot;富强&quot;</span>, <span class="string">&quot;民主&quot;</span>, <span class="string">&quot;文明&quot;</span>, <span class="string">&quot;和谐&quot;</span>, <span class="string">&quot;自由&quot;</span>, <span class="string">&quot;平等&quot;</span>, <span class="string">&quot;公正&quot;</span>, <span class="string">&quot;法治&quot;</span>, <span class="string">&quot;爱国&quot;</span>, <span class="string">&quot;敬业&quot;</span>, <span class="string">&quot;诚信&quot;</span>, <span class="string">&quot;友善&quot;</span>],</span><br><span class="line">    index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * coreSocialistValues.length);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">document</span>.body.addEventListener(<span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//过滤a标签</span></span><br><span class="line">        <span class="keyword">if</span> (e.target.tagName == <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> x = e.pageX,</span><br><span class="line">        y = e.pageY,</span><br><span class="line">        span = <span class="built_in">document</span>.createElement(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">        span.textContent = coreSocialistValues[index];</span><br><span class="line">        index = (index + <span class="number">1</span>) % coreSocialistValues.length;</span><br><span class="line">        span.style.cssText = [<span class="string">&#x27;z-index: 9999999; position: absolute; font-weight: bold; color: #ff6651; top: &#x27;</span>, y - <span class="number">20</span>, <span class="string">&#x27;px; left: &#x27;</span>, x, <span class="string">&#x27;px;&#x27;</span>].join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(span);</span><br><span class="line">        animate(span);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>当然如果两个都需要的话，可以直接将两个文件的代码合并到一个文件即可。</p><p>然后在主题目录下<code>next/layout/_layout.swig</code>文件中的<code>&lt;body&gt;&lt;/body&gt;</code>体标签内引入刚才创建的js文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/src/clicklove.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/src/clicksocialvalue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/03/10/blog/image-20210311164038387.png"></p><h3 id="411添加图片放大预览功能"><a href="#4-11-添加图片放大预览功能" class="headerlink" title="4.11.添加图片放大预览功能"></a>4.11.添加图片放大预览功能</h3><p>利用 Fancybox 能放大查看图片。</p><p>有 <a href="https://github.com/theme-next/theme-next-fancybox">Fancybox2</a> 和 <a href="https://github.com/theme-next/theme-next-fancybox3">Fancybox3</a> 两个版本，这里使用 Fancybox3。</p><p>如果已经有 fancybox2 的，需要在站点根目录下执行下列命令进行删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf themes/next/<span class="built_in">source</span>/lib/fancybox</span><br></pre></td></tr></table></figure><p>进入到 <code>themes/next</code> 主题目录下，执行以下命令安装 fancybox3 模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-fancybox3 <span class="built_in">source</span>/lib/fancybox</span><br></pre></td></tr></table></figure><p>编辑 <code>主题配置文件</code>，启用 fancybox，修改配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2021/03/10/blog/image-20210311163717656.png"></p><h3 id="412添加雪花飘落背景效果"><a href="#4-12-添加雪花飘落背景效果" class="headerlink" title="4.12.添加雪花飘落背景效果"></a>4.12.添加雪花飘落背景效果</h3><p>在\blog\themes\next\source\js目录下新建snow2.js文件，添加如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*样式一*/</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">    $.fn.snow = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $flake = $(<span class="string">&#x27;&lt;div id=&quot;snowbox&quot; /&gt;&#x27;</span>).css(&#123;</span><br><span class="line">                <span class="string">&#x27;position&#x27;</span>: <span class="string">&#x27;absolute&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;z-index&#x27;</span>: <span class="string">&#x27;9999&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;top&#x27;</span>: <span class="string">&#x27;-50px&#x27;</span></span><br><span class="line">            &#125;).html(<span class="string">&#x27;❄&#x27;</span>),</span><br><span class="line">            documentHeight = $(<span class="built_in">document</span>).height(),</span><br><span class="line">            documentWidth = $(<span class="built_in">document</span>).width(),</span><br><span class="line">            defaults = &#123;</span><br><span class="line">                minSize: <span class="number">10</span>,</span><br><span class="line">                maxSize: <span class="number">20</span>,</span><br><span class="line">                newOn: <span class="number">1000</span>,</span><br><span class="line">                flakeColor: <span class="string">&quot;#AFDAEF&quot;</span> <span class="comment">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span></span><br><span class="line">            &#125;,</span><br><span class="line">            options = $.extend(&#123;&#125;, defaults, options);</span><br><span class="line">        <span class="keyword">var</span> interval = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> startPositionLeft = <span class="built_in">Math</span>.random() * documentWidth - <span class="number">100</span>,</span><br><span class="line">                startOpacity = <span class="number">0.5</span> + <span class="built_in">Math</span>.random(),</span><br><span class="line">                sizeFlake = options.minSize + <span class="built_in">Math</span>.random() * options.maxSize,</span><br><span class="line">                endPositionTop = documentHeight - <span class="number">200</span>,</span><br><span class="line">                endPositionLeft = startPositionLeft - <span class="number">500</span> + <span class="built_in">Math</span>.random() * <span class="number">500</span>,</span><br><span class="line">                durationFall = documentHeight * <span class="number">10</span> + <span class="built_in">Math</span>.random() * <span class="number">5000</span>;</span><br><span class="line">            $flake.clone().appendTo(<span class="string">&#x27;body&#x27;</span>).css(&#123;</span><br><span class="line">                left: startPositionLeft,</span><br><span class="line">                opacity: startOpacity,</span><br><span class="line">                <span class="string">&#x27;font-size&#x27;</span>: sizeFlake,</span><br><span class="line">                color: options.flakeColor</span><br><span class="line">            &#125;).animate(&#123;</span><br><span class="line">                top: endPositionTop,</span><br><span class="line">                left: endPositionLeft,</span><br><span class="line">                opacity: <span class="number">0.2</span></span><br><span class="line">            &#125;, durationFall, <span class="string">&#x27;linear&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="built_in">this</span>).remove()</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, options.newOn);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.fn.snow(&#123;</span><br><span class="line">        minSize: <span class="number">5</span>,</span><br><span class="line">        <span class="comment">/* 定义雪花最小尺寸 */</span></span><br><span class="line">        maxSize: <span class="number">50</span>,</span><br><span class="line">        <span class="comment">/* 定义雪花最大尺寸 */</span></span><br><span class="line">        newOn: <span class="number">300</span> <span class="comment">/* 定义密集程度，数字越小越密集 */</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在\blog\themes\next\layout_layout.swig中添加如下代码（文件最后添加即可）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 雪花特效2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/snow2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在\blog\themes\next_config.yml下添加如下代码（文件最后添加即可）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 雪花特效2</span></span><br><span class="line"><span class="attr">snow2:</span> </span><br><span class="line"> <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如果你已经引入jQuery，请忽略这一步(我本来没有引入但是引入了之后报错，不引入却正常，建议先不要引入看看能不能正常运行)</p><p>在第3步中，\blog\themes\next\layout_layout.swig文件中已经引入了snow2.js，需要在这之前引入jQuery，添加代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入jQuery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//libs.baidu.com/jquery/1.8.3/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果想要无齿轮的雪花效果，将snow2.js中的代码替换为下面的代码即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*样式二*/</span></span><br><span class="line"><span class="comment">/* 控制下雪 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snowFall</span>(<span class="params">snow</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 可配置属性 */</span></span><br><span class="line">    snow = snow || &#123;&#125;;</span><br><span class="line">    <span class="built_in">this</span>.maxFlake = snow.maxFlake || <span class="number">200</span>; <span class="comment">/* 最多片数 */</span></span><br><span class="line">    <span class="built_in">this</span>.flakeSize = snow.flakeSize || <span class="number">10</span>; <span class="comment">/* 雪花形状 */</span></span><br><span class="line">    <span class="built_in">this</span>.fallSpeed = snow.fallSpeed || <span class="number">1</span>; <span class="comment">/* 坠落速度 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 兼容写法 */</span></span><br><span class="line">requestAnimationFrame = <span class="built_in">window</span>.requestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.oRequestAnimationFrame ||</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(callback, <span class="number">1000</span> / <span class="number">60</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">cancelAnimationFrame = <span class="built_in">window</span>.cancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.webkitCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.oCancelAnimationFrame;</span><br><span class="line"><span class="comment">/* 开始下雪 */</span></span><br><span class="line">snowFall.prototype.start = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 创建画布 */</span></span><br><span class="line">    snowCanvas.apply(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">/* 创建雪花形状 */</span></span><br><span class="line">    createFlakes.apply(<span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">/* 画雪 */</span></span><br><span class="line">    drawSnow.apply(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建画布 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snowCanvas</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 添加Dom结点 */</span></span><br><span class="line">    <span class="keyword">var</span> snowcanvas = <span class="built_in">document</span>.createElement(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">    snowcanvas.id = <span class="string">&quot;snowfall&quot;</span>;</span><br><span class="line">    snowcanvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">    snowcanvas.height = <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line">    snowcanvas.setAttribute(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;position:absolute; top: 0; left: 0; z-index: 1; pointer-events: none;&quot;</span>);</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;body&quot;</span>)[<span class="number">0</span>].appendChild(snowcanvas);</span><br><span class="line">    <span class="built_in">this</span>.canvas = snowcanvas;</span><br><span class="line">    <span class="built_in">this</span>.ctx = snowcanvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    <span class="comment">/* 窗口大小改变的处理 */</span></span><br><span class="line">    <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        snowcanvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">        <span class="comment">/* snowcanvas.height = window.innerHeight */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 雪运动对象 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flakeMove</span>(<span class="params">canvasWidth, canvasHeight, flakeSize, fallSpeed</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvasWidth); <span class="comment">/* x坐标 */</span></span><br><span class="line">    <span class="built_in">this</span>.y = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvasHeight); <span class="comment">/* y坐标 */</span></span><br><span class="line">    <span class="built_in">this</span>.size = <span class="built_in">Math</span>.random() * flakeSize + <span class="number">2</span>; <span class="comment">/* 形状 */</span></span><br><span class="line">    <span class="built_in">this</span>.maxSize = flakeSize; <span class="comment">/* 最大形状 */</span></span><br><span class="line">    <span class="built_in">this</span>.speed = <span class="built_in">Math</span>.random() * <span class="number">1</span> + fallSpeed; <span class="comment">/* 坠落速度 */</span></span><br><span class="line">    <span class="built_in">this</span>.fallSpeed = fallSpeed; <span class="comment">/* 坠落速度 */</span></span><br><span class="line">    <span class="built_in">this</span>.velY = <span class="built_in">this</span>.speed; <span class="comment">/* Y方向速度 */</span></span><br><span class="line">    <span class="built_in">this</span>.velX = <span class="number">0</span>; <span class="comment">/* X方向速度 */</span></span><br><span class="line">    <span class="built_in">this</span>.stepSize = <span class="built_in">Math</span>.random() / <span class="number">30</span>; <span class="comment">/* 步长 */</span></span><br><span class="line">    <span class="built_in">this</span>.step = <span class="number">0</span> <span class="comment">/* 步数 */</span></span><br><span class="line">&#125;</span><br><span class="line">flakeMove.prototype.update = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="built_in">this</span>.x,</span><br><span class="line">        y = <span class="built_in">this</span>.y;</span><br><span class="line">    <span class="comment">/* 左右摆动(余弦) */</span></span><br><span class="line">    <span class="built_in">this</span>.velX *= <span class="number">0.98</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.velY &lt;= <span class="built_in">this</span>.speed) &#123;</span><br><span class="line">        <span class="built_in">this</span>.velY = <span class="built_in">this</span>.speed</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.velX += <span class="built_in">Math</span>.cos(<span class="built_in">this</span>.step += <span class="number">.05</span>) * <span class="built_in">this</span>.stepSize;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.y += <span class="built_in">this</span>.velY;</span><br><span class="line">    <span class="built_in">this</span>.x += <span class="built_in">this</span>.velX;</span><br><span class="line">    <span class="comment">/* 飞出边界的处理 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.x &gt;= canvas.width || <span class="built_in">this</span>.x &lt;= <span class="number">0</span> || <span class="built_in">this</span>.y &gt;= canvas.height || <span class="built_in">this</span>.y &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.reset(canvas.width, canvas.height)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 飞出边界-放置最顶端继续坠落 */</span></span><br><span class="line">flakeMove.prototype.reset = <span class="function"><span class="keyword">function</span> (<span class="params">width, height</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * width);</span><br><span class="line">    <span class="built_in">this</span>.y = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.size = <span class="built_in">Math</span>.random() * <span class="built_in">this</span>.maxSize + <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">this</span>.speed = <span class="built_in">Math</span>.random() * <span class="number">1</span> + <span class="built_in">this</span>.fallSpeed;</span><br><span class="line">    <span class="built_in">this</span>.velY = <span class="built_in">this</span>.speed;</span><br><span class="line">    <span class="built_in">this</span>.velX = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 渲染雪花-随机形状（此处可修改雪花颜色！！！）</span></span><br><span class="line">flakeMove.prototype.render = <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> snowFlake = ctx.createRadialGradient(<span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="number">0</span>, <span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="built_in">this</span>.size);</span><br><span class="line">    snowFlake.addColorStop(<span class="number">0</span>, <span class="string">&quot;rgba(255, 255, 255, 0.9)&quot;</span>); <span class="comment">/* 此处是雪花颜色，默认是白色 */</span></span><br><span class="line">    snowFlake.addColorStop(<span class="number">.5</span>, <span class="string">&quot;rgba(255, 255, 255, 0.5)&quot;</span>); <span class="comment">/* 若要改为其他颜色，请自行查 */</span></span><br><span class="line">    snowFlake.addColorStop(<span class="number">1</span>, <span class="string">&quot;rgba(255, 255, 255, 0)&quot;</span>); <span class="comment">/* 找16进制的RGB 颜色代码。 */</span></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.fillStyle = snowFlake;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(<span class="built_in">this</span>.x, <span class="built_in">this</span>.y, <span class="built_in">this</span>.size, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line">    ctx.fill();</span><br><span class="line">    ctx.restore();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 创建雪花-定义形状 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFlakes</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxFlake = <span class="built_in">this</span>.maxFlake,</span><br><span class="line">        flakes = <span class="built_in">this</span>.flakes = [],</span><br><span class="line">        canvas = <span class="built_in">this</span>.canvas;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxFlake; i++) &#123;</span><br><span class="line">        flakes.push(<span class="keyword">new</span> flakeMove(canvas.width, canvas.height, <span class="built_in">this</span>.flakeSize, <span class="built_in">this</span>.fallSpeed))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 画雪 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawSnow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxFlake = <span class="built_in">this</span>.maxFlake,</span><br><span class="line">        flakes = <span class="built_in">this</span>.flakes;</span><br><span class="line">    ctx = <span class="built_in">this</span>.ctx, canvas = <span class="built_in">this</span>.canvas, that = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">/* 清空雪花 */</span></span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; maxFlake; e++) &#123;</span><br><span class="line">        flakes[e].update();</span><br><span class="line">        flakes[e].render(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*  一帧一帧的画 */</span></span><br><span class="line">    <span class="built_in">this</span>.loop = requestAnimationFrame(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        drawSnow.apply(that);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 调用及控制方法 */</span></span><br><span class="line"><span class="keyword">var</span> snow = <span class="keyword">new</span> snowFall(&#123;</span><br><span class="line">    maxFlake: <span class="number">60</span></span><br><span class="line">&#125;);</span><br><span class="line">snow.start();</span><br></pre></td></tr></table></figure><p><img src="/2021/03/10/blog/image-20210311164406749.png"></p><p>如果你一步不跳到了这里，那我相信你已经熟悉了基本的修改流程，如果你还想增加一些高级效果，请自行百度，我这里就不多写了，当然我还加了不少别的东西，但我感觉不是很必要，所以就没有写进来了。</p><p>可参考链接：Hexo 个人博客 NexT 主题进阶配置<a href="https://blog.csdn.net/qq_32767041/article/details/103284412">https://blog.csdn.net/qq_32767041/article/details/103284412</a></p><h2 id="5踩过的坑"><a href="#5-踩过的坑" class="headerlink" title="5.踩过的坑"></a>5.踩过的坑</h2><h3 id="51添加侧边栏目录后点击没有反应"><a href="#5-1-添加侧边栏目录后，点击没有反应" class="headerlink" title="5.1.添加侧边栏目录后，点击没有反应"></a>5.1.添加侧边栏目录后，点击没有反应</h3><p><img src="/2021/03/10/blog/image-20210311192727706.png"></p><p>点击目录审查元素</p><p><img src="/2021/03/10/blog/image-20210311192823128.png"></p><p>经过简单的排查，发现现在编译出的 HTML 内容中，如下的 markdown 标题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">## title</span><br></pre></td></tr></table></figure><p>原来会被编译成 <code>&lt;h2 id=&quot;title&quot;&gt;title&lt;/h2&gt;</code></p><p>而现在会被编译成 <code>&lt;h2&gt;&lt;span id=&quot;title&quot;&gt;title&lt;/span&gt;&lt;/h2&gt;</code>，这正是问题出现的原因，前后不匹配，所以js拿不到该拿的值</p><p>于是我找遍网上大神，找到了 <a href="https://convivae.top/posts/hexo-bo-ke-cai-keng/#%E6%96%B9%E6%B3%95-2">https://convivae.top/posts/hexo-bo-ke-cai-keng/#%E6%96%B9%E6%B3%95-2</a></p><p>推测因此导致了生成 TOC 时，H2 元素的 id 属性为未定义，进而导致 TOC 中的锚点也为未定义的问题。</p><p>以上的变更，是包 hexo-toc 的变更导致的，具体应该是这次<a href="https://github.com/bubkoo/hexo-toc/blob/7c9624c2d3fb7d13ce973cb8de4dc10ff865c089/lib/filter.js#L28">提交</a>。</p><p>但是目前仅仅是初步排查，暂时没有确定问题就是出在 hexo-toc 上，仅仅是认为这个修改可能会导致后续某些生成 toc 的代码的不兼容。</p><p>因此目前阶段，进入你项目根目录的 <code>node_modules\hexo-toc\lib\filter.js</code> 中，把 28 行～31 行修改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$title.attr(<span class="string">&#x27;id&#x27;</span>, id);</span><br><span class="line"><span class="comment">// $title.children(&#x27;a&#x27;).remove();</span></span><br><span class="line"><span class="comment">// $title.html( &#x27;&lt;span id=&quot;&#x27; + id + &#x27;&quot;&gt;&#x27; + $title.html() + &#x27;&lt;/span&gt;&#x27; );</span></span><br><span class="line"><span class="comment">// $title.removeAttr(&#x27;id&#x27;);</span></span><br></pre></td></tr></table></figure><p>而原来是】</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// $title.attr(&#x27;id&#x27;, id);</span></span><br><span class="line">$title.children(<span class="string">&#x27;a&#x27;</span>).remove();</span><br><span class="line">$title.html( <span class="string">&#x27;&lt;span id=&quot;&#x27;</span> + id + <span class="string">&#x27;&quot;&gt;&#x27;</span> + $title.html() + <span class="string">&#x27;&lt;/span&gt;&#x27;</span> );</span><br><span class="line">$title.removeAttr(<span class="string">&#x27;id&#x27;</span>);</span><br></pre></td></tr></table></figure><p>前后呼应，问题解决</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;强烈推荐！！！使用hexo，基于gitgub搭建你想要的博客。Hexo 是一个快速、简洁且高效的博客框架。&lt;/p&gt;</summary>
    
    
    
    <category term="blog" scheme="http://zhouzhe111.github.io/categories/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>java基础</title>
    <link href="http://zhouzhe111.github.io/2021/03/09/javajichu/"/>
    <id>http://zhouzhe111.github.io/2021/03/09/javajichu/</id>
    <published>2021-03-09T12:40:36.000Z</published>
    <updated>2021-04-09T13:53:10.373Z</updated>
    
    <content type="html"><![CDATA[<p>java基础，面试考点归纳，更新中。。。</p><span id="more"></span><hr><!-- toc --><ul><li><a href="#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="#1thread">1.Thread</a><ul><li><a href="#11%E5%88%9B%E5%BB%BA">1.1.创建</a><ul><li><a href="#111%E6%96%B9%E5%BC%8F%E4%B8%80%E7%BB%A7%E6%89%BFthread%E7%B1%BB">1.1.1.方式一：继承Thread类</a></li><li><a href="#112%E6%96%B9%E5%BC%8F%E4%BA%8C%E5%AE%9E%E7%8E%B0runnable%E6%8E%A5%E5%8F%A3-%E7%94%B1%E4%BA%8E%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%A4%9A%E7%BB%A7%E6%89%BF%E8%BF%99%E4%B8%AA%E6%96%B9%E6%B3%95%E6%9B%B4%E5%B8%B8%E7%94%A8">1.1.2.方式二：实现Runnable接口 （由于接口的多继承，这个方法更常用</a></li><li><a href="#113%E6%96%B9%E5%BC%8F%E4%B8%89%E5%AE%9E%E7%8E%B0callable%E6%8E%A5%E5%8F%A3-jdk-50%E6%96%B0%E5%A2%9E">1.1.3.方式三：实现Callable接口。 — JDK 5.0新增.</a></li><li><a href="#114%E6%96%B9%E5%BC%8F%E5%9B%9B%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0">1.1.4.方式四：使用线程池</a></li></ul></li><li><a href="#12%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98">1.2.线程安全问题</a><ul><li><a href="#121%E6%96%B9%E5%BC%8F%E4%B8%80%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81%E5%9D%97">1.2.1.方式一：同步代码块</a></li><li><a href="#122%E6%96%B9%E5%BC%8F%E4%BA%8C%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95">1.2.2.方式二：同步方法</a></li><li><a href="#122%E6%96%B9%E5%BC%8F%E4%B8%89lock%E9%94%81-jdk50%E6%96%B0%E5%A2%9E">1.2.2.方式三：Lock锁 — JDK5.0新增</a></li><li><a href="#122%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1">1.2.2.线程通信</a></li><li><a href="#%E9%9D%A2%E8%AF%95%E9%A2%98sleep-%E5%92%8C-wait%E7%9A%84%E5%BC%82%E5%90%8C">面试题：sleep() 和 wait()的异同？</a></li></ul></li></ul></li><li><a href="#2string-%E5%92%8C-%E9%9B%86%E5%90%88">2.String 和 集合</a><ul><li><a href="#21string">2.1.String</a><ul><li><a href="#%E9%9D%A2%E8%AF%95%E9%A2%98string">面试题：String</a></li></ul></li><li><a href="#22list">2.2.List</a><ul><li><a href="#%E9%9D%A2%E8%AF%95%E9%A2%98list">面试题：List</a></li><li><a href="#221-list%E6%8E%A5%E5%8F%A3%E6%A1%86%E6%9E%B6">2.2.1. List接口框架</a></li><li><a href="#222arraylist%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">2.2.2.ArrayList的源码分析：</a></li><li><a href="#223linkedlist%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">2.2.3.LinkedList的源码分析：</a></li><li><a href="#224vector%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">2.2.4.Vector的源码分析：</a><ul><li><a href="#%E9%9D%A2%E8%AF%95%E9%A2%98arraylist-linkedlist-vector%E4%B8%89%E8%80%85%E7%9A%84%E5%BC%82%E5%90%8C">面试题：ArrayList、LinkedList、Vector三者的异同？</a></li></ul></li></ul></li><li><a href="#23set">2.3.Set</a><ul><li><a href="#231set%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%A1%86%E6%9E%B6">2.3.1.Set接口的框架：</a></li><li><a href="#232set%E5%AD%98%E5%82%A8%E6%97%A0%E5%BA%8F%E7%9A%84-%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE">2.3.2.Set：存储无序的、不可重复的数据</a></li><li><a href="#233%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0%E7%9A%84%E8%BF%87%E7%A8%8B%E4%BB%A5hashset%E4%B8%BA%E4%BE%8B">2.3.3.添加元素的过程：以HashSet为例：</a></li><li><a href="#%E9%9D%A2%E8%AF%95%E9%A2%98hashset">面试题：HashSet</a></li><li><a href="#234treeset">2.3.4.TreeSet</a></li></ul></li><li><a href="#24map">2.4.Map</a><ul><li><a href="#241map%E7%BB%93%E6%9E%84%E7%9A%84%E7%90%86%E8%A7%A3">2.4.1.Map结构的理解：</a></li><li><a href="#242hashmap%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%BB%A5jdk7%E4%B8%BA%E4%BE%8B%E8%AF%B4%E6%98%8E">2.4.2.HashMap的底层实现原理？以jdk7为例说明：</a></li></ul></li></ul></li></ul><!-- tocstop --><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h1 id="1thread"><a href="#1-Thread" class="headerlink" title="1.Thread"></a>1.Thread</h1><h2 id="11创建"><a href="#1-1-创建" class="headerlink" title="1.1.创建"></a>1.1.创建</h2><h3 id="111方式一继承thread类"><a href="#1-1-1-方式一：继承Thread类" class="headerlink" title="1.1.1.方式一：继承Thread类"></a>1.1.1.方式一：继承Thread类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* 多线程的创建，方式一：继承于Thread类</span><br><span class="line">* 1. 创建一个继承于Thread类的子类</span><br><span class="line">* 2. 重写Thread类的run() --&gt; 将此线程执行的操作声明在run()中</span><br><span class="line">* 3. 创建Thread类的子类的对象</span><br><span class="line">* 4. 通过此对象调用start()</span><br><span class="line"></span><br><span class="line">* 例子：遍历100以内的所有的偶数</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建一个继承于Thread类的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//2. 重写Thread类的run()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建Thread类的子类的对象</span></span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.通过此对象调用start():①启动当前线程 ② 调用当前线程的run()</span></span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//问题一：我们不能通过直接调用run()的方式启动线程。</span></span><br><span class="line"><span class="comment">//        t1.run();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//问题二：再启动一个线程，遍历100以内的偶数。不可以还让已经start()的线程去执行。会报IllegalThreadStateException</span></span><br><span class="line"><span class="comment">//        t1.start();</span></span><br><span class="line">        <span class="comment">//我们需要重新创建一个线程的对象</span></span><br><span class="line">        MyThread t2 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如下操作仍然是在main线程中执行的。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i + <span class="string">&quot;***********main()************&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="112方式二实现runnable接口-由于接口的多继承这个方法更常用"><a href="#1-1-2-方式二：实现Runnable接口-（由于接口的多继承，这个方法更常用" class="headerlink" title="1.1.2.方式二：实现Runnable接口 （由于接口的多继承，这个方法更常用"></a>1.1.2.方式二：实现Runnable接口 （由于接口的多继承，这个方法更常用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* 创建多线程的方式二：实现Runnable接口</span><br><span class="line">* 1. 创建一个实现了Runnable接口的类</span><br><span class="line">* 2. 实现类去实现Runnable中的抽象方法：run()</span><br><span class="line">* 3. 创建实现类的对象</span><br><span class="line">* 4. 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span><br><span class="line">* 5. 通过Thread类的对象调用start()</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建一个实现了Runnable接口的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//2. 实现类去实现Runnable中的抽象方法：run()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建实现类的对象</span></span><br><span class="line">        MThread mThread = <span class="keyword">new</span> MThread();</span><br><span class="line">        <span class="comment">//4. 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(mThread);</span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        <span class="comment">//5. 通过Thread类的对象调用start():① 启动线程 ②调用当前线程的run()--&gt;调用了Runnable类型的target的run()</span></span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//再启动一个线程，遍历100以内的偶数</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(mThread);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="113方式三实现callable接口-jdk-50新增"><a href="#1-1-3-方式三：实现Callable接口。-—-JDK-5-0新增" class="headerlink" title="1.1.3.方式三：实现Callable接口。 — JDK 5.0新增."></a>1.1.3.方式三：实现Callable接口。 — JDK 5.0新增.</h3><ul><li><p>如何理解实现Callable接口的方式创建多线程比实现Runnable接口创建多线程方式强大？</p></li><li><ol><li>call()可以有返回值的。</li></ol></li><li><ol start="2"><li>call()可以抛出异常，被外面的操作捕获，获取异常的信息</li></ol></li><li><ol start="3"><li>Callable是支持泛型的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建一个实现Callable的实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumThread</span> <span class="keyword">implements</span> <span class="title">Callable</span></span>&#123;</span><br><span class="line">    <span class="comment">//2.实现call方法，将此线程需要执行的操作声明在call()中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">             sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadNew</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.创建Callable接口实现类的对象</span></span><br><span class="line">        NumThread numThread = <span class="keyword">new</span> NumThread();</span><br><span class="line">        <span class="comment">//4.将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象</span></span><br><span class="line">        FutureTask futureTask = <span class="keyword">new</span> FutureTask(numThread);</span><br><span class="line">        <span class="comment">//5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span></span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//6.获取Callable中call方法的返回值</span></span><br><span class="line">            <span class="comment">//get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。</span></span><br><span class="line">            Object sum = futureTask.get();</span><br><span class="line">            System.out.println(<span class="string">&quot;总和为：&quot;</span> + sum);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="114方式四使用线程池"><a href="#1-1-4-方式四：使用线程池" class="headerlink" title="1.1.4.方式四：使用线程池"></a>1.1.4.方式四：使用线程池</h3><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* 好处：</span><br><span class="line">* <span class="number">1.</span>提高响应速度（减少了创建新线程的时间）</span><br><span class="line">* <span class="number">2.</span>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</span><br><span class="line">* <span class="number">3.</span>便于线程管理</span><br><span class="line">*      corePoolSize：核心池的大小</span><br><span class="line">*      maximumPoolSize：最大线程数</span><br><span class="line">*      keepAliveTime：线程没有任务时最多保持多长时间后会终止</span><br></pre></td></tr></table></figure><p>步骤：</p><p>1.新建一个实例，一般用Runnable</p><p>2.使用ExecutorService （线程池接口）或者ThreadPoolExecutor（线程池实现类）创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 提供指定线程数量的线程池</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        ThreadPoolExecutor service1 = (ThreadPoolExecutor) service;</span><br><span class="line">        <span class="comment">//设置线程池的属性</span></span><br><span class="line"><span class="comment">//        System.out.println(service.getClass());</span></span><br><span class="line"><span class="comment">//        service1.setCorePoolSize(15);</span></span><br><span class="line"><span class="comment">//        service1.setKeepAliveTime();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> NumberThread());<span class="comment">//适合适用于Runnable</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> NumberThread1());<span class="comment">//适合适用于Runnable</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        service.submit(Callable callable);//适合使用于Callable</span></span><br><span class="line">        <span class="comment">//3.关闭连接池</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12线程安全问题"><a href="#1-2-线程安全问题" class="headerlink" title="1.2.线程安全问题"></a>1.2.线程安全问题</h2><h3 id="121方式一同步代码块"><a href="#1-2-1-方式一：同步代码块" class="headerlink" title="1.2.1.方式一：同步代码块"></a>1.2.1.方式一：同步代码块</h3><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*   synchronized(同步监视器)&#123;</span><br><span class="line">*      //需要被同步的代码</span><br><span class="line">*</span><br><span class="line">*   &#125;</span><br><span class="line">*  说明：<span class="number">1.</span>操作共享数据的代码，即为需要被同步的代码。  --&gt;不能包含代码多了，也不能包含代码少了。</span><br><span class="line">*       <span class="number">2.</span>共享数据：多个线程共同操作的变量。比如：ticket就是共享数据。</span><br><span class="line">*       <span class="number">3.</span>同步监视器，俗称：锁。任何一个类的对象，都可以充当锁。</span><br><span class="line">*          要求：多个线程必须要共用同一把锁。</span><br><span class="line">*</span><br><span class="line">*       补充：在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。</span><br></pre></td></tr></table></figure><h3 id="122方式二同步方法"><a href="#1-2-2-方式二：同步方法" class="headerlink" title="1.2.2.方式二：同步方法"></a>1.2.2.方式二：同步方法</h3><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方式二：同步方法。</span><br><span class="line">*     如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的。</span><br><span class="line"></span><br><span class="line">  private static synchronized void show()&#123; //同步监视器：this</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="122方式三lock锁-jdk50新增"><a href="#1-2-2-方式三：Lock锁-—-JDK5-0新增" class="headerlink" title="1.2.2.方式三：Lock锁  — JDK5.0新增"></a>1.2.2.方式三：Lock锁  — JDK5.0新增</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> 1. 面试题：synchronized 与 Lock的异同？</span><br><span class="line">*   相同：二者都可以解决线程安全问题</span><br><span class="line">*   不同：synchronized机制在执行完相应的同步代码以后，自动的释放同步监视器</span><br><span class="line">*        Lock需要手动的启动同步（lock()），同时结束同步也需要手动的实现（unlock()）</span><br><span class="line">*</span><br><span class="line">* 2.优先使用顺序：</span><br><span class="line">* Lock  同步代码块（已经进入了方法体，分配了相应资源）  同步方法（在方法体之外）</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//1.实例化ReentrantLock</span></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//2.调用锁定方法lock()</span></span><br><span class="line">                lock.lock();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：售票，票号为：&quot;</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//3.调用解锁方法：unlock()</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="122线程通信"><a href="#1-2-2-线程通信" class="headerlink" title="1.2.2.线程通信"></a>1.2.2.线程通信</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 涉及到的三个方法：</span><br><span class="line">* wait():一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。</span><br><span class="line">* notify():一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。</span><br><span class="line">* notifyAll():一旦执行此方法，就会唤醒所有被wait的线程。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line"></span><br><span class="line">                obj.notify();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(number &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + number);</span><br><span class="line">                    number++;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//使得调用如下wait()方法的线程进入阻塞状态</span></span><br><span class="line">                        obj.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="面试题sleep-和-wait的异同"><a href="#面试题：sleep-和-wait-的异同？" class="headerlink" title="面试题：sleep() 和 wait()的异同？"></a>面试题：sleep() 和 wait()的异同？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 1.相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。</span><br><span class="line">* 2.不同点：1）两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()</span><br><span class="line">*          2）调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中</span><br><span class="line">*          3）关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁。</span><br></pre></td></tr></table></figure><h1 id="2string-和-集合"><a href="#2-String-和-集合" class="headerlink" title="2.String 和 集合"></a>2.String 和 集合</h1><h2 id="21string"><a href="#2-1-String" class="headerlink" title="2.1.String"></a>2.1.String</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对比String、StringBuffer、StringBuilder三者的效率：</span><br><span class="line">从高到低排列：StringBuilder &gt; StringBuffer &gt; String</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">String、StringBuffer、StringBuilder三者的异同？</span><br><span class="line">String:不可变的字符序列；底层使用char[]存储</span><br><span class="line">StringBuffer:可变的字符序列；线程安全的，效率低；底层使用char[]存储</span><br><span class="line">StringBuilder:可变的字符序列；jdk5.0新增的，线程不安全的，效率高；底层使用char[]存储</span><br><span class="line"></span><br><span class="line">源码分析：</span><br><span class="line">String str &#x3D; new String();&#x2F;&#x2F;char[] value &#x3D; new char[0];</span><br><span class="line">String str1 &#x3D; new String(&quot;abc&quot;);&#x2F;&#x2F;char[] value &#x3D; new char[]&#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;&#125;;</span><br><span class="line"></span><br><span class="line">StringBuffer sb1 &#x3D; new StringBuffer();&#x2F;&#x2F;char[] value &#x3D; new char[16];底层创建了一个长度是16的数组。</span><br><span class="line">System.out.println(sb1.length());&#x2F;&#x2F;</span><br><span class="line">sb1.append(&#39;a&#39;);&#x2F;&#x2F;value[0] &#x3D; &#39;a&#39;;</span><br><span class="line">sb1.append(&#39;b&#39;);&#x2F;&#x2F;value[1] &#x3D; &#39;b&#39;;</span><br><span class="line"></span><br><span class="line">StringBuffer sb2 &#x3D; new StringBuffer(&quot;abc&quot;);&#x2F;&#x2F;char[] value &#x3D; new char[&quot;abc&quot;.length() + 16];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;问题1. System.out.println(sb2.length());&#x2F;&#x2F;3</span><br><span class="line">&#x2F;&#x2F;问题2. 扩容问题:如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。</span><br><span class="line">         默认情况下，扩容为原来容量的2倍 + 2，同时将原有数组中的元素复制到新的数组中。</span><br><span class="line"></span><br><span class="line">        指导意义：开发中建议大家使用：StringBuffer(int capacity) 或 StringBuilder(int capacity)</span><br></pre></td></tr></table></figure><h3 id="面试题string"><a href="#面试题：String" class="headerlink" title="面试题：String"></a>面试题：String</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String str = <span class="keyword">new</span> String(<span class="string">&quot;good&quot;</span>);</span><br><span class="line">    <span class="keyword">char</span>[] ch = &#123; <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String str, <span class="keyword">char</span> ch[])</span> </span>&#123;</span><br><span class="line">        str = <span class="string">&quot;test ok&quot;</span>;</span><br><span class="line">        ch[<span class="number">0</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringTest ex = <span class="keyword">new</span> StringTest();</span><br><span class="line">        ex.change(ex.str, ex.ch);</span><br><span class="line">        System.out.println(ex.str);<span class="comment">//good</span></span><br><span class="line">        System.out.println(ex.ch);<span class="comment">//best</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="22list"><a href="#2-2-List" class="headerlink" title="2.2.List"></a>2.2.List</h2><h3 id="面试题list"><a href="#面试题：List" class="headerlink" title="面试题：List"></a>面试题：List</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//练习：在List内去除重复数字值，要求尽量简单</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">duplicateList</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">    HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">    set.addAll(list);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList(set);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">1</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">2</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">2</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">4</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">4</span>));</span><br><span class="line">    List list2 = duplicateList(list);</span><br><span class="line">    <span class="keyword">for</span> (Object integer : list2) &#123;</span><br><span class="line">        System.out.println(integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="221-list接口框架"><a href="#2-2-1-List接口框架" class="headerlink" title="2.2.1. List接口框架"></a>2.2.1. List接口框架</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*    |----Collection接口：单列集合，用来存储一个一个的对象</span><br><span class="line">*          |----List接口：存储有序的、可重复的数据。  --&gt;“动态”数组,替换原有的数组</span><br><span class="line">*              |----ArrayList：作为List接口的主要实现类；线程不安全的，效率高；底层使用Object[] elementData存储</span><br><span class="line">*              |----LinkedList：对于频繁的插入、删除操作，使用此类效率比ArrayList高；底层使用双向链表存储</span><br><span class="line">*              |----Vector：作为List接口的古老实现类；线程安全的，效率低；底层使用Object[] elementData存储</span><br></pre></td></tr></table></figure><h3 id="222arraylist的源码分析"><a href="#2-2-2-ArrayList的源码分析：" class="headerlink" title="2.2.2.ArrayList的源码分析："></a>2.2.2.ArrayList的源码分析：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> 2.1 jdk 7情况下</span><br><span class="line">*      ArrayList list &#x3D; new ArrayList();&#x2F;&#x2F;底层创建了长度是10的Object[]数组elementData</span><br><span class="line">*      list.add(123);&#x2F;&#x2F;elementData[0] &#x3D; new Integer(123);</span><br><span class="line">*      ...</span><br><span class="line">*      list.add(11);&#x2F;&#x2F;如果此次的添加导致底层elementData数组容量不够，则扩容。</span><br><span class="line">*      默认情况下，扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中。</span><br><span class="line">*</span><br><span class="line">*      结论：建议开发中使用带参的构造器：ArrayList list &#x3D; new ArrayList(int capacity)</span><br><span class="line">*</span><br><span class="line">*   2.2 jdk 8中ArrayList的变化：</span><br><span class="line">*      ArrayList list &#x3D; new ArrayList();&#x2F;&#x2F;底层Object[] elementData初始化为&#123;&#125;.并没有创建长度为10的数组</span><br><span class="line">*</span><br><span class="line">*      list.add(123);&#x2F;&#x2F;第一次调用add()时，底层才创建了长度10的数组，并将数据123添加到elementData[0]</span><br><span class="line">*      ...</span><br><span class="line">*      后续的添加和扩容操作与jdk 7 无异。</span><br><span class="line">*   2.3 小结：jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象</span><br><span class="line">*            的创建类似于单例的懒汉式，延迟了数组的创建，节省内存。</span><br></pre></td></tr></table></figure><h3 id="223linkedlist的源码分析"><a href="#2-2-3-LinkedList的源码分析：" class="headerlink" title="2.2.3.LinkedList的源码分析："></a>2.2.3.LinkedList的源码分析：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">LinkedList list &#x3D; new LinkedList(); 内部声明了Node类型的first和last属性，默认值为null</span><br><span class="line">*      list.add(123);&#x2F;&#x2F;将123封装到Node中，创建了Node对象。</span><br><span class="line">*</span><br><span class="line">*      其中，Node定义为：体现了LinkedList的双向链表的说法</span><br><span class="line">*      private static class Node&lt;E&gt; &#123;</span><br><span class="line">            E item;</span><br><span class="line">            Node&lt;E&gt; next;</span><br><span class="line">            Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">            Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">            this.item &#x3D; element;</span><br><span class="line">            this.next &#x3D; next;</span><br><span class="line">            this.prev &#x3D; prev;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="224vector的源码分析"><a href="#2-2-4-Vector的源码分析：" class="headerlink" title="2.2.4.Vector的源码分析："></a>2.2.4.Vector的源码分析：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*jdk7和jdk8中通过Vector()构造器创建对象时，底层都创建了长度为10的数组。</span><br><span class="line">*在扩容方面，默认扩容为原来的数组长度的2倍。</span><br></pre></td></tr></table></figure><h4 id="面试题arraylist-linkedlist-vector三者的异同"><a href="#面试题：ArrayList、LinkedList、Vector三者的异同？" class="headerlink" title="面试题：ArrayList、LinkedList、Vector三者的异同？"></a>面试题：ArrayList、LinkedList、Vector三者的异同？</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*  同：三个类都是实现了List接口，存储数据的特点相同：存储有序的、可重复的数据</span><br><span class="line">*  不同：见上</span><br></pre></td></tr></table></figure><h2 id="23set"><a href="#2-3-Set" class="headerlink" title="2.3.Set"></a>2.3.Set</h2><h3 id="231set接口的框架"><a href="#2-3-1-Set接口的框架：" class="headerlink" title="2.3.1.Set接口的框架："></a>2.3.1.Set接口的框架：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* |----Collection接口：单列集合，用来存储一个一个的对象</span><br><span class="line">*          |----Set接口：存储无序的、不可重复的数据   --&gt;高中讲的“集合”</span><br><span class="line">*              |----HashSet：作为Set接口的主要实现类；线程不安全的；可以存储null值</span><br><span class="line">*                  |----LinkedHashSet：作为HashSet的子类；遍历其内部数据时，可以按照添加的顺序遍历</span><br><span class="line">*                                      对于频繁的遍历操作，LinkedHashSet效率高于HashSet.</span><br><span class="line">*              |----TreeSet：可以按照添加对象的指定属性，进行排序。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*  1. Set接口中没有额外定义新的方法，使用的都是Collection中声明过的方法。</span><br><span class="line">*</span><br><span class="line">*  2. 要求：向Set(主要指：HashSet、LinkedHashSet)中添加的数据，其所在的类一定要重写hashCode()和equals()</span><br><span class="line">*     要求：重写的hashCode()和equals()尽可能保持一致性：相等的对象必须具有相等的散列码</span><br><span class="line">*      重写两个方法的小技巧：对象中用作 equals() 方法比较的 Field，都应该用来计算 hashCode 值。</span><br></pre></td></tr></table></figure><h3 id="232set存储无序的-不可重复的数据"><a href="#2-3-2-Set：存储无序的、不可重复的数据" class="headerlink" title="2.3.2.Set：存储无序的、不可重复的数据"></a>2.3.2.Set：存储无序的、不可重复的数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">以HashSet为例说明：</span><br><span class="line">1. 无序性：不等于随机性。存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值决定的。</span><br><span class="line"></span><br><span class="line">2. 不可重复性：保证添加的元素按照equals()判断时，不能返回true.即：相同的元素只能添加一个。</span><br></pre></td></tr></table></figure><h3 id="233添加元素的过程以hashset为例"><a href="#2-3-3-添加元素的过程：以HashSet为例：" class="headerlink" title="2.3.3.添加元素的过程：以HashSet为例："></a>2.3.3.添加元素的过程：以HashSet为例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">我们向HashSet中添加元素a,首先调用元素a所在类的hashCode()方法，计算元素a的哈希值，</span><br><span class="line">此哈希值接着通过某种算法计算出在HashSet底层数组中的存放位置（即为：索引位置），判断</span><br><span class="line">数组此位置上是否已经有元素：</span><br><span class="line">    如果此位置上没有其他元素，则元素a添加成功。 ---&gt;情况1</span><br><span class="line">    如果此位置上有其他元素b(或以链表形式存在的多个元素），则比较元素a与元素b的hash值：</span><br><span class="line">        如果hash值不相同，则元素a添加成功。---&gt;情况2</span><br><span class="line">        如果hash值相同，进而需要调用元素a所在类的equals()方法：</span><br><span class="line">               equals()返回true,元素a添加失败</span><br><span class="line">               equals()返回false,则元素a添加成功。---&gt;情况2</span><br><span class="line"></span><br><span class="line">对于添加成功的情况2和情况3而言：元素a 与已经存在指定索引位置上数据以链表的方式存储。</span><br><span class="line">jdk 7 :元素a放到数组中，指向原来的元素。</span><br><span class="line">jdk 8 :原来的元素在数组中，指向元素a</span><br><span class="line">总结：七上八下</span><br><span class="line"></span><br><span class="line">HashSet底层：数组+链表的结构。</span><br></pre></td></tr></table></figure><h3 id="面试题hashset"><a href="#面试题：HashSet" class="headerlink" title="面试题：HashSet"></a>面试题：HashSet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">    Person p1 = <span class="keyword">new</span> Person(<span class="number">1001</span>,<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">    Person p2 = <span class="keyword">new</span> Person(<span class="number">1002</span>,<span class="string">&quot;BB&quot;</span>);</span><br><span class="line"></span><br><span class="line">    set.add(p1);</span><br><span class="line">    set.add(p2);</span><br><span class="line">    System.out.println(set);   <span class="comment">//[Person&#123;id=1002, name=&#x27;BB&#x27;&#125;, Person&#123;id=1001, name=&#x27;AA&#x27;&#125;]</span></span><br><span class="line"></span><br><span class="line">    p1.name = <span class="string">&quot;CC&quot;</span>;</span><br><span class="line">    set.remove(p1);</span><br><span class="line">    System.out.println(set);   <span class="comment">//[Person&#123;id=1002, name=&#x27;BB&#x27;&#125;, Person&#123;id=1001, name=&#x27;CC&#x27;&#125;]</span></span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">1001</span>,<span class="string">&quot;CC&quot;</span>));</span><br><span class="line">    System.out.println(set);  </span><br><span class="line">    <span class="comment">//[Person&#123;id=1002, name=&#x27;BB&#x27;&#125;, Person&#123;id=1001, name=&#x27;CC&#x27;&#125;, Person&#123;id=1001, name=&#x27;CC&#x27;&#125;]</span></span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">1001</span>,<span class="string">&quot;AA&quot;</span>));</span><br><span class="line">    System.out.println(set);</span><br><span class="line">    <span class="comment">//[Person&#123;id=1002, name=&#x27;BB&#x27;&#125;, Person&#123;id=1001, name=&#x27;CC&#x27;&#125;, Person&#123;id=1001, name=&#x27;CC&#x27;&#125;, Person&#123;id=1001, name=&#x27;AA&#x27;&#125;]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="234treeset"><a href="#2-3-4-TreeSet" class="headerlink" title="2.3.4.TreeSet"></a>2.3.4.TreeSet</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.向TreeSet中添加的数据，要求是相同类的对象。</span><br><span class="line">2.两种排序方式：自然排序（实现Comparable接口） 和 定制排序（Comparator）</span><br><span class="line"></span><br><span class="line">3.自然排序中，比较两个对象是否相同的标准为：compareTo()返回0.不再是equals().</span><br><span class="line">4.定制排序中，比较两个对象是否相同的标准为：compare()返回0.不再是equals().</span><br></pre></td></tr></table></figure><h2 id="24map"><a href="#2-4-Map" class="headerlink" title="2.4.Map"></a>2.4.Map</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">|----Map:双列数据，存储key-value对的数据   ---类似于高中的函数：y &#x3D; f(x)</span><br><span class="line">*         |----HashMap:作为Map的主要实现类；线程不安全的，效率高；存储null的key和value</span><br><span class="line">*              |----LinkedHashMap:保证在遍历map元素时，可以按照添加的顺序实现遍历。</span><br><span class="line">*                      原因：在原有的HashMap底层结构基础上，添加了一对指针，指向前一个和后一个元素。</span><br><span class="line">*                      对于频繁的遍历操作，此类执行效率高于HashMap。</span><br><span class="line">*         |----TreeMap:保证按照添加的key-value对进行排序，实现排序遍历。此时考虑key的自然排序或定制排序</span><br><span class="line">*                      底层使用红黑树</span><br><span class="line">*         |----Hashtable:作为古老的实现类；线程安全的，效率低；不能存储null的key和value</span><br><span class="line">*              |----Properties:常用来处理配置文件。key和value都是String类型</span><br><span class="line">*</span><br><span class="line">*</span><br><span class="line">*      HashMap的底层：数组+链表  （jdk7及之前）</span><br><span class="line">*                    数组+链表+红黑树 （jdk 8）</span><br></pre></td></tr></table></figure><h3 id="241map结构的理解"><a href="#2-4-1-Map结构的理解：" class="headerlink" title="2.4.1.Map结构的理解："></a>2.4.1.Map结构的理解：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*    Map中的key:无序的、不可重复的，使用Set存储所有的key  ---&gt; key所在的类要重写equals()和hashCode() （以HashMap为例）</span><br><span class="line">*    Map中的value:无序的、可重复的，使用Collection存储所有的value ---&gt;value所在的类要重写equals()</span><br><span class="line">*    一个键值对：key-value构成了一个Entry对象。</span><br><span class="line">*    Map中的entry:无序的、不可重复的，使用Set存储所有的entry</span><br></pre></td></tr></table></figure><h3 id="242hashmap的底层实现原理以jdk7为例说明"><a href="#2-4-2-HashMap的底层实现原理？以jdk7为例说明：" class="headerlink" title="2.4.2.HashMap的底层实现原理？以jdk7为例说明："></a>2.4.2.HashMap的底层实现原理？以jdk7为例说明：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> HashMap map &#x3D; new HashMap():</span><br><span class="line">*      在实例化以后，底层创建了长度是16的一维数组Entry[] table。</span><br><span class="line">*      ...可能已经执行过多次put...</span><br><span class="line">*      map.put(key1,value1):</span><br><span class="line">*      首先，调用key1所在类的hashCode()计算key1哈希值，此哈希值经过某种算法计算以后，得到在Entry数组中的存放位置。</span><br><span class="line">*      如果此位置上的数据为空，此时的key1-value1添加成功。 ----情况1</span><br><span class="line">*      如果此位置上的数据不为空，(意味着此位置上存在一个或多个数据(以链表形式存在)),比较key1和已经存在的一个或多个数据</span><br><span class="line">*      的哈希值：</span><br><span class="line">*              如果key1的哈希值与已经存在的数据的哈希值都不相同，此时key1-value1添加成功。----情况2</span><br><span class="line">*              如果key1的哈希值和已经存在的某一个数据(key2-value2)的哈希值相同，继续比较：调用key1所在类的equals(key2)方法，比较：</span><br><span class="line">*                      如果equals()返回false:此时key1-value1添加成功。----情况3</span><br><span class="line">*                      如果equals()返回true:使用value1替换value2。</span><br><span class="line">*</span><br><span class="line">*       补充：关于情况2和情况3：此时key1-value1和原来的数据以链表的方式存储。</span><br><span class="line">*</span><br><span class="line">*      在不断的添加过程中，会涉及到扩容问题，当超出临界值(且要存放的位置非空)时，扩容。默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来。</span><br><span class="line">*</span><br><span class="line">*      jdk8 相较于jdk7在底层实现方面的不同：</span><br><span class="line">*      1. new HashMap():底层没有创建一个长度为16的数组</span><br><span class="line">*      2. jdk 8底层的数组是：Node[],而非Entry[]</span><br><span class="line">*      3. 首次调用put()方法时，底层创建长度为16的数组</span><br><span class="line">*      4. jdk7底层结构只有：数组+链表。jdk8中底层结构：数组+链表+红黑树。</span><br><span class="line">*         4.1 形成链表时，七上八下（jdk7:新的元素指向旧的元素。jdk8：旧的元素指向新的元素）</span><br><span class="line">          4.2 当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt; 8 且当前数组的长度 &gt; 64时，此时此索引位置上的所数据改为使用红黑树存储。</span><br><span class="line">*</span><br><span class="line">*      DEFAULT_INITIAL_CAPACITY : HashMap的默认容量，16</span><br><span class="line">*      DEFAULT_LOAD_FACTOR：HashMap的默认加载因子：0.75</span><br><span class="line">*      threshold：扩容的临界值，&#x3D;容量*填充因子：16 * 0.75 &#x3D;&gt; 12</span><br><span class="line">*      TREEIFY_THRESHOLD：Bucket中链表长度大于该默认值，转化为红黑树:8</span><br><span class="line">*      MIN_TREEIFY_CAPACITY：桶中的Node被树化时最小的hash表容量:64</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;java基础，面试考点归纳，更新中。。。&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://zhouzhe111.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>vue的基本组件的引入和使用</title>
    <link href="http://zhouzhe111.github.io/2021/03/09/vue2/"/>
    <id>http://zhouzhe111.github.io/2021/03/09/vue2/</id>
    <published>2021-03-09T12:06:29.000Z</published>
    <updated>2021-04-09T12:39:00.572Z</updated>
    
    <content type="html"><![CDATA[<p>vue的基本组件的引入和使用，包括elementui（ui界面组件）、axios（通信组件）、router（路由组件）、vuex（全局数据共享组件）等</p><span id="more"></span><hr><!-- toc --><ul><li><a href="#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="#1elementui">1.elementUI</a><ul><li><a href="#11%E5%AE%89%E8%A3%85">1.1.安装</a></li><li><a href="#12%E5%AF%BC%E5%85%A5">1.2.导入</a></li><li><a href="#13%E4%B8%BE%E4%B8%AA%E4%BE%8B%E5%AD%90">1.3.举个例子</a></li></ul></li><li><a href="#2axios">2.axios</a><ul><li><a href="#21%E5%AE%89%E8%A3%85">2.1.安装</a></li><li><a href="#22%E5%AF%BC%E5%85%A5">2.2.导入</a><ul><li><a href="#%E5%BC%95%E5%85%A5qs">引入qs</a></li></ul></li><li><a href="#23%E4%B8%BE%E4%B8%AA%E4%BE%8B%E5%AD%90">2.3.举个例子</a><ul><li><a href="#1-axios-%E6%9C%89%E5%BE%88%E5%A4%9A%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F%E5%85%B7%E4%BD%93%E5%8F%AF%E4%BB%A5%E7%9C%8B%E4%B8%80%E4%B8%8B%E5%AE%98%E7%BD%91%E7%9A%84api%E4%B8%8B%E9%9D%A2%E8%AF%B4%E4%B8%80%E4%B8%8B%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F">1、axios 有很多请求方式，具体可以看一下官网的API，下面说一下最基本的使用方式：</a></li><li><a href="#2-%E6%88%91%E4%B8%AA%E4%BA%BA%E6%9B%B4%E5%96%9C%E6%AC%A2%E8%B0%83%E7%94%A8%E5%B0%81%E8%A3%85%E6%96%B9%E6%B3%95%E7%9A%84%E5%BD%A2%E5%BC%8F">2、我个人更喜欢调用封装方法的形式</a></li></ul></li></ul></li><li><a href="#3-router">3、router</a><ul><li><a href="#31%E5%AE%89%E8%A3%85">3.1.安装</a></li><li><a href="#32%E5%AF%BC%E5%85%A5">3.2.导入</a></li><li><a href="#33%E4%B8%BE%E4%B8%AA%E4%BE%8B%E5%AD%90">3.3.举个例子</a></li></ul></li><li><a href="#4-vuex">4、vuex</a><ul><li><a href="#41%E5%AE%89%E8%A3%85">4.1.安装</a></li><li><a href="#32%E5%AF%BC%E5%85%A5-1">3.2.导入</a></li><li><a href="#33%E4%B8%BE%E4%B8%AA%E4%BE%8B%E5%AD%90-1">3.3.举个例子</a><ul><li><a href="#1-%E7%8E%B0%E5%9C%A8%E6%88%91%E4%BB%ACstorejs%E6%96%87%E4%BB%B6%E9%87%8C%E5%A2%9E%E5%8A%A0%E4%B8%80%E4%B8%AA%E5%B8%B8%E9%87%8F%E5%AF%B9%E8%B1%A1-storejs%E6%96%87%E4%BB%B6%E5%B0%B1%E6%98%AF%E6%88%91%E4%BB%AC%E5%9C%A8%E5%BC%95%E5%85%A5vuex%E6%97%B6%E7%9A%84%E9%82%A3%E4%B8%AA%E6%96%87%E4%BB%B6">1、现在我们store.js文件里增加一个常量对象。store.js文件就是我们在引入vuex时的那个文件。</a></li><li><a href="#2-%E7%94%A8export-default-%E5%B0%81%E8%A3%85%E4%BB%A3%E7%A0%81%E8%AE%A9%E5%A4%96%E9%83%A8%E5%8F%AF%E4%BB%A5%E5%BC%95%E7%94%A8">2、用export default 封装代码，让外部可以引用。</a></li><li><a href="#3-%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AAvue%E7%9A%84%E6%A8%A1%E6%9D%BF%E4%BD%8D%E7%BD%AE%E5%9C%A8components%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E5%90%8D%E5%AD%97%E5%8F%ABcountvue-%E5%9C%A8%E6%A8%A1%E6%9D%BF%E4%B8%AD%E6%88%91%E4%BB%AC%E5%BC%95%E5%85%A5%E6%88%91%E4%BB%AC%E5%88%9A%E5%BB%BA%E7%9A%84storejs%E6%96%87%E4%BB%B6%E5%B9%B6%E5%9C%A8%E6%A8%A1%E6%9D%BF%E4%B8%AD%E7%94%A8storestatecount%E8%BE%93%E5%87%BAcount-%E7%9A%84%E5%80%BC">3、新建一个vue的模板，位置在components文件夹下，名字叫count.vue。在模板中我们引入我们刚建的store.js文件，并在模板中用输出count 的值。</a></li><li><a href="#4-%E5%9C%A8storejs%E6%96%87%E4%BB%B6%E4%B8%AD%E5%8A%A0%E5%85%A5%E4%B8%A4%E4%B8%AA%E6%94%B9%E5%8F%98state%E7%9A%84%E6%96%B9%E6%B3%95">4、在store.js文件中加入两个改变state的方法。</a></li><li><a href="#5-%E5%9C%A8countvue%E6%A8%A1%E6%9D%BF%E4%B8%AD%E5%8A%A0%E5%85%A5%E4%B8%A4%E4%B8%AA%E6%8C%89%E9%92%AE%E5%B9%B6%E8%B0%83%E7%94%A8mutations%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95">5、在count.vue模板中加入两个按钮，并调用mutations中的方法。</a></li></ul></li></ul></li></ul><!-- tocstop --><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>1、elementUI</p><p>2、axios</p><p>3、router</p><p>4、vuex</p><h1 id="1elementui"><a href="#1-elementUI" class="headerlink" title="1.elementUI"></a>1.elementUI</h1><p>Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库</p><p>链接<a href="https://element.eleme.cn/#/zh-CN/component/table">https://element.eleme.cn/#/zh-CN/component/table</a></p><h2 id="11安装"><a href="#1-1-安装" class="headerlink" title="1.1.安装"></a>1.1.安装</h2><blockquote><p>npm i element-ui</p></blockquote><h2 id="12导入"><a href="#1-2-导入" class="headerlink" title="1.2.导入"></a>1.2.导入</h2><p>导入main.js  ——-主程序入口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ElementUI组件</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="comment">//ElementUI样式文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI);</span><br></pre></td></tr></table></figure><h2 id="13举个例子"><a href="#1-3-举个例子" class="headerlink" title="1.3.举个例子"></a>1.3.举个例子</h2><p>在hello.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，hello，&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">label</span>=<span class="string">&quot;1&quot;</span>&gt;</span>备选项<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">label</span>=<span class="string">&quot;2&quot;</span>&gt;</span>备选项<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="javascript">      radio:<span class="string">&quot;2&quot;</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2axios"><a href="#2-axios" class="headerlink" title="2.axios"></a>2.axios</h1><p><img src="/2021/03/09/vue2/1599893771678509.png"></p><p>Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库</p><p>链接<a href="https://element.eleme.cn/#/zh-CN/component/table">https://element.eleme.cn/#/zh-CN/component/table</a></p><h2 id="21安装"><a href="#2-1-安装" class="headerlink" title="2.1.安装"></a>2.1.安装</h2><blockquote><p>npm install axios</p></blockquote><h2 id="22导入"><a href="#2-2-导入" class="headerlink" title="2.2.导入"></a>2.2.导入</h2><p>导入main.js  ——-主程序入口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.prototype.$axios = axios;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span>  <span class="comment">//qs qs.stringify() 将对象 序列化成URL的形式，以&amp;进行拼接。</span></span><br><span class="line">Vue.prototype.$qs = qs</span><br></pre></td></tr></table></figure><p>qs是什么</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">qs.stringify() 将对象 序列化成URL的形式，以&amp;进行拼接。</span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>是正常类型的<span class="built_in">JSON</span>，请对比一下输出;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">&#x27;hehe&#x27;</span>,<span class="attr">age</span>:<span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">qs.stringify(a)</span><br><span class="line"><span class="comment">// &#x27;name=hehe&amp;age=10&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify(a)</span><br><span class="line"><span class="comment">// &#x27;&#123;&quot;name&quot;:&quot;hehe&quot;,&quot;age&quot;:10&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>简单来说qs是吧数据转化为键值对的形式，进行restful风风格的传输，而json更偏向于进行对象的传输，要更具后台服务器的接收格式进行相应的定制</p><h3 id="引入qs"><a href="#引入qs" class="headerlink" title="引入qs"></a>引入qs</h3><blockquote><p>npm i qs </p></blockquote><h2 id="23举个例子"><a href="#2-3-举个例子" class="headerlink" title="2.3.举个例子"></a>2.3.举个例子</h2><h3 id="1-axios-有很多请求方式具体可以看一下官网的api下面说一下最基本的使用方式"><a href="#1、axios-有很多请求方式，具体可以看一下官网的API，下面说一下最基本的使用方式：" class="headerlink" title="1、axios 有很多请求方式，具体可以看一下官网的API，下面说一下最基本的使用方式："></a>1、axios 有很多请求方式，具体可以看一下官网的API，下面说一下最基本的使用方式：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">  url:<span class="string">&#x27;http://127.0.0.1:8000/home/login&#x27;</span>,  <span class="comment">//这里写你要发请求的服务器url</span></span><br><span class="line">  method:<span class="string">&#x27;get&#x27;</span><span class="comment">//(默认是get请求)</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);    <span class="comment">//在控制台查看请求的数据</span></span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">axios(&#123;        </span><br><span class="line">  url:<span class="string">&#x27;http://127.0.0.1:8000/home/register&#x27;</span>,  <span class="comment">//这里写你要发请求的服务器url</span></span><br><span class="line">  params:&#123;      <span class="comment">//专门针对get请求的参数拼接,如果是post请求用 data:&#123;&#125;</span></span><br><span class="line">    type:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    page:</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);    <span class="comment">//在控制台查看请求的数据</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-我个人更喜欢调用封装方法的形式"><a href="#2、我个人更喜欢调用封装方法的形式" class="headerlink" title="2、我个人更喜欢调用封装方法的形式"></a>2、我个人更喜欢调用封装方法的形式</h3><blockquote><p>post</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>; <span class="comment">// 引入axios</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&quot;qs&quot;</span>; <span class="comment">// 引入qs模块，用来序列化post类型的数据</span></span><br><span class="line"><span class="comment">//metheds中</span></span><br><span class="line"> axios</span><br><span class="line">        .post(<span class="string">&quot;http://localhost:8888/user&quot;</span>, <span class="built_in">JSON</span>.stringify(kk), &#123;</span><br><span class="line">          headers: &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json;charset=UTF-8&quot;</span> &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (res.status == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">// to do</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="comment">// to do</span></span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>get</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>; <span class="comment">// 引入axios</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&quot;qs&quot;</span>; <span class="comment">// 引入qs模块，用来序列化post类型的数据</span></span><br><span class="line"><span class="comment">//metheds中</span></span><br><span class="line">axios</span><br><span class="line">            .get(<span class="string">&quot;http://localhost:8888/user&quot;</span>, &#123;</span><br><span class="line">              params: &#123; <span class="attr">name</span>: <span class="built_in">this</span>.$store.state.taken &#125;,</span><br><span class="line">            &#125;)</span><br><span class="line">            .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (res.status == <span class="number">200</span>) &#123;</span><br><span class="line">                 <span class="comment">// to do</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// to do</span></span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><h1 id="3-router"><a href="#3、router" class="headerlink" title="3、router"></a>3、router</h1><p>使用 Vue.js ，我们已经可以通过组合组件来组成应用程序，当你要把 Vue Router 添加进来，我们需要做的是，将组件 (components) 映射到路由 (routes)，然后告诉 Vue Router 在哪里渲染它们。</p><p><img src="/2021/03/09/vue2/image-20210409202008423.png"></p><h2 id="31安装"><a href="#3-1-安装" class="headerlink" title="3.1.安装"></a>3.1.安装</h2><p>现在vue-cli已经把router纳入新建vue项目的步骤中，直接可以选择该项，把router加入项目之中</p><p>当然你也可以手动引入</p><blockquote><p>npm install vue-router –save</p></blockquote><h2 id="32导入"><a href="#3-2-导入" class="headerlink" title="3.2.导入"></a>3.2.导入</h2><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span>  <span class="comment">//引入你的router文件</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    router,  <span class="comment">//这里要是用router</span></span><br><span class="line">    store,</span><br><span class="line">    components: &#123; App &#125;,</span><br><span class="line">    template: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>新建router.js文件（名字随意取）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&#x27;@/components/HelloWorld&#x27;</span></span><br><span class="line"><span class="keyword">import</span> first <span class="keyword">from</span> <span class="string">&#x27;@/components/first&#x27;</span></span><br><span class="line"><span class="keyword">import</span> index <span class="keyword">from</span> <span class="string">&#x27;@/components/index&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    <span class="comment">// mode: &#x27;history&#x27;,</span></span><br><span class="line">    routes: [&#123;</span><br><span class="line">            path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            name: <span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">            component: main,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">&#x27;/welcome&#x27;</span>,</span><br><span class="line">            name: <span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line">            component: welcome</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">&#x27;/admin&#x27;</span>,</span><br><span class="line">            name: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">            component: admin</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="33举个例子"><a href="#3-3-举个例子" class="headerlink" title="3.3.举个例子"></a>3.3.举个例子</h2><p>router-link跳转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt; </span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;one&quot;&gt;One&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;two&quot;&gt;Two&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>事件触发跳转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;footer_guide&quot;&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;guide_item&quot; :class&#x3D;&quot;&#123;on: &#39;&#x2F;msite&#39;&#x3D;&#x3D;&#x3D;$route.path&#125;&quot; @click&#x3D;&quot;goTo(&#39;&#x2F;msite&#39;)&quot;&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;item_icon&quot;&gt;</span><br><span class="line">        &lt;i class&#x3D;&quot;mintui mintui-shouye&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">      &lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span&gt;首页&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;guide_item&quot; :class&#x3D;&quot;&#123;on: &#39;&#x2F;profile&#39;&#x3D;&#x3D;&#x3D;$route.path&#125;&quot; @click&#x3D;&quot;goTo(&#39;&#x2F;profile&#39;)&quot;&gt;</span><br><span class="line">      &lt;span class&#x3D;&quot;item_icon&quot;&gt;</span><br><span class="line">        &lt;i class&#x3D;&quot;mintui mintui-my&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">      &lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span&gt;我的&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      goTo(path) &#123;</span><br><span class="line">        this.$router.replace(path)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>（高级）多级树形组件跳转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    &lt;component</span><br><span class="line">          :is&#x3D;&quot;this.$store.state.currentvue&quot;</span><br><span class="line">          class&#x3D;&quot;comp&quot;</span><br><span class="line">          :key&#x3D;&quot;this.$store.state.spaceName&quot;</span><br><span class="line">     &gt;&lt;&#x2F;component&gt;</span><br><span class="line"></span><br><span class="line">&lt;el-menu-item-group background-color&#x3D;&quot;#800000&quot;&gt;</span><br><span class="line">              &lt;!-- &lt;template slot&#x3D;&quot;title&quot;&gt;分组一&lt;&#x2F;template&gt; --&gt;</span><br><span class="line">              &lt;el-menu-item</span><br><span class="line">                v-for&#x3D;&quot;(child, i) in menu.child&quot;</span><br><span class="line">                :key&#x3D;&quot;i&quot;</span><br><span class="line">                :index&#x3D;&quot;menu.path + &#39;-&#39; + i&quot;</span><br><span class="line">                :class&#x3D;&quot;child.icon&quot;</span><br><span class="line">                @click&#x3D;&quot;mainChange(child.path, child.name, child.id)&quot;</span><br><span class="line">              &gt;</span><br><span class="line">                &#123;&#123; child.name &#125;&#125;&lt;&#x2F;el-menu-item</span><br><span class="line">              &gt;</span><br><span class="line">              &lt;!-- &lt;el-menu-item :index&#x3D;&quot;menu.id + &#39;-2&#39;&quot;&gt;选项2&lt;&#x2F;el-menu-item&gt; --&gt;</span><br><span class="line">            &lt;&#x2F;el-menu-item-group&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">mainChange</span>(<span class="params">path, name, id</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;mainChange&quot;</span>, path + <span class="string">&quot; &quot;</span> + name + <span class="string">&quot; &quot;</span> + id);</span><br><span class="line">  <span class="built_in">this</span>.$store.commit(<span class="string">&quot;changeCurrentvue&quot;</span>, path);</span><br><span class="line">  <span class="built_in">this</span>.$store.commit(<span class="string">&quot;changeSpaceName&quot;</span>, name);</span><br><span class="line">  <span class="built_in">this</span>.$store.commit(<span class="string">&quot;changeId&quot;</span>, id);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="4-vuex"><a href="#4、vuex" class="headerlink" title="4、vuex"></a>4、vuex</h1><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 <a href="https://github.com/vuejs/vue-devtools">devtools extension (opens new window)</a>，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p><h2 id="41安装"><a href="#4-1-安装" class="headerlink" title="4.1.安装"></a>4.1.安装</h2><blockquote><p>   npm install vuex –save</p></blockquote><h2 id="32导入"><a href="#3-2-导入-1" class="headerlink" title="3.2.导入"></a>3.2.导入</h2><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/store.js&#x27;</span> <span class="comment">//导入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    router, </span><br><span class="line">    store,   <span class="comment">//这里要是用vuex</span></span><br><span class="line">    components: &#123; App &#125;,</span><br><span class="line">    template: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>新建store.js文件（名字随意取）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123; <span class="comment">//状态管理 全局变量  this.$store.state.spaceName</span></span><br><span class="line">        data: <span class="number">0</span>,</span><br><span class="line">        avue: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        spaceName: <span class="string">&#x27;详情&#x27;</span>,</span><br><span class="line">        currentvue: <span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line">        router: <span class="string">&#x27;/main&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123; <span class="comment">//修改state   this.$store.commit(&#x27;changeDataMut&#x27;,10)</span></span><br><span class="line">        <span class="function"><span class="title">changeavue</span>(<span class="params">state, params</span>)</span> &#123;</span><br><span class="line">            state.avue = params</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">changenickname</span>(<span class="params">state, params</span>)</span> &#123;</span><br><span class="line">            state.nickname = params</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123; <span class="comment">//异步操作   this.$store.dispatch(&#x27;changeDataAct&#x27;,100)</span></span><br><span class="line">        <span class="function"><span class="title">changeDataAct</span>(<span class="params">context, params</span>)</span> &#123; <span class="comment">//context是一个对象，从它里面把咱们需要的commit方法解构出来</span></span><br><span class="line">            <span class="keyword">let</span> &#123; commit &#125; = context</span><br><span class="line">            commit(<span class="string">&#x27;changeDataMut&#x27;</span>, params)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123; <span class="comment">//计算属性   &#123;&#123;this.$store.getters.doubleGet&#125;&#125;</span></span><br><span class="line">        <span class="function"><span class="title">doubleGet</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> state.data * <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    modules: &#123; <span class="comment">//模块</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><h2 id="33举个例子"><a href="#3-3-举个例子-1" class="headerlink" title="3.3.举个例子"></a>3.3.举个例子</h2><h3 id="1-现在我们storejs文件里增加一个常量对象-storejs文件就是我们在引入vuex时的那个文件"><a href="#1、现在我们store-js文件里增加一个常量对象。store-js文件就是我们在引入vuex时的那个文件。" class="headerlink" title="1、现在我们store.js文件里增加一个常量对象。store.js文件就是我们在引入vuex时的那个文件。"></a>1、现在我们store.js文件里增加一个常量对象。store.js文件就是我们在引入vuex时的那个文件。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const state &#x3D; &#123;</span><br><span class="line">    count:1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-用export-default-封装代码让外部可以引用"><a href="#2、用export-default-封装代码，让外部可以引用。" class="headerlink" title="2、用export default 封装代码，让外部可以引用。"></a>2、用export default 封装代码，让外部可以引用。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">    state</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-新建一个vue的模板位置在components文件夹下名字叫countvue-在模板中我们引入我们刚建的storejs文件并在模板中用输出count-的值"><a href="#3、新建一个vue的模板，位置在components文件夹下，名字叫count-vue。在模板中我们引入我们刚建的store-js文件，并在模板中用输出count-的值。" class="headerlink" title="3、新建一个vue的模板，位置在components文件夹下，名字叫count.vue。在模板中我们引入我们刚建的store.js文件，并在模板中用输出count 的值。"></a>3、新建一个vue的模板，位置在components文件夹下，名字叫count.vue。在模板中我们引入我们刚建的store.js文件，并在模板中用输出count 的值。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;msg&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;hr&#x2F;&gt;</span><br><span class="line">        &lt;h3&gt;&#123;&#123;$store.state.count&#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import store from &#39;@&#x2F;vuex&#x2F;store&#39;</span><br><span class="line">    export default&#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                msg:&#39;Hello Vuex&#39;,</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        store</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="4-在storejs文件中加入两个改变state的方法"><a href="#4、在store-js文件中加入两个改变state的方法。" class="headerlink" title="4、在store.js文件中加入两个改变state的方法。"></a>4、在store.js文件中加入两个改变state的方法。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const mutations&#x3D;&#123;</span><br><span class="line">    add(state)&#123;</span><br><span class="line">        state.count+&#x3D;1;</span><br><span class="line">    &#125;,</span><br><span class="line">    reduce(state)&#123;</span><br><span class="line">        state.count-&#x3D;1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的mutations是固定的写法，意思是改变的，所以你先不用着急，只知道我们要改变state的数值的方法，必须写在mutations里就可以了。</p><h3 id="5-在countvue模板中加入两个按钮并调用mutations中的方法"><a href="#5、在count-vue模板中加入两个按钮，并调用mutations中的方法。" class="headerlink" title="5、在count.vue模板中加入两个按钮，并调用mutations中的方法。"></a>5、在count.vue模板中加入两个按钮，并调用mutations中的方法。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;$store.commit(&#39;add&#39;)&quot;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;$store.commit(&#39;reduce&#39;)&quot;&gt;-&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>这样进行预览就可以实现对vuex中的count进行加减了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;vue的基本组件的引入和使用，包括elementui（ui界面组件）、axios（通信组件）、router（路由组件）、vuex（全局数据共享组件）等&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="http://zhouzhe111.github.io/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>vue的初步入门及使用</title>
    <link href="http://zhouzhe111.github.io/2021/03/09/vue1/"/>
    <id>http://zhouzhe111.github.io/2021/03/09/vue1/</id>
    <published>2021-03-09T11:54:03.000Z</published>
    <updated>2021-04-09T14:57:21.344Z</updated>
    
    <content type="html"><![CDATA[<p>Vue  是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href="https://cn.vuejs.org/v2/guide/single-file-components.html">现代化的工具链</a>以及各种<a href="https://github.com/vuejs/awesome-vue#libraries--plugins">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><span id="more"></span><hr><!-- toc --><ul><li><a href="#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="#1%E7%8E%AF%E5%A2%83">1.环境</a><ul><li><a href="#11%E5%AE%89%E8%A3%85nodejs">1.1.安装nodejs</a></li><li><a href="#12%E4%BD%BF%E7%94%A8%E9%95%9C%E5%83%8F%E5%8F%AF%E9%80%89">1.2.使用镜像（可选）</a></li><li><a href="#13%E5%AE%89%E8%A3%85vue-cli%E8%84%9A%E6%89%8B%E6%9E%B6%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7">1.3.安装vue-cli脚手架构建工具</a></li></ul></li><li><a href="#2%E6%96%B0%E5%BB%BAvue%E9%A1%B9%E7%9B%AE">2.新建vue项目</a><ul><li><a href="#21%E6%96%B0%E5%BB%BA">2.1.新建</a></li><li><a href="#22%E9%85%8D%E7%BD%AE">2.2.配置</a></li><li><a href="#23%E5%AE%89%E8%A3%85%E7%9B%B8%E5%85%B3%E4%BE%9D%E8%B5%96">2.3.安装相关依赖</a></li><li><a href="#24%E8%BF%90%E8%A1%8C">2.4.运行</a></li></ul></li><li><a href="#3%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8">3.简单入门</a></li><li><a href="#4%E6%8C%87%E4%BB%A4">4.指令</a><ul><li><a href="#1-v-test-%E5%92%8C-v-html">1. v-test 和 v-html</a></li><li><a href="#2v-bind">2.v-bind</a></li><li><a href="#3v-model">3.v-model</a></li><li><a href="#4v-on">4.v-on</a></li><li><a href="#5-v-for">5 v-for</a></li><li><a href="#6v-else-if">6.v-else-if</a></li></ul></li><li><a href="#5%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8">5.计算属性和监听器</a><ul><li><a href="#1%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8">1.计算属性和监听器</a></li><li><a href="#2%E7%BB%84%E4%BB%B6%E5%8C%96">2.组件化</a></li></ul></li><li><a href="#6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">6.生命周期</a></li><li><a href="#7%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91">7.模块化开发</a><ul><li><a href="#71%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85">7.1.全局安装</a><ul><li><a href="#711%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85webpack">7.1.1.全局安装webpack</a></li><li><a href="#711%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85vue%E8%84%9A%E6%89%8B%E6%9E%B6">7.1.1.全局安装vue脚手架</a></li></ul></li><li><a href="#72%E5%9C%A8%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E5%A4%B9%E8%BF%9B%E5%85%A5cmd">7.2.在项目文件夹进入cmd</a></li><li><a href="#73vscode%E6%89%93%E5%BC%80">7.3.vscode打开</a></li></ul></li><li><a href="#8%E7%AE%80%E5%8D%95%E6%B7%BB%E5%8A%A0%E9%A1%B5%E9%9D%A2%E4%BB%A5%E5%8F%8A%E8%B7%B3%E8%BD%AC">8.简单添加页面以及跳转</a><ul><li><a href="#81src-%E7%BB%93%E6%9E%84%E7%AE%80%E4%BB%8B">8.1.src 结构简介</a></li><li><a href="#82%E6%B7%BB%E5%8A%A0%E8%B7%B3%E8%BD%AC">8.2.添加跳转</a><ul><li><a href="#821%E5%88%9B%E5%BB%BA-hellovue">8.2.1.创建 Hello.vue</a></li><li><a href="#822%E9%85%8D%E7%BD%AE%E8%B7%AF%E7%94%B1-indexjs">8.2.2.配置路由 —   index.js</a></li><li><a href="#823%E6%B7%BB%E5%8A%A0%E8%B7%B3%E8%BD%AC">8.2.3.添加跳转</a></li></ul></li></ul></li><li><a href="#9element">9.element</a><ul><li><a href="#91%E5%AE%89%E8%A3%85">9.1.安装</a></li><li><a href="#92%E5%AF%BC%E5%85%A5">9.2.导入</a></li><li><a href="#93%E4%B8%BE%E4%B8%AA%E4%BE%8B%E5%AD%90">9.3.举个例子</a></li></ul></li><li><a href="#10%E7%BB%91%E5%AE%9Aurl%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE">10.绑定url传输数据</a><ul><li><a href="#101template-%E4%B8%AD%E7%BB%91%E5%AE%9A-data-%E6%95%B0%E6%8D%AE%E6%A8%A1%E6%9D%BF">10.1.template 中绑定 data 数据模板</a></li><li><a href="#102script-%E4%B8%AD-methods-%E7%BB%91%E5%AE%9A-url%E5%9B%9E%E5%88%B0%E5%87%BD%E6%95%B0-then-%E4%B8%AD%E6%8A%8A-%E8%BF%94%E5%9B%9E%E7%9A%84%E6%95%B0%E6%8D%AE-data-%E7%BB%91%E5%AE%9A-%E5%88%B0-menus">10.2.script 中 methods 绑定 url，回到函数  then 中把 返回的数据 data  绑定 到 menus</a></li><li><a href="#103script-%E4%B8%AD-data">10.3.script 中 data</a></li><li><a href="#104%E9%80%89%E6%8B%A9%E5%8F%91%E9%80%81%E7%9A%84%E6%97%B6%E9%97%B4">10.4.选择发送的时间</a></li></ul></li></ul><!-- tocstop --><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>官方指南假设你已了解关于 HTML、CSS 和 JavaScript 的中级知识。如果你刚开始学习前端开发，将框架作为你的第一步可能不是最好的主意——掌握好基础知识再来吧！之前有其它框架的使用经验会有帮助，但这不是必需的。</p><h1 id="1环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h1><h2 id="11安装nodejs"><a href="#1-1-安装nodejs" class="headerlink" title="1.1.安装nodejs"></a>1.1.安装nodejs</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack <span class="built_in">test</span> <span class="comment">#test 是新建的项目名称，自己定义</span></span><br></pre></td></tr></table></figure><p>node -v，如果出现版本信息即表示安装成功</p><p>直接输入npm -v 就能查看到版本信息，若出现版本信息则表示npm能正常使用</p><h2 id="12使用镜像可选"><a href="#1-2-使用镜像（可选）" class="headerlink" title="1.2.使用镜像（可选）"></a>1.2.使用镜像（可选）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="13安装vue-cli脚手架构建工具"><a href="#1-3-安装vue-cli脚手架构建工具" class="headerlink" title="1.3.安装vue-cli脚手架构建工具"></a>1.3.安装vue-cli脚手架构建工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli </span><br></pre></td></tr></table></figure><h1 id="2新建vue项目"><a href="#2-新建vue项目" class="headerlink" title="2.新建vue项目"></a>2.新建vue项目</h1><h2 id="21新建"><a href="#2-1-新建" class="headerlink" title="2.1.新建"></a>2.1.新建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack <span class="built_in">test</span> <span class="comment">#test 是新建的项目名称，自己定义</span></span><br></pre></td></tr></table></figure><h2 id="22配置"><a href="#2-2-配置" class="headerlink" title="2.2.配置"></a>2.2.配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">? Project name test  <span class="comment">//项目名</span></span><br><span class="line">? Project description A Vue.js project   </span><br><span class="line">? Author </span><br><span class="line">? Vue build standalone</span><br><span class="line">? Install vue-router? Yes </span><br><span class="line">? Use ESLint to lint your code? No  <span class="comment">// 为了避免用严格模式，防止报许多错误</span></span><br><span class="line">? <span class="built_in">Set</span> up unit tests No <span class="comment">//避免严格模式</span></span><br><span class="line">? Setup e2e tests <span class="keyword">with</span> Nightwatch? No <span class="comment">//避免严格模式</span></span><br><span class="line">? Should we run <span class="string">`npm install`</span> <span class="keyword">for</span> you after the project has been created? (recommended)   npm</span><br></pre></td></tr></table></figure><h2 id="23安装相关依赖"><a href="#2-3-安装相关依赖" class="headerlink" title="2.3.安装相关依赖"></a>2.3.安装相关依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">切换到 新项目文件夹下：</span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="24运行"><a href="#2-4-运行" class="headerlink" title="2.4.运行"></a>2.4.运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="/2021/03/09/vue1/image-20210312150206624.png"></p><p>这样就成功了</p><h1 id="3简单入门"><a href="#3-简单入门" class="headerlink" title="3.简单入门"></a>3.简单入门</h1><blockquote><p>shift+1 快速创建html模板</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;num&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;num++&quot;</span>&gt;</span>点赞<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;cancle&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;,非常帅,&#123;&#123;num&#125;&#125; 点赞<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//1、声明式渲染</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                name: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line">                num: 1</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">cancle</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.num--;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        <span class="comment">//2、双向绑定，模型变化</span></span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="comment">//3.事件处理</span></span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="comment">//4、v-xx指令</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4指令"><a href="#4-指令" class="headerlink" title="4.指令"></a>4.指令</h1><h2 id="1-v-test-和-v-html"><a href="#1-v-test-和-v-html" class="headerlink" title="1. v-test 和 v-html"></a>1. v-test 和 v-html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 不解析为html元素 --&gt;</span></span><br><span class="line">        &#123;&#123;msg&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        &#123;&#123;hello()&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 解析为html元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 不解析为html元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../node_modules\vue\dist\vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                msg: &quot;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&quot;</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="string">&quot;word&quot;</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2v-bind"><a href="#2-v-bind" class="headerlink" title="2.v-bind"></a>2.v-bind</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;link&quot;</span>&gt;</span>gogogo<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;active:isActive,&#x27;text-danger&#x27;:hasError&#125;&quot;</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../node_modules\vue\dist\vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                link: <span class="string">&quot;http://www.baidu.com&quot;</span>,</span></span><br><span class="line"><span class="javascript">                isActive: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                hasError: <span class="literal">true</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3v-model"><a href="#3-v-model" class="headerlink" title="3.v-model"></a>3.v-model</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        精通的语言：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;language&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span>java<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;language&quot;</span> <span class="attr">value</span>=<span class="string">&quot;php&quot;</span>&gt;</span>php<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;language&quot;</span> <span class="attr">value</span>=<span class="string">&quot;python&quot;</span>&gt;</span>python<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        选中了&#123;&#123;language.join(&quot;,&quot;)&#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../node_modules\vue\dist\vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                language: []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4v-on"><a href="#4-v-on" class="headerlink" title="4.v-on"></a>4.v-on</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;num++&quot;</span>&gt;</span>点赞<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;cancle&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>有&#123;&#123;num&#125;&#125;个赞<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事件修饰符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid red;padding: 20px;&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">            大div</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid blue;padding: 20px;&quot;</span> @<span class="attr">click.stop</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">                小div<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;htpp://www.baidu.com&quot;</span>&gt;</span>去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;num&quot;</span> <span class="attr">v-on:keyup.up</span>=<span class="string">&quot;num+=2&quot;</span> @<span class="attr">keyup.dowm</span>=<span class="string">&quot;num-=2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        提示：</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                num: 1</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">cancle</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.num--;</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;点击了&quot;</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-v-for"><a href="#5-v-for" class="headerlink" title="5 v-for"></a>5 v-for</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(user,index) in users&quot;</span> <span class="attr">::key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">                索引： &#123;&#123;index&#125;&#125; &#123;&#123;user.name&#125;&#125; &#123;&#123;user.gender&#125;&#125; &#123;&#123;user.age&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                对象信息：</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;(v,k,i) in user&quot;</span>&gt;</span>&#123;&#123;v&#125;&#125; &#123;&#123;k&#125;&#125; &#123;&#123;i&#125;&#125;;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                users: [&#123; <span class="attr">name</span>: <span class="string">&quot;柳岩&quot;</span>, <span class="attr">gender</span>: <span class="string">&quot;女&quot;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;,</span></span><br><span class="line"><span class="javascript">                &#123; <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">gender</span>: <span class="string">&quot;男&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span></span><br><span class="line"><span class="javascript">                &#123; <span class="attr">name</span>: <span class="string">&quot;范冰冰&quot;</span>, <span class="attr">gender</span>: <span class="string">&quot;女&quot;</span>, <span class="attr">age</span>: <span class="number">24</span> &#125;,</span></span><br><span class="line"><span class="javascript">                &#123; <span class="attr">name</span>: <span class="string">&quot;刘亦菲&quot;</span>, <span class="attr">gender</span>: <span class="string">&quot;女&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span></span><br><span class="line"><span class="javascript">                &#123; <span class="attr">name</span>: <span class="string">&quot;古力娜扎&quot;</span>, <span class="attr">gender</span>: <span class="string">&quot;女&quot;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;]</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">cancle</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.num--;</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;点击了&quot;</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6v-else-if"><a href="#6-v-else-if" class="headerlink" title="6.v-else-if"></a>6.v-else-if</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;random=Math.random()&quot;</span>&gt;</span>点我啊<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;random&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;random&gt;=0.75&quot;</span>&gt;</span><span class="symbol">&amp;gt;</span>0.75<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;random&gt;=0.5&quot;</span>&gt;</span><span class="symbol">&amp;gt;</span>0.5<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;random&gt;=0.25&quot;</span>&gt;</span><span class="symbol">&amp;gt;</span>0.25<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span><span class="symbol">&amp;gt;</span>0.2 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                random: 1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="5计算属性和监听器"><a href="#5-计算属性和监听器" class="headerlink" title="5.计算属性和监听器"></a>5.计算属性和监听器</h1><h2 id="1计算属性和监听器"><a href="#1-计算属性和监听器" class="headerlink" title="1.计算属性和监听器"></a>1.计算属性和监听器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>西游记：价格：&#123;&#123;p1&#125;&#125;，数量：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;pn1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>水浒传：价格：&#123;&#123;p2&#125;&#125;，数量：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;pn2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>总价：&#123;&#123;tp&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                p1: 88.88,</span><br><span class="line">                p2: 99.99,</span><br><span class="line">                pn1: 1,</span><br><span class="line">                pn2: 2,</span><br><span class="line"><span class="javascript">                msg: <span class="string">&quot;&quot;</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            computed: &#123;</span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">tp</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">this</span>.p1 * <span class="built_in">this</span>.pn1 + <span class="built_in">this</span>.p2 * <span class="built_in">this</span>.pn2;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            watch: &#123;</span><br><span class="line"><span class="javascript">                pn1: <span class="function"><span class="keyword">function</span> (<span class="params">newV, oldV</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// alert(&quot;newV :&quot; + newV + &quot; oldV :&quot; + oldV);</span></span></span><br><span class="line">                    if (newV &gt;= 3) &#123;</span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.msg = <span class="string">&quot;超过最大数&quot;</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.pn1 = <span class="number">3</span>;</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.msg = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2组件化"><a href="#2-组件化" class="headerlink" title="2.组件化"></a>2.组件化</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>点击了 &#123;&#123;count&#125;&#125; 次<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">couter</span>&gt;</span><span class="tag">&lt;/<span class="name">couter</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">buttn-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">buttn-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//1、全局声明</span></span></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">&quot;couter&quot;</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            template: ` <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>点击了 </span><span class="template-variable">&#123;&#123;<span class="name">count</span>&#125;&#125;</span><span class="xml"> 次<span class="tag">&lt;/<span class="name">button</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;    <span class="comment">//加上括号表示返回一个新的对象，所以每个按钮的count值单独计算</span></span></span><br><span class="line">                    count: 1</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//2、局部声明</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> buttnCounter = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            template: ` <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>点击了 </span><span class="template-variable">&#123;&#123;<span class="name">count</span>&#125;&#125;</span><span class="xml"> 次~~~~~~<span class="tag">&lt;/<span class="name">button</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;    <span class="comment">//加上括号表示返回一个新的对象，所以每个按钮的count值单独计算</span></span></span><br><span class="line">                    count: 1</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                count: 1</span><br><span class="line">            &#125;,</span><br><span class="line">            components:&#123;</span><br><span class="line"><span class="javascript">                <span class="string">&#x27;buttn-counter&#x27;</span>:buttnCounter</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="6生命周期"><a href="#6-生命周期" class="headerlink" title="6.生命周期"></a>6.生命周期</h1><p>略</p><h1 id="7模块化开发"><a href="#7-模块化开发" class="headerlink" title="7.模块化开发"></a>7.模块化开发</h1><h2 id="71全局安装"><a href="#7-1-全局安装" class="headerlink" title="7.1.全局安装"></a>7.1.全局安装</h2><h3 id="711全局安装webpack"><a href="#7-1-1-全局安装webpack" class="headerlink" title="7.1.1.全局安装webpack"></a>7.1.1.全局安装webpack</h3><blockquote><p>进入cmd</p><p>npm install webpack -g</p></blockquote><h3 id="711全局安装vue脚手架"><a href="#7-1-1-全局安装vue脚手架" class="headerlink" title="7.1.1.全局安装vue脚手架"></a>7.1.1.全局安装vue脚手架</h3><blockquote><p>进入cmd</p><p>npm install -g @vue/cli-init</p><p>上面这个不行就用下面这个</p><p>npm install -g vue-cli</p></blockquote><h2 id="72在项目文件夹进入cmd"><a href="#7-2-在项目文件夹进入cmd" class="headerlink" title="7.2.在项目文件夹进入cmd"></a>7.2.在项目文件夹进入cmd</h2><blockquote><p>vue init webpack    + 文件夹名字</p><p>如</p><p>vue init webpack vue-demo</p></blockquote><p><img src="/2021/03/09/vue1/image-20200922170144663.png"></p><blockquote><p>cd vue-demo</p><p>npm run dev</p></blockquote><h2 id="73vscode打开"><a href="#7-3-vscode打开" class="headerlink" title="7.3.vscode打开"></a>7.3.vscode打开</h2><p><img src="/2021/03/09/vue1/image-20200922180717567.png"></p><p>项目文件组织结构：</p><blockquote><p>build: 跟打包工具webpack有关的代码</p><p>config:配置</p><p>node_modules:跟项目有关的依赖</p><p>src:你懂得</p><p>static:你懂得</p><p>babelrc:babel相关</p><p>index.html:主入口界面</p><p>packagejson:npm依赖包相关信息</p></blockquote><h1 id="8简单添加页面以及跳转"><a href="#8-简单添加页面以及跳转" class="headerlink" title="8.简单添加页面以及跳转"></a>8.简单添加页面以及跳转</h1><h2 id="81src-结构简介"><a href="#8-1-src-结构简介" class="headerlink" title="8.1.src 结构简介"></a>8.1.src 结构简介</h2><p><img src="/2021/03/09/vue1/image-20200922183329329.png"></p><blockquote><p>assets—存放vue图标</p><p>components—存放vue组件</p><p>—template:模板</p><p>—script</p><p>—style</p><p>router:路由     —简单来说就是请求地址映射</p><p>App.vue:首页模板</p><p>main.js: 主程序入口</p></blockquote><h2 id="82添加跳转"><a href="#8-2-添加跳转" class="headerlink" title="8.2.添加跳转"></a>8.2.添加跳转</h2><h3 id="821创建-hellovue"><a href="#8-2-1-创建-Hello-vue" class="headerlink" title="8.2.1.创建 Hello.vue"></a>8.2.1.创建 Hello.vue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;你好，hello，&#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name:&quot;张三&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;&quot;&gt;</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="822配置路由-indexjs"><a href="#8-2-2-配置路由-—-index-js" class="headerlink" title="8.2.2.配置路由  —   index.js"></a>8.2.2.配置路由  —   index.js</h3><p>导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">&#x27;@/components/Hello&#x27;</span></span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">&#x27;/hello&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line">  component: Hello</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&#x27;@/components/HelloWorld&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">&#x27;@/components/Hello&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="line">      component: HelloWorld</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/hello&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line">      component: Hello</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="823添加跳转"><a href="#8-2-3-添加跳转" class="headerlink" title="8.2.3.添加跳转"></a>8.2.3.添加跳转</h3><blockquote><p>使用    router-link</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;img src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;hello&quot;&gt;去hello&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;&quot;&gt;去首页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-view&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><h1 id="9element"><a href="#9-element" class="headerlink" title="9.element"></a>9.element</h1><h2 id="91安装"><a href="#9-1-安装" class="headerlink" title="9.1.安装"></a>9.1.安装</h2><blockquote><p>npm i element-ui</p></blockquote><h2 id="92导入"><a href="#9-2-导入" class="headerlink" title="9.2.导入"></a>9.2.导入</h2><p>导入main.js  ——-主程序入口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ElementUI组件</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="comment">//ElementUI样式文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI);</span><br></pre></td></tr></table></figure><h2 id="93举个例子"><a href="#9-3-举个例子" class="headerlink" title="9.3.举个例子"></a>9.3.举个例子</h2><p>在hello.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，hello，&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">label</span>=<span class="string">&quot;1&quot;</span>&gt;</span>备选项<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">label</span>=<span class="string">&quot;2&quot;</span>&gt;</span>备选项<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="javascript">      radio:<span class="string">&quot;2&quot;</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="10绑定url传输数据"><a href="#10-绑定url传输数据" class="headerlink" title="10.绑定url传输数据"></a>10.绑定url传输数据</h1><h2 id="101template-中绑定-data-数据模板"><a href="#10-1-template-中绑定-data-数据模板" class="headerlink" title="10.1.template 中绑定 data 数据模板"></a>10.1.template 中绑定 data 数据模板</h2><blockquote><p>将 menus 绑定为 嵌入的数据</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-tree :data&#x3D;&quot;menus&quot; :props&#x3D;&quot;defaultProps&quot; @node-click&#x3D;&quot;handleNodeClick&quot;&gt;&lt;&#x2F;el-tree&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><h2 id="102script-中-methods-绑定-url回到函数-then-中把-返回的数据-data-绑定-到-menus"><a href="#10-2-script-中-methods-绑定-url，回到函数-then-中把-返回的数据-data-绑定-到-menus" class="headerlink" title="10.2.script 中 methods 绑定 url，回到函数  then 中把 返回的数据 data  绑定 到 menus"></a>10.2.script 中 methods 绑定 url，回到函数  then 中把 返回的数据 data  绑定 到 menus</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">......   </span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleNodeClick(data) &#123;</span><br><span class="line">      console.log(data);</span><br><span class="line">    &#125;,</span><br><span class="line">    getMenus() &#123;</span><br><span class="line">      this.$http(&#123;</span><br><span class="line">        url: this.$http.adornUrl(&quot;&#x2F;product&#x2F;category&#x2F;list&#x2F;tree&quot;),</span><br><span class="line">        method: &quot;get&quot;</span><br><span class="line">      &#125;).then((&#123;data&#125;)&#x3D;&gt;&#123;</span><br><span class="line">          console.log(&quot;成功&quot;,data.data);</span><br><span class="line">          this.menus &#x3D; data.data;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">......    </span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="103script-中-data"><a href="#10-3-script-中-data" class="headerlink" title="10.3.script 中 data"></a>10.3.script 中 data</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">......   </span><br><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      menus: [],   &#x2F;&#x2F;把获得的数据和要绑定的组件 绑定，与 template 组件同名</span><br><span class="line">      defaultProps: &#123; </span><br><span class="line">        children: &quot;children&quot;,    &#x2F;&#x2F;数据</span><br><span class="line">        label: &quot;name&quot;,           &#x2F;&#x2F;第一行的显示头</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">      ......    </span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="104选择发送的时间"><a href="#10-4-选择发送的时间" class="headerlink" title="10.4.选择发送的时间"></a>10.4.选择发送的时间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">......   </span><br><span class="line">  &#x2F;&#x2F;生命周期 - 创建完成（可以访问当前this实例）</span><br><span class="line">  created() &#123;       </span><br><span class="line">      this.getMenus();    &#x2F;&#x2F;表示在这个vue组件的（创建完成）这个轴命周期时刻 发送url获得数据</span><br><span class="line">  &#125;,</span><br><span class="line">......    </span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><img src="/2021/03/09/vue1/image-20200923224758168.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Vue  是一套用于构建用户界面的&lt;strong&gt;渐进式框架&lt;/strong&gt;。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与&lt;a href=&quot;https://cn.vuejs.org/v2/guide/single-file-components.html&quot;&gt;现代化的工具链&lt;/a&gt;以及各种&lt;a href=&quot;https://github.com/vuejs/awesome-vue#libraries--plugins&quot;&gt;支持类库&lt;/a&gt;结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。&lt;/p&gt;</summary>
    
    
    
    <category term="vue" scheme="http://zhouzhe111.github.io/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>springcloud 简单入门，以及基本组件的使用</title>
    <link href="http://zhouzhe111.github.io/2021/03/09/springcloud1/"/>
    <id>http://zhouzhe111.github.io/2021/03/09/springcloud1/</id>
    <published>2021-03-09T11:43:13.000Z</published>
    <updated>2021-04-09T13:41:18.058Z</updated>
    
    <content type="html"><![CDATA[<p>springcloud 简单入门，以及基本组件的使用。</p><span id="more"></span><hr><!-- toc --><ul><li><a href="#%E5%89%8D%E8%A8%80">前言</a></li><li><a href="#1-springcloud-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA">1、springcloud 环境搭建</a><ul><li><a href="#11-%E7%88%B6%E5%B7%A5%E7%A8%8Bproject">1.1、父工程（project）</a><ul><li><a href="#111-%E7%8E%AF%E5%A2%83">1.1.1、环境</a><ul><li><a href="#1111-site%E9%AA%A8%E6%9E%B6jdk8">1.1.1.1、site骨架，jdk8</a></li><li><a href="#1112-%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F%E9%80%89%E6%8B%A9utf8%E5%A6%82%E6%9E%9C%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98%E4%BC%9A%E5%BE%88%E9%BA%BB%E7%83%A6">1.1.1.2、编码格式选择utf8，如果出现问题会很麻烦</a></li><li><a href="#1113-%E5%BC%80%E5%90%AF%E6%B3%A8%E8%A7%A3%E7%94%9F%E6%95%88%E6%BF%80%E6%B4%BB">1.1.1.3、开启注解生效激活</a></li><li><a href="#1114-java%E7%BC%96%E8%AF%91%E9%80%89%E6%8B%A918%E9%BB%98%E8%AE%A4%E7%9A%84%E4%BD%8E%E7%89%88%E6%9C%AC%E4%BC%9A%E5%AF%BC%E8%87%B4%E5%87%BA%E9%94%99%E6%AF%94%E5%A6%82jdk6%E4%B8%8D%E6%94%AF%E6%8C%81%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%BB%A7%E6%89%BFoverride">1.1.1.4、java编译选择1.8，默认的低版本会导致出错（比如jdk6不支持接口的继承@Override</a></li><li><a href="#1115-%E9%80%89%E5%81%9A%E4%B8%8D%E6%98%BE%E7%A4%BA-idea-%E7%AD%89%E7%94%A8%E4%B8%8D%E5%88%B0%E7%9A%84%E6%96%87%E4%BB%B6-%E5%8F%AF%E4%BB%A5%E5%9C%A8%E4%B8%8B%E9%9D%A2-%E6%B7%BB%E5%8A%A0-ideaiml">1.1.1.5、（选做）不显示 .idea 等用不到的文件  可以在下面  添加    *.idea;*.iml;</a></li></ul></li><li><a href="#112-pom%E9%85%8D%E7%BD%AE">1.1.2、pom配置</a><ul><li><a href="#1121-%E8%BF%99%E6%98%AF%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%97%B6%E4%BA%A7%E7%94%9F%E7%9A%84">1.1.2.1、这是创建项目时产生的</a></li><li><a href="#1122-%E9%9C%80%E8%A6%81%E6%B7%BB%E5%8A%A0%E7%9A%84">1.1.2.2、需要添加的</a></li></ul></li><li><a href="#113-%E8%B7%B3%E8%BF%87%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95">1.1.3、跳过单元测试</a></li><li><a href="#114-%E9%80%89%E5%8F%AF%E4%BB%A5%E5%88%A0%E9%99%A4%E7%88%B6%E5%B7%A5%E7%A8%8B%E7%9A%84src%E6%96%87%E4%BB%B6%E5%A4%B9%E7%94%A8%E4%B8%8D%E5%88%B0">1.1.4、（选）可以删除父工程的src文件夹（用不到）</a></li></ul></li><li><a href="#12-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%9D%97">1.2、微服务模块</a><ul><li><a href="#121-%E9%80%89%E4%B8%AD%E7%88%B6%E5%B7%A5%E7%A8%8B%E5%8F%B3%E9%94%AE%E6%96%B0%E5%BB%BAmodulejdk8%E5%88%AB%E5%BF%98%E4%BA%86">1.2.1、选中父工程，右键新建module，jdk8别忘了</a></li><li><a href="#122-%E5%A1%AB%E5%86%99%E5%90%8D%E5%AD%97finish">1.2.2、填写名字，finish</a></li><li><a href="#123-%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96">1.2.3、添加依赖</a></li><li><a href="#124-%E5%86%99yml-%E6%88%96%E8%80%85-properties">1.2.4、写YML 或者   properties</a></li><li><a href="#125-%E5%90%AF%E5%8A%A8%E7%B1%BB">1.2.5、启动类</a></li><li><a href="#126-%E4%B8%9A%E5%8A%A1%E7%B1%BB">1.2.6、业务类</a><ul><li><a href="#1261-%E5%BB%BA%E8%A1%A8sql">1.2.6.1、建表SQL</a></li><li><a href="#1262-entities">1.2.6.2、entities</a><ul><li><a href="#12621-payment%E5%AE%9E%E4%BD%93%E7%B1%BB">1.2.6.2.1、Payment实体类</a></li><li><a href="#12622-commonresult%E5%B0%81%E8%A3%85%E7%B1%BB%E7%94%A8%E4%BA%8E%E8%BF%94%E5%9B%9E%E7%BB%99%E5%89%8D%E7%AB%AF%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BF%A1%E6%81%AF%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB">1.2.6.2.2、CommonResult封装类，用于返回给前端的数据信息（前后端分离）</a></li></ul></li><li><a href="#1263-dao%E7%B1%BB-%E4%BD%BF%E7%94%A8mapper%E6%B3%A8%E8%A7%A3%E6%8A%8A%E8%BF%99%E4%B8%AAdao%E4%BA%A4%E7%B5%A6spring%E7%AE%A1%E7%90%86">1.2.6.3、dao类 使用@Mapper注解，把这个DAO交給Spring管理</a></li><li><a href="#1264-service">1.2.6.4、Service</a><ul><li><a href="#12641-paymentservice%E6%8E%A5%E5%8F%A3">1.2.6.4.1、PaymentService接口</a></li><li><a href="#12642-paymentserviceimpl%E5%AE%9E%E7%8E%B0%E7%B1%BB%E7%BB%A7%E6%89%BFpaymentservice%E6%8E%A5%E5%8F%A3">1.2.6.4.2、PaymentServiceImpl实现类，继承PaymentService接口</a></li></ul></li><li><a href="#1265-mapperxml">1.2.6.5、mapper.xml</a></li><li><a href="#1266-%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E7%BB%93%E6%9E%84%E5%9B%BE">1.2.6.6、项目模块结构图</a></li><li><a href="#1267-%E5%8F%AF%E4%BB%A5%E8%BF%9B%E8%A1%8C%E7%AE%80%E5%8D%95%E6%B5%8B%E8%AF%95">1.2.6.7、可以进行简单测试</a><ul><li><a href="#12671-run">1.2.6.7.1、run</a></li><li><a href="#12672-%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5-%E8%BF%9B%E8%A1%8Cget%E6%B5%8B%E8%AF%95">1.2.6.7.2、浏览器输入 进行get测试</a></li><li><a href="#springcloud1image-20200807181049821png"><img src="/2021/03/09/springcloud1/image-20200807181049821.png"></a></li><li><a href="#12673-%E4%BD%BF%E7%94%A8postman-%E8%BF%9B%E8%A1%8Ccreate%E6%B5%8B%E8%AF%95postmapping">1.2.6.7.3、使用postman 进行create测试，PostMapping</a></li></ul></li></ul></li></ul></li></ul></li><li><a href="#2-springcloud%E5%85%A5%E9%97%A8">2、springcloud入门</a><ul><li><a href="#21-%E7%83%AD%E9%83%A8%E7%BD%B2">2.1、热部署</a><ul><li><a href="#211-%E4%BE%9D%E8%B5%96">2.1.1、依赖</a></li><li><a href="#212-maven%E6%8F%92%E4%BB%B6">2.1.2、maven插件</a></li><li><a href="#213-%E5%BC%80%E5%90%AF%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91%E7%9A%84%E9%80%89%E9%A1%B9">2.1.3、开启自动编译的选项</a></li><li><a href="#214-ctrlshiftalt-%E9%80%89%E6%8B%A9registry">2.1.4、ctrl+shift+alt+/ 选择registry</a></li><li><a href="#215-%E5%8B%BE%E4%B8%8A-%E8%BF%99%E4%B8%A4%E4%B8%AA">2.1.5、勾上 这两个</a></li><li><a href="#216-%E7%83%AD%E9%83%A8%E7%BD%B2-%E5%8F%AA%E5%85%81%E8%AE%B8%E5%9C%A8%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5%E4%BD%BF%E7%94%A8%E6%9C%AC%E8%BA%AB%E5%B0%B1%E6%98%AF%E4%B8%BA%E4%BA%86%E4%BD%BF%E5%BC%80%E5%8F%91%E7%AE%80%E4%BE%BF%E8%80%8C%E5%87%BA%E7%8E%B0%E7%9A%84%E4%B8%8A%E7%BA%BF%E6%97%B6%E5%BA%94%E8%AF%A5%E5%85%B3%E9%97%AD%E8%BF%99%E4%B8%AA%E5%8A%9F%E8%83%BD">2.1.6、热部署 只允许在开发阶段使用（本身就是为了使开发简便而出现的），上线时应该关闭这个功能</a></li></ul></li><li><a href="#22-run-dashboard-%E6%88%96%E8%80%85-services-%E6%80%BB%E6%8E%A7%E5%88%B6%E5%8F%B0">2.2、run dashboard   或者   services   总控制台</a></li><li><a href="#23-cloud-consumer-order80-%E8%AE%A2%E5%8D%95%E6%A8%A1%E5%9D%97">2.3、cloud-consumer-order80 订单模块</a><ul><li><a href="#231-pom">2.3.1、pom</a></li><li><a href="#232-ordermain80-%E4%B8%BB%E5%90%AF%E5%8A%A8%E7%B1%BB">2.3.2、OrderMain80 主启动类</a></li><li><a href="#233-yml">2.3.3、yml</a></li><li><a href="#234-config-%E9%85%8D%E7%BD%AE-resttemplate-%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8">2.3.4、Config 配置 RestTemplate 进行远程调用</a></li><li><a href="#235-entities-%E5%A4%8D%E5%88%B6%E8%BF%87%E6%9D%A5">2.3.5、entities 复制过来</a></li><li><a href="#236-controller">2.3.6、controller</a></li></ul></li><li><a href="#24-%E5%88%9B%E5%BB%BA%E5%85%AC%E5%85%B1%E6%A8%A1%E5%9D%97">2.4、创建公共模块</a><ul><li><a href="#241-pom">2.4.1、pom</a></li><li><a href="#242-entities-%E7%B2%98%E8%B4%B4%E8%BF%87%E6%9D%A5">2.4.2、entities 粘贴过来</a></li><li><a href="#243-maven-%E5%91%BD%E4%BB%A4-clean-install">2.4.3、maven 命令 clean  install</a><ul><li><a href="#2431-%E9%80%89%E4%B8%AD-cloud-api-common-%E6%A8%A1%E5%9D%97-%E7%82%B9%E5%87%BBmaven-clean">2.4.3.1、选中 cloud-api-common  模块  ，点击maven  ，clean</a></li><li><a href="#2432-install">2.4.3.2、install</a></li></ul></li><li><a href="#244-%E5%88%A0%E9%99%A4-entities-%E5%8C%85">2.4.4、删除 entities  包</a></li><li><a href="#245-%E5%BC%95%E5%85%A5%E5%85%AC%E5%85%B1%E5%8C%85%E4%BE%9D%E8%B5%96">2.4.5、引入公共包依赖</a></li></ul></li></ul></li><li><a href="#3-eureka">3、Eureka</a><ul><li><a href="#31-%E5%BB%BA%E7%AB%8Beureka">3.1、建立Eureka</a><ul><li><a href="#311-%E6%96%B0%E5%BB%BA-eurea-module">3.1.1、新建 Eurea   module</a></li><li><a href="#312-pom">3.1.2、pom</a></li><li><a href="#313-yml">3.1.3、yml</a></li><li><a href="#314-%E4%B8%BB%E5%90%AF%E5%8A%A8">3.1.4、主启动</a></li><li><a href="#315-%E6%9F%A5%E7%9C%8Beureka">3.1.5、查看eureka</a></li></ul></li><li><a href="#32-%E6%B3%A8%E5%86%8Ceureka%E6%8F%90%E4%BE%9B%E6%9C%8D%E5%8A%A1-cloud-provider-payment8001">3.2、注册eureka提供服务 cloud-provider-payment8001</a><ul><li><a href="#321-%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85client%E5%BC%95%E5%85%A5-eureka-client%E4%BE%9D%E8%B5%96">3.2.1、服务提供者（client）引入 eureka-client依赖</a></li><li><a href="#322-yml">3.2.2、yml</a></li><li><a href="#323-%E4%B8%BB%E5%90%AF%E5%8A%A8%E7%B1%BBpaymentmain8001%E5%8A%A0%E4%B8%8Aenableeurekaclient%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%90%AFeureka-client">3.2.3、主启动类PaymentMain8001加上@EnableEurekaClient注解，开启eureka client</a></li><li><a href="#324-%E6%B5%8B%E8%AF%95">3.2.4、测试</a><ul><li><a href="#3241-%E5%90%AF%E5%8A%A8-cloud-eureka-server7001-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83">3.2.4.1、启动 cloud-eureka-server7001 注册中心</a></li><li><a href="#3242-%E5%90%AF%E5%8A%A8-cloud-provider-payment8001-%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85client">3.2.4.2、启动 cloud-provider-payment8001  服务提供者client</a></li><li><a href="#3243-%E6%B5%8F%E8%A7%88%E5%99%A8%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BD-%E6%88%96%E8%80%85-%E5%88%B7%E6%96%B0">3.2.4.3、浏览器重新加载 或者 刷新</a></li></ul></li></ul></li><li><a href="#33-%E6%B3%A8%E5%86%8Ceureka%E6%B6%88%E8%B4%B9%E6%9C%8D%E5%8A%A1-cloud-consumer-order80">3.3、注册eureka消费服务 cloud-consumer-order80</a><ul><li><a href="#331-%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9%E8%80%85client%E5%BC%95%E5%85%A5-eureka-client%E4%BE%9D%E8%B5%96">3.3.1、服务消费者（client）引入 eureka-client依赖</a></li><li><a href="#332-yml">3.3.2、yml</a></li><li><a href="#333-%E4%B8%BB%E5%90%AF%E5%8A%A8%E7%B1%BBordermain80%E5%8A%A0%E4%B8%8Aenableeurekaclient%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%90%AFeureka-client">3.3.3、主启动类OrderMain80加上@EnableEurekaClient注解，开启eureka client</a></li><li><a href="#324-%E6%B5%8B%E8%AF%95-1">3.2.4、测试</a><ul><li><a href="#3241-%E5%90%AF%E5%8A%A8-cloud-eureka-server7001-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83-1">3.2.4.1、启动 cloud-eureka-server7001 注册中心</a></li><li><a href="#3242-%E5%90%AF%E5%8A%A8-cloud-provider-payment8001-%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85client-1">3.2.4.2、启动 cloud-provider-payment8001  服务提供者client</a></li><li><a href="#3243-%E5%90%AF%E5%8A%A8-cloud-consumer-order80-%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9%E8%80%85client">3.2.4.3、启动 cloud-consumer-order80  服务消费者client</a></li><li><a href="#3244-%E6%B5%8F%E8%A7%88%E5%99%A8%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BD-%E6%88%96%E8%80%85-%E5%88%B7%E6%96%B0">3.2.4.4、浏览器重新加载 或者 刷新</a></li></ul></li></ul></li><li><a href="#34-eureka%E9%9B%86%E7%BE%A4-%E6%90%AD%E5%BB%BA">3.4、eureka集群 搭建</a><ul><li><a href="#341-cloud-eureka-server7002-%E6%90%AD%E5%BB%BA">3.4.1、cloud-eureka-server7002 搭建</a><ul><li><a href="#3411-pom">3.4.1.1、pom</a></li><li><a href="#3412-yml">3.4.1.2、yml</a></li><li><a href="#3413-%E4%B8%BB%E5%90%AF%E5%8A%A8">3.4.1.3、主启动</a></li></ul></li><li><a href="#342-%E4%BF%AE%E6%94%B9%E6%98%A0%E5%B0%84%E9%85%8D%E7%BD%AE">3.4.2、修改映射配置</a></li><li><a href="#343-%E4%BF%AE%E6%94%B9%E9%9B%86%E7%BE%A4%E4%B8%8B%E7%9A%84yml-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83">3.4.3、修改集群下的yml-服务注册中心</a><ul><li><a href="#3431-cloud-eureka-server7001">3.4.3.1、cloud-eureka-server7001</a></li><li><a href="#3432-cloud-eureka-server7002">3.4.3.2、cloud-eureka-server7002</a></li></ul></li><li><a href="#344-%E5%B0%86%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E8%BF%9B-eureka-%E9%9B%86%E7%BE%A4">3.4.4、将服务注册进 eureka 集群</a></li><li><a href="#345-%E6%B5%8B%E8%AF%95">3.4.5、测试</a></li></ul></li><li><a href="#35-%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%E7%9A%84-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA">3.5、服务提供者的 集群搭建</a><ul><li><a href="#351-%E5%9F%BA%E7%A1%80%E4%BB%A3%E7%A0%81%E7%9B%B4%E6%8E%A5%E4%BB%8E8001%E8%BE%85%E5%8A%A9%E7%B2%98%E8%B4%B4">3.5.1、基础代码直接从8001辅助粘贴</a></li><li><a href="#352-%E4%BF%AE%E6%94%B9controoler%E6%96%B9%E4%BE%BF%E6%98%BE%E7%A4%BA%E8%B0%83%E7%94%A8%E7%9A%84%E6%98%AF%E5%93%AA%E4%B8%AA%E7%AB%AF%E5%8F%A3%E7%9A%84%E6%9C%8D%E5%8A%A1">3.5.2、修改controoler，方便显示调用的是哪个端口的服务</a></li><li><a href="#353-%E4%BF%AE%E6%94%B980%E4%B8%AD-ordercontroller%E8%B0%83%E7%94%A8%E7%9A%84%E7%AB%AF%E5%8F%A3">3.5.3、修改80中 OrderController调用的端口</a></li><li><a href="#354-%E6%B7%BB%E5%8A%A0-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1-%E6%B3%A8%E8%A7%A3">3.5.4、添加 负载均衡 注解</a></li><li><a href="#355-%E6%B5%8B%E8%AF%95">3.5.5、测试</a></li></ul></li><li><a href="#36-%E9%80%89actuator%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BF%A1%E6%81%AF%E5%AE%8C%E5%96%84">3.6、（选）actuator微服务信息完善</a></li><li><a href="#37-%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0discovery">3.7、服务发现Discovery</a><ul><li><a href="#371-%E7%BC%96%E8%BE%91%E8%A6%81%E6%89%93%E5%8D%B0%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E6%A0%BC%E5%BC%8F">3.7.1、编辑要打印的服务相关信息格式</a></li><li><a href="#372-%E5%BC%80%E5%90%AF-enablediscoveryclient-%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0">3.7.2、开启 @EnableDiscoveryClient  服务发现</a></li></ul></li><li><a href="#38-eureka%E8%87%AA%E6%88%91%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6">3.8、eureka自我保护机制</a></li></ul></li><li><a href="#4-zookeeper%E4%B8%8Espringcloud%E7%9A%84%E6%95%B4%E5%90%88">4、zookeeper与springcloud的整合</a><ul><li><a href="#41-zookeper-%E5%AE%89%E8%A3%85">4.1、zookeper 安装</a></li><li><a href="#42-%E6%96%B0%E5%BB%BA-cloud-provider-payment8004">4.2、新建 cloud-provider-payment8004</a><ul><li><a href="#421-pom">4.2.1、pom</a></li><li><a href="#422-yml">4.2.2、yml</a></li><li><a href="#423-%E4%B8%BB%E5%90%AF%E5%8A%A8">4.2.3、主启动</a></li><li><a href="#424-paymentcontroller">4.2.4、PaymentController</a></li><li><a href="#425-%E6%B5%8B%E8%AF%95">4.2.5、测试</a></li></ul></li><li><a href="#43-cloud-consumerzk-order80-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9D%97">4.3、cloud-consumerzk-order80 消费者模块</a><ul><li><a href="#431-pom">4.3.1、pom</a></li><li><a href="#432-yml">4.3.2、yml</a></li><li><a href="#433%E4%B8%BB%E5%90%AF%E5%8A%A8">4.3.3主启动</a></li><li><a href="#434-%E4%B8%9A%E5%8A%A1%E7%B1%BB">4.3.4、业务类</a><ul><li><a href="#4341-applicationcontextconfig">4.3.4.1、ApplicationContextConfig</a></li></ul></li><li><a href="#435-%E6%B5%8B%E8%AF%95">4.3.5、测试</a></li></ul></li></ul></li><li><a href="#5-consul">5、consul</a><ul><li><a href="#51-%E9%98%BF%E9%87%8C%E4%BA%91docker%E5%AE%89%E8%A3%85-consul">5.1、阿里云docker安装 consul</a></li><li><a href="#52-cloud-providerconsul-payment8006-%E6%A8%A1%E5%9D%97">5.2、cloud-providerconsul-payment8006 模块</a><ul><li><a href="#521-pom">5.2.1、pom</a></li><li><a href="#522-yml">5.2.2、yml</a></li><li><a href="#523-%E4%B8%BB%E5%90%AF%E5%8A%A8">5.2.3、主启动</a></li><li><a href="#524-%E4%B8%9A%E5%8A%A1%E7%B1%BB-paymentcontroller">5.2.4、业务类 PaymentController</a></li><li><a href="#525-%E5%90%AF%E5%8A%A88006">5.2.5、启动8006</a></li></ul></li><li><a href="#53-cloud-consumerconsul-order80-%E6%A8%A1%E5%9D%97">5.3、cloud-consumerconsul-order80 模块</a><ul><li><a href="#531-pom">5.3.1、pom</a></li><li><a href="#532-ynl">5.3.2、ynl</a></li><li><a href="#533-%E4%B8%BB%E5%90%AF%E5%8A%A8">5.3.3、主启动</a></li><li><a href="#534-%E4%B8%9A%E5%8A%A1%E7%B1%BB">5.3.4、业务类</a><ul><li><a href="#5341-config-%E9%85%8D%E7%BD%AE-resttemplate">5.3.4.1、Config 配置 RestTemplate</a></li><li><a href="#5341-controller">5.3.4.1、Controller</a></li></ul></li><li><a href="#535-%E6%B5%8B%E8%AF%95">5.3.5、测试</a></li></ul></li></ul></li><li><a href="#eureka-zookeeper-consul-%E7%9A%84%E6%AF%94%E8%BE%83">Eureka 、 zookeeper 、consul   的比较</a></li></ul><!-- tocstop --><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><ul><li><p>本笔记为尚硅谷老师 <strong>周阳</strong>  的springcloud 课程 所记</p></li><li><p>链接 <a href="https://www.bilibili.com/video/BV1yE411x7Ky?p=1">https://www.bilibili.com/video/BV1yE411x7Ky?p=1</a></p></li><li><p>写此笔记的初衷是之前学springboot时有分享的笔记，而这次课没有，为了更深刻的理解和掌握 微服务 </p></li><li><p>这是周阳老师的版本，为了高仿老师的实战，我所选的版本和周阳老师的几乎一样</p></li><li><p><img src="/2021/03/09/springcloud1/image-20200808084406263.png"></p></li><li><p>我的具体环境也粘贴一下把</p></li><li><table><thead><tr><th align="center">cloud</th><th align="center">H SR1</th></tr></thead><tbody><tr><td align="center">boot</td><td align="center">2.2.2.RELEASE</td></tr><tr><td align="center">cloud alibaba</td><td align="center">2.1.0.RELEASE</td></tr><tr><td align="center">java</td><td align="center">8</td></tr><tr><td align="center">maven</td><td align="center">3.6.3</td></tr><tr><td align="center">mysql</td><td align="center">5.7.30</td></tr></tbody></table></li></ul><hr><hr><h1 id="1-springcloud-环境搭建"><a href="#1、springcloud-环境搭建" class="headerlink" title="1、springcloud 环境搭建"></a>1、springcloud 环境搭建</h1><h2 id="11-父工程project"><a href="#1-1、父工程（project）" class="headerlink" title="1.1、父工程（project）"></a>1.1、父工程（project）</h2><h3 id="111-环境"><a href="#1-1-1、环境" class="headerlink" title="1.1.1、环境"></a>1.1.1、环境</h3><h4 id="1111-site骨架jdk8"><a href="#1-1-1-1、site骨架，jdk8" class="headerlink" title="1.1.1.1、site骨架，jdk8"></a>1.1.1.1、site骨架，jdk8</h4><p><img src="/2021/03/09/springcloud1/image-20200807135250551.png"></p><h4 id="1112-编码格式选择utf8如果出现问题会很麻烦"><a href="#1-1-1-2、编码格式选择utf8，如果出现问题会很麻烦" class="headerlink" title="1.1.1.2、编码格式选择utf8，如果出现问题会很麻烦"></a>1.1.1.2、编码格式选择utf8，如果出现问题会很麻烦</h4><p><img src="/2021/03/09/springcloud1/image-20200807135142897.png"></p><h4 id="1113-开启注解生效激活"><a href="#1-1-1-3、开启注解生效激活" class="headerlink" title="1.1.1.3、开启注解生效激活"></a>1.1.1.3、开启注解生效激活</h4><p><img src="typora-user-images/image-20200807135441405.png"></p><h4 id="1114-java编译选择18默认的低版本会导致出错比如jdk6不支持接口的继承override"><a href="#1-1-1-4、java编译选择1-8，默认的低版本会导致出错（比如jdk6不支持接口的继承-Override" class="headerlink" title="1.1.1.4、java编译选择1.8，默认的低版本会导致出错（比如jdk6不支持接口的继承@Override"></a>1.1.1.4、java编译选择1.8，默认的低版本会导致出错（比如jdk6不支持接口的继承@Override</h4><p><img src="/2021/03/09/springcloud1/blog\source_posts\springcloud1\image-20200807135836394.png" alt="image-20200807135836394"></p><h4 id="1115-选做不显示-idea-等用不到的文件-可以在下面-添加-ideaiml"><a href="#1-1-1-5、（选做）不显示-idea-等用不到的文件-可以在下面-添加-idea-iml" class="headerlink" title="1.1.1.5、（选做）不显示   .idea 等用不到的文件  可以在下面  添加    *.idea;*.iml;"></a>1.1.1.5、（选做）不显示   .idea 等用不到的文件  可以在下面  添加    *.idea;*.iml;</h4><p><img src="/2021/03/09/springcloud1/image-20200807140038253.png"></p><h3 id="112-pom配置"><a href="#1-1-2、pom配置" class="headerlink" title="1.1.2、pom配置"></a>1.1.2、pom配置</h3><h4 id="1121-这是创建项目时产生的"><a href="#1-1-2-1、这是创建项目时产生的" class="headerlink" title="1.1.2.1、这是创建项目时产生的"></a>1.1.2.1、这是创建项目时产生的</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springcloudtest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ttest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1122-需要添加的"><a href="#1-1-2-2、需要添加的" class="headerlink" title="1.1.2.2、需要添加的"></a>1.1.2.2、需要添加的</h4><p>当 <dependencymanagement>中的包被子工程使用时，会选择父工程的版本，即不用 </dependencymanagement></p><p>***<groupid>org.springcloudtest</groupid>***和 ***<version>1.0-SNAPSHOT</version>***了</p><p>只需要   <em><strong><artifactid>ttest</artifactid></strong></em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--  父工程需要 引入这个，表示为总的工程 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 统一管理jar包版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 子模块继承之后，提供作用：锁定版本+子modlue不用写groupId和version  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud alibaba 2.1.0.RELEASE--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="113-跳过单元测试"><a href="#1-1-3、跳过单元测试" class="headerlink" title="1.1.3、跳过单元测试"></a>1.1.3、跳过单元测试</h3><blockquote><p>点击闪电形状按钮，test 显示为<del>test</del> 表示已经跳过</p></blockquote><blockquote><p>clean为清空父工程在仓库的依赖（常用来更新依赖包）<br>install 则把依赖包下载到仓库</p></blockquote><p><img src="/2021/03/09/springcloud1/image-20200807143247868.png"></p><h3 id="114-选可以删除父工程的src文件夹用不到"><a href="#1-1-4、（选）可以删除父工程的src文件夹（用不到）" class="headerlink" title="1.1.4、（选）可以删除父工程的src文件夹（用不到）"></a>1.1.4、（选）可以删除父工程的src文件夹（用不到）</h3><h2 id="12-微服务模块"><a href="#1-2、微服务模块" class="headerlink" title="1.2、微服务模块"></a>1.2、微服务模块</h2><blockquote><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloud-provider-payment8001</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 建module</span><br><span class="line"></span><br><span class="line">2 改pom</span><br><span class="line"></span><br><span class="line">3 写YML</span><br><span class="line"></span><br><span class="line">4 主启动</span><br><span class="line"></span><br><span class="line">5 业务类</span><br></pre></td></tr></table></figure><h3 id="121-选中父工程右键新建modulejdk8别忘了"><a href="#1-2-1、选中父工程，右键新建module，jdk8别忘了" class="headerlink" title="1.2.1、选中父工程，右键新建module，jdk8别忘了"></a>1.2.1、选中父工程，右键新建module，jdk8别忘了</h3><p><img src="/2021/03/09/springcloud1/image-20200807144159234.png"></p><h3 id="122-填写名字finish"><a href="#1-2-2、填写名字，finish" class="headerlink" title="1.2.2、填写名字，finish"></a>1.2.2、填写名字，finish</h3><p>此时可以看到父工程的pom新增了 <strong><modules></modules></strong> 板块，记录的是刚建立的 <strong>module</strong>，每新增一个<strong>module</strong>就会在这里多一条记录</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springcloudtest<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ttest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">module</span>&gt;</span>test-provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="123-添加依赖"><a href="#1-2-3、添加依赖" class="headerlink" title="1.2.3、添加依赖"></a>1.2.3、添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--    web模块    --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--    监控和管理模块，和web模块搭配使用    --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--    热部署    --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--    注解 样板代码    --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--    test模块    --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="124-写yml-或者-properties"><a href="#1-2-4、写YML-或者-properties" class="headerlink" title="1.2.4、写YML  或者   properties"></a>1.2.4、写YML  或者   properties</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>            <span class="comment"># 当前数据源操作类型</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.gjt.mm.mysql.Driver</span>              <span class="comment"># mysql驱动包</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">9468943Zz</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span>   </span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.atguigu.springcloud.entities</span>    <span class="comment"># 所有Entity别名类所在包</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="125-启动类"><a href="#1-2-5、启动类" class="headerlink" title="1.2.5、启动类"></a>1.2.5、启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="126-业务类"><a href="#1-2-6、业务类" class="headerlink" title="1.2.6、业务类"></a>1.2.6、业务类</h3><h4 id="1261-建表sql"><a href="#1-2-6-1、建表SQL" class="headerlink" title="1.2.6.1、建表SQL"></a>1.2.6.1、建表SQL</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `payment` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  `serial` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">5</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `payment`(`id`,`serial`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;尚硅谷&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;alibaba&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;京东&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;头条&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="1262-entities"><a href="#1-2-6-2、entities" class="headerlink" title="1.2.6.2、entities"></a>1.2.6.2、entities</h4><h5 id="12621-payment实体类"><a href="#1-2-6-2-1、Payment实体类" class="headerlink" title="1.2.6.2.1、Payment实体类"></a>1.2.6.2.1、Payment实体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>      <span class="comment">//生成setter/getter、equals、canEqual、hashCode、toString方法，如为final属性，则不会为该属性生成setter方法。</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>    <span class="comment">//全参构造器</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>     <span class="comment">//无参构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Payment</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String serial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12622-commonresult封装类用于返回给前端的数据信息前后端分离"><a href="#1-2-6-2-2、CommonResult封装类，用于返回给前端的数据信息（前后端分离）" class="headerlink" title="1.2.6.2.2、CommonResult封装类，用于返回给前端的数据信息（前后端分离）"></a>1.2.6.2.2、CommonResult封装类，用于返回给前端的数据信息（前后端分离）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//404 not_found</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String  message;</span><br><span class="line">    <span class="keyword">private</span> T       data;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResult</span><span class="params">(Integer code, String message)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        this.code = code;</span></span><br><span class="line"><span class="comment">//        this.message = message;</span></span><br><span class="line">        <span class="keyword">this</span>(code,message, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1263-dao类-使用mapper注解把这个dao交給spring管理"><a href="#1-2-6-3、dao类-使用-Mapper注解，把这个DAO交給Spring管理" class="headerlink" title="1.2.6.3、dao类  使用@Mapper注解，把这个DAO交給Spring管理"></a>1.2.6.3、dao类  使用@Mapper注解，把这个DAO交給Spring管理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentDao</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">getPaymentById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1264-service"><a href="#1-2-6-4、Service" class="headerlink" title="1.2.6.4、Service"></a>1.2.6.4、Service</h4><h5 id="12641-paymentservice接口"><a href="#1-2-6-4-1、PaymentService接口" class="headerlink" title="1.2.6.4.1、PaymentService接口"></a>1.2.6.4.1、PaymentService接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">getPaymentById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="12642-paymentserviceimpl实现类继承paymentservice接口"><a href="#1-2-6-4-2、PaymentServiceImpl实现类，继承PaymentService接口" class="headerlink" title="1.2.6.4.2、PaymentServiceImpl实现类，继承PaymentService接口"></a>1.2.6.4.2、PaymentServiceImpl实现类，继承PaymentService接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentServiceImpl</span> <span class="keyword">implements</span> <span class="title">PaymentService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>     <span class="comment">//注入PaymentDao</span></span><br><span class="line">    <span class="keyword">private</span> PaymentDao paymentDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentDao.create(payment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">getPaymentById</span><span class="params">(Long id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentDao.getPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.2.6.5、PaymentController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span>     <span class="comment">//@Controller + @ResponseBody</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Controller</span>  表明了这个类是一个控制器类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ResponseBody</span> 表示方法的返回值直接以指定的格式写入Http response body中，而不是解析为跳转路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/payment/create&quot;)</span>     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">create</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = paymentService.create(payment);</span><br><span class="line">        log.info(<span class="string">&quot;*****插入结果：&quot;</span>+result);</span><br><span class="line">        <span class="keyword">if</span>(result &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;插入数据库成功&quot;</span>,result);</span><br><span class="line"><span class="comment">//            return new CommonResult(200,&quot;插入数据库成功,serverPort: &quot;+serverPort,result);</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">&quot;插入数据库失败&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Payment payment = paymentService.getPaymentById(id);</span><br><span class="line">        <span class="keyword">if</span>(payment != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line"><span class="comment">//            return new CommonResult(200,&quot;查询成功,serverPort:  &quot;+serverPort,payment);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;查询成功  &quot;</span>,payment);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">&quot;没有对应记录,查询ID: &quot;</span>+id,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1265-mapperxml"><a href="#1-2-6-5、mapper-xml" class="headerlink" title="1.2.6.5、mapper.xml"></a>1.2.6.5、mapper.xml</h4><blockquote><p>放在resources下，具体路径是yml中配置的mybatis信息</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.atguigu.springcloud.entities</span>    <span class="comment"># 所有Entity别名类所在包</span></span><br></pre></td></tr></table></figure><blockquote><p>路径为  <strong>classpath:mapper/*.xml</strong></p></blockquote><blockquote><p>PaymentMapper.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.springcloud.dao.PaymentDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;create&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Payment&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into payment(serial)  values(#&#123;serial&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.atguigu.springcloud.entities.Payment&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;serial&quot;</span> <span class="attr">property</span>=<span class="string">&quot;serial&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getPaymentById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Long&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">        select * from payment where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1266-项目模块结构图"><a href="#1-2-6-6、项目模块结构图" class="headerlink" title="1.2.6.6、项目模块结构图"></a>1.2.6.6、项目模块结构图</h4><p><img src="/2021/03/09/springcloud1/image-20200807152119506.png"></p><h4 id="1267-可以进行简单测试"><a href="#1-2-6-7、可以进行简单测试" class="headerlink" title="1.2.6.7、可以进行简单测试"></a>1.2.6.7、可以进行简单测试</h4><h5 id="12671-run"><a href="#1-2-6-7-1、run" class="headerlink" title="1.2.6.7.1、run"></a>1.2.6.7.1、run</h5><p><img src="/2021/03/09/springcloud1/Users\MSI-NB\AppData\Roaming\Typora\typora-user-images\image-20200807152531324.png" alt="image-20200807152531324"></p><h5 id="12672-浏览器输入-进行get测试"><a href="#1-2-6-7-2、浏览器输入-进行get测试" class="headerlink" title="1.2.6.7.2、浏览器输入 进行get测试"></a>1.2.6.7.2、浏览器输入 进行get测试</h5><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">http</span>://localhost:<span class="number">8001</span>/payment/get/<span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id><a href="#" class="headerlink" title></a><img src="/2021/03/09/springcloud1/image-20200807181049821.png"></h5><h5 id="12673-使用postman-进行create测试postmapping"><a href="#1-2-6-7-3、使用postman-进行create测试，PostMapping" class="headerlink" title="1.2.6.7.3、使用postman 进行create测试，PostMapping"></a>1.2.6.7.3、使用postman 进行create测试，PostMapping</h5><p><strong>不能用浏览器进行测试！！！！！   浏览器发送的时get请求，controller收不到</strong></p><blockquote><p> 测试前要把</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/payment/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">create</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span></span></span><br></pre></td></tr></table></figure><blockquote><p>中的 <strong>@RequestBody</strong> 注释掉，本地测试时用</p></blockquote><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">http</span>://localhost:<span class="number">8001</span>/payment/create?serial=zhangsan</span><br></pre></td></tr></table></figure><blockquote><p>传递给 <strong>/payment/create</strong> 的是 key-value的参数 而不是 json传递参数</p></blockquote><blockquote><p>@RequestBody 注解用前端 的 json 传递参数转化为是实体类对象</p></blockquote><p><img src="/2021/03/09/springcloud1/image-20200807181332833.png"></p><h1 id="2-springcloud入门"><a href="#2、springcloud入门" class="headerlink" title="2、springcloud入门"></a>2、springcloud入门</h1><h2 id="21-热部署"><a href="#2-1、热部署" class="headerlink" title="2.1、热部署"></a>2.1、热部署</h2><h3 id="211-依赖"><a href="#2-1-1、依赖" class="headerlink" title="2.1.1、依赖"></a>2.1.1、依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="212-maven插件"><a href="#2-1-2、maven插件" class="headerlink" title="2.1.2、maven插件"></a>2.1.2、maven插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="213-开启自动编译的选项"><a href="#2-1-3、开启自动编译的选项" class="headerlink" title="2.1.3、开启自动编译的选项"></a>2.1.3、开启自动编译的选项</h3><p><img src="/2021/03/09/springcloud1/image-20200807182450892.png"></p><h3 id="214-ctrlshiftalt-选择registry"><a href="#2-1-4、ctrl-shift-alt-选择registry" class="headerlink" title="2.1.4、ctrl+shift+alt+/    选择registry"></a>2.1.4、ctrl+shift+alt+/    选择registry</h3><p><img src="/2021/03/09/springcloud1/image-20200807182628626.png"></p><h3 id="215-勾上-这两个"><a href="#2-1-5、勾上-这两个" class="headerlink" title="2.1.5、勾上   这两个"></a>2.1.5、勾上   这两个</h3><p><img src="/2021/03/09/springcloud1/image-20200807182849962.png"></p><h3 id="216-热部署-只允许在开发阶段使用本身就是为了使开发简便而出现的上线时应该关闭这个功能"><a href="#2-1-6、热部署-只允许在开发阶段使用（本身就是为了使开发简便而出现的），上线时应该关闭这个功能" class="headerlink" title="2.1.6、热部署 只允许在开发阶段使用（本身就是为了使开发简便而出现的），上线时应该关闭这个功能"></a>2.1.6、热部署 只允许在开发阶段使用（本身就是为了使开发简便而出现的），上线时应该关闭这个功能</h3><h2 id="22-run-dashboard-或者-services-总控制台"><a href="#2-2、run-dashboard-或者-services-总控制台" class="headerlink" title="2.2、run dashboard   或者   services   总控制台"></a>2.2、run dashboard   或者   services   总控制台</h2><blockquote><p>当有2个及以上的module时就需要用 总控制台 来管理了，如果自己的idea  **run dashboard   或者   services **  没有自动产生</p></blockquote><blockquote><p>进入项目根文件夹下   .idea  文件夹</p></blockquote><p><img src="/2021/03/09/springcloud1/image-20200807185049300.png"></p><blockquote><p>打开 workspace.xml   ，适当位置插入下面语句，开启RunDashboard功能</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">&quot;RunDashboard&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;configurationTypes&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;SpringBootApplicationConfigurationType&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>重启idea</p></blockquote><p><img src="/2021/03/09/springcloud1/image-20200807185454843.png"></p><h2 id="23-cloud-consumer-order80-订单模块"><a href="#2-3、cloud-consumer-order80-订单模块" class="headerlink" title="2.3、cloud-consumer-order80   订单模块"></a>2.3、cloud-consumer-order80   订单模块</h2><blockquote><p>快速搭建，不墨迹了，可以参照  [ 1.2、微服务模块](# 1.2、微服务模块)</p></blockquote><h3 id="231-pom"><a href="#2-3-1、pom" class="headerlink" title="2.3.1、pom"></a>2.3.1、pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="232-ordermain80-主启动类"><a href="#2-3-2、OrderMain80-主启动类" class="headerlink" title="2.3.2、OrderMain80  主启动类"></a>2.3.2、OrderMain80  主启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//@EnableEurekaClient</span></span><br><span class="line"><span class="comment">//@RibbonClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;,configuration=MySelfRule.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain80</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="233-yml"><a href="#2-3-3、yml" class="headerlink" title="2.3.3、yml"></a>2.3.3、yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h3 id="234-config-配置-resttemplate-进行远程调用"><a href="#2-3-4、Config-配置-RestTemplate-进行远程调用" class="headerlink" title="2.3.4、Config 配置 RestTemplate 进行远程调用"></a>2.3.4、Config 配置 RestTemplate 进行远程调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.entities;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//applicationContext.xml &lt;bean id=&quot;&quot; class=&quot;&quot;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="235-entities-复制过来"><a href="#2-3-5、entities-复制过来" class="headerlink" title="2.3.5、entities 复制过来"></a>2.3.5、entities 复制过来</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.entities;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Payment</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String serial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Payment</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String serial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="236-controller"><a href="#2-3-6、controller" class="headerlink" title="2.3.6、controller"></a>2.3.6、controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springcloud.controller;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL = <span class="string">&quot;http://localhost:8001&quot;</span>;</span><br><span class="line"><span class="comment">//    public static final String PAYMENT_URL = &quot;http://CLOUD-PAYMENT-SERVICE&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">create</span><span class="params">(Payment payment)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL +<span class="string">&quot;/payment/create&quot;</span>,payment,CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL+<span class="string">&quot;/payment/get/&quot;</span>+id,CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="24-创建公共模块"><a href="#2-4、创建公共模块" class="headerlink" title="2.4、创建公共模块"></a>2.4、创建公共模块</h2><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloud-api-common</span><br></pre></td></tr></table></figure></blockquote><h3 id="241-pom"><a href="#2-4-1、pom" class="headerlink" title="2.4.1、pom"></a>2.4.1、pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="242-entities-粘贴过来"><a href="#2-4-2、entities-粘贴过来" class="headerlink" title="2.4.2、entities 粘贴过来"></a>2.4.2、entities 粘贴过来</h3><blockquote><p>包路径 要一样</p></blockquote><h3 id="243-maven-命令-clean-install"><a href="#2-4-3、maven-命令-clean-install" class="headerlink" title="2.4.3、maven 命令 clean  install"></a>2.4.3、maven 命令 clean  install</h3><h4 id="2431-选中-cloud-api-common-模块-点击maven-clean"><a href="#2-4-3-1、选中-cloud-api-common-模块-，点击maven-，clean" class="headerlink" title="2.4.3.1、选中 cloud-api-common  模块  ，点击maven  ，clean"></a>2.4.3.1、选中 cloud-api-common  模块  ，点击maven  ，clean</h4><p><img src="/2021/03/09/springcloud1/image-20200807211628930.png"></p><h4 id="2432-install"><a href="#2-4-3-2、install" class="headerlink" title="2.4.3.2、install"></a>2.4.3.2、install</h4><h3 id="244-删除-entities-包"><a href="#2-4-4、删除-entities-包" class="headerlink" title="2.4.4、删除 entities  包"></a>2.4.4、删除 entities  包</h3><h3 id="245-引入公共包依赖"><a href="#2-4-5、引入公共包依赖" class="headerlink" title="2.4.5、引入公共包依赖"></a>2.4.5、引入公共包依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-eureka"><a href="#3、Eureka" class="headerlink" title="3、Eureka"></a>3、Eureka</h1><h2 id="31-建立eureka"><a href="#3-1、建立Eureka" class="headerlink" title="3.1、建立Eureka"></a>3.1、建立Eureka</h2><p><img src="/2021/03/09/springcloud1/image-20200807231409336.png"></p><h3 id="311-新建-eurea-module"><a href="#3-1-1、新建-Eurea-module" class="headerlink" title="3.1.1、新建 Eurea   module"></a>3.1.1、新建 Eurea   module</h3><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cloud-eureka-server7001</span><br></pre></td></tr></table></figure></blockquote><h3 id="312-pom"><a href="#3-1-2、pom" class="headerlink" title="3.1.2、pom"></a>3.1.2、pom</h3><blockquote><p> 关键依赖eureka-server</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka-server--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--boot web actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一般通用配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="313-yml"><a href="#3-1-3、yml" class="headerlink" title="3.1.3、yml"></a>3.1.3、yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line"><span class="comment">#    hostname: eureka7001.com #eureka服务端的实例名称</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">    <span class="comment">#集群指向其它eureka</span></span><br><span class="line">      <span class="comment">#defaultZone: http://eureka7002.com:7002/eureka/</span></span><br><span class="line">    <span class="comment">#单机就是7001自己</span></span><br><span class="line"><span class="comment">#      defaultZone: http://eureka7001.com:7001/eureka/</span></span><br><span class="line">  <span class="comment">#server:</span></span><br><span class="line">    <span class="comment">#关闭自我保护机制，保证不可用服务被及时踢除</span></span><br><span class="line">    <span class="comment">#enable-self-preservation: false</span></span><br><span class="line">    <span class="comment">#eviction-interval-timer-in-ms: 2000</span></span><br></pre></td></tr></table></figure><h3 id="314-主启动"><a href="#3-1-4、主启动" class="headerlink" title="3.1.4、主启动"></a>3.1.4、主启动</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span>    <span class="comment">//服务注册中心</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMain7001</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            SpringApplication.run(EurekaMain7001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@EnableEurekaServer    //服务注册中心</p><p>必不可少</p></blockquote><h3 id="315-查看eureka"><a href="#3-1-5、查看eureka" class="headerlink" title="3.1.5、查看eureka"></a>3.1.5、查看eureka</h3><blockquote><p> <a href="http://localhost:7001/">http://localhost:7001/</a></p></blockquote><p><img src="/2021/03/09/springcloud1/image-20200807234419874.png"></p><h2 id="32-注册eureka提供服务-cloud-provider-payment8001"><a href="#3-2、注册eureka提供服务-cloud-provider-payment8001" class="headerlink" title="3.2、注册eureka提供服务 cloud-provider-payment8001"></a>3.2、注册eureka提供服务 cloud-provider-payment8001</h2><h3 id="321-服务提供者client引入-eureka-client依赖"><a href="#3-2-1、服务提供者（client）引入-eureka-client依赖" class="headerlink" title="3.2.1、服务提供者（client）引入 eureka-client依赖"></a>3.2.1、服务提供者（client）引入 eureka-client依赖</h3><blockquote><p>cloud-provider-payment8001   </p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka-client--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="322-yml"><a href="#3-2-2、yml" class="headerlink" title="3.2.2、yml"></a>3.2.2、yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进EurekaServer默认为true。</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#单机版</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><h3 id="323-主启动类paymentmain8001加上enableeurekaclient注解开启eureka-client"><a href="#3-2-3、主启动类PaymentMain8001加上-EnableEurekaClient注解，开启eureka-client" class="headerlink" title="3.2.3、主启动类PaymentMain8001加上@EnableEurekaClient注解，开启eureka client"></a>3.2.3、主启动类PaymentMain8001加上@EnableEurekaClient注解，开启eureka client</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="324-测试"><a href="#3-2-4、测试" class="headerlink" title="3.2.4、测试"></a>3.2.4、测试</h3><h4 id="3241-启动-cloud-eureka-server7001-注册中心"><a href="#3-2-4-1、启动-cloud-eureka-server7001-注册中心" class="headerlink" title="3.2.4.1、启动 cloud-eureka-server7001 注册中心"></a>3.2.4.1、启动 cloud-eureka-server7001 注册中心</h4><h4 id="3242-启动-cloud-provider-payment8001-服务提供者client"><a href="#3-2-4-2、启动-cloud-provider-payment8001-服务提供者client" class="headerlink" title="3.2.4.2、启动 cloud-provider-payment8001  服务提供者client"></a>3.2.4.2、启动 cloud-provider-payment8001  服务提供者client</h4><h4 id="3243-浏览器重新加载-或者-刷新"><a href="#3-2-4-3、浏览器重新加载-或者-刷新" class="headerlink" title="3.2.4.3、浏览器重新加载 或者 刷新"></a>3.2.4.3、浏览器重新加载 或者 刷新</h4><blockquote><p><a href="http://localhost:7001/">http://localhost:7001/</a></p></blockquote><p><img src="/2021/03/09/springcloud1/image-20200808000648911.png"></p><blockquote><p>服务已注册</p></blockquote><h2 id="33-注册eureka消费服务-cloud-consumer-order80"><a href="#3-3、注册eureka消费服务-cloud-consumer-order80" class="headerlink" title="3.3、注册eureka消费服务 cloud-consumer-order80"></a>3.3、注册eureka消费服务 cloud-consumer-order80</h2><h3 id="331-服务消费者client引入-eureka-client依赖"><a href="#3-3-1、服务消费者（client）引入-eureka-client依赖" class="headerlink" title="3.3.1、服务消费者（client）引入 eureka-client依赖"></a>3.3.1、服务消费者（client）引入 eureka-client依赖</h3><blockquote><p>cloud-consumer-order80</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka-client--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="332-yml"><a href="#3-3-2、yml" class="headerlink" title="3.3.2、yml"></a>3.3.2、yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">cloud-order-service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进EurekaServer默认为true。</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#单机</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><h3 id="333-主启动类ordermain80加上enableeurekaclient注解开启eureka-client"><a href="#3-3-3、主启动类OrderMain80加上-EnableEurekaClient注解，开启eureka-client" class="headerlink" title="3.3.3、主启动类OrderMain80加上@EnableEurekaClient注解，开启eureka client"></a>3.3.3、主启动类OrderMain80加上@EnableEurekaClient注解，开启eureka client</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="comment">//@RibbonClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;,configuration=MySelfRule.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain80</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="324-测试"><a href="#3-2-4、测试-1" class="headerlink" title="3.2.4、测试"></a>3.2.4、测试</h3><h4 id="3241-启动-cloud-eureka-server7001-注册中心"><a href="#3-2-4-1、启动-cloud-eureka-server7001-注册中心-1" class="headerlink" title="3.2.4.1、启动 cloud-eureka-server7001 注册中心"></a>3.2.4.1、启动 cloud-eureka-server7001 注册中心</h4><h4 id="3242-启动-cloud-provider-payment8001-服务提供者client"><a href="#3-2-4-2、启动-cloud-provider-payment8001-服务提供者client-1" class="headerlink" title="3.2.4.2、启动 cloud-provider-payment8001  服务提供者client"></a>3.2.4.2、启动 cloud-provider-payment8001  服务提供者client</h4><h4 id="3243-启动-cloud-consumer-order80-服务消费者client"><a href="#3-2-4-3、启动-cloud-consumer-order80-服务消费者client" class="headerlink" title="3.2.4.3、启动 cloud-consumer-order80  服务消费者client"></a>3.2.4.3、启动 cloud-consumer-order80  服务消费者client</h4><h4 id="3244-浏览器重新加载-或者-刷新"><a href="#3-2-4-4、浏览器重新加载-或者-刷新" class="headerlink" title="3.2.4.4、浏览器重新加载 或者 刷新"></a>3.2.4.4、浏览器重新加载 或者 刷新</h4><blockquote><p><a href="http://localhost:7001/">http://localhost:7001/</a></p></blockquote><p><img src="/2021/03/09/springcloud1/image-20200808001740927.png"></p><blockquote><p>服务已注册，web测试可自行尝试，就不放截图了</p><p><a href="http://localhost/consumer/payment/get/1">http://localhost/consumer/payment/get/1</a></p><p><a href="http://localhost/consumer/payment/create?serial=wqwqwq">http://localhost/consumer/payment/create?serial=wqwqwq</a></p></blockquote><h2 id="34-eureka集群-搭建"><a href="#3-4、eureka集群-搭建" class="headerlink" title="3.4、eureka集群 搭建"></a>3.4、eureka集群 搭建</h2><blockquote><p>cloud-eureka-server7002    </p></blockquote><h3 id="341-cloud-eureka-server7002-搭建"><a href="#3-4-1、cloud-eureka-server7002-搭建" class="headerlink" title="3.4.1、cloud-eureka-server7002   搭建"></a>3.4.1、cloud-eureka-server7002   搭建</h3><blockquote><p> 和cloud-eureka-server7001 一样</p></blockquote><h4 id="3411-pom"><a href="#3-4-1-1、pom" class="headerlink" title="3.4.1.1、pom"></a>3.4.1.1、pom</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka-server--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--boot web actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一般通用配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3412-yml"><a href="#3-4-1-2、yml" class="headerlink" title="3.4.1.2、yml"></a>3.4.1.2、yml</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line"><span class="comment">#    hostname: eureka7002.com #eureka服务端的实例名称</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><h4 id="3413-主启动"><a href="#3-4-1-3、主启动" class="headerlink" title="3.4.1.3、主启动"></a>3.4.1.3、主启动</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMain7002</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            SpringApplication.run(EurekaMain7002.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="342-修改映射配置"><a href="#3-4-2、修改映射配置" class="headerlink" title="3.4.2、修改映射配置"></a>3.4.2、修改映射配置</h3><blockquote><p>由于两个服务注册的端口都是本机地址127.0.0.1</p><p>无法区分，也就无法识别和连接</p><p>配置映射是为了在同一个地址（ip）下用不同的名字来区分相同功能的集群</p><p>好比一个班级两个学生名字一样，这就需要一个别名来区分这两个同学了</p><p>！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！</p><p>修改映射配置是在 C:\Windows\System32\drivers\etc  下面的 host 文件  （ win10系统）</p><p><img src="/2021/03/09/springcloud1/image-20200808095517758.png"></p><p>添加你想要的映射如下</p></blockquote><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#############Springcloud2020.8.8###############</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>  eureka7001.com</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>  eureka7002.com</span><br></pre></td></tr></table></figure><h3 id="343-修改集群下的yml-服务注册中心"><a href="#3-4-3、修改集群下的yml-服务注册中心" class="headerlink" title="3.4.3、修改集群下的yml-服务注册中心"></a>3.4.3、修改集群下的yml-服务注册中心</h3><h4 id="3431-cloud-eureka-server7001"><a href="#3-4-3-1、cloud-eureka-server7001" class="headerlink" title="3.4.3.1、cloud-eureka-server7001"></a>3.4.3.1、cloud-eureka-server7001</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line"><span class="comment">#    hostname: localhost #eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br></pre></td></tr></table></figure><p>eureka:<br>  instance:<br>    hostname:   改为自己的映射名字</p><p>而</p><p> service-url:<br>      defaultZone  改为自己兄弟的名字和端口</p><h4 id="3432-cloud-eureka-server7002"><a href="#3-4-3-2、cloud-eureka-server7002" class="headerlink" title="3.4.3.2、cloud-eureka-server7002"></a>3.4.3.2、cloud-eureka-server7002</h4><blockquote><p>同理</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span> <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line"><span class="comment">#    hostname: localhost #eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>     <span class="comment">#false表示不向注册中心注册自己。</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span>     <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure><h3 id="344-将服务注册进-eureka-集群"><a href="#3-4-4、将服务注册进-eureka-集群" class="headerlink" title="3.4.4、将服务注册进 eureka 集群"></a>3.4.4、将服务注册进 eureka 集群</h3><blockquote><p>只需要将  defaultZone  配置从单机版改为集群版就行了 </p><p>cloud-provider-payment8001  和   cloud-consumer-order80   都改</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">#单机版</span></span><br><span class="line"><span class="comment">#      defaultZone: http://localhost:7001/eureka</span></span><br><span class="line">      <span class="comment"># 集群版</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br></pre></td></tr></table></figure><h3 id="345-测试"><a href="#3-4-5、测试" class="headerlink" title="3.4.5、测试"></a>3.4.5、测试</h3><blockquote><p>就不废话了，自己尝试 </p><p><a href="http://eureka7002.com/consumer/payment/get/1">http://eureka7002.com/consumer/payment/get/1</a></p><p><a href="http://localhost/consumer/payment/get/1">http://localhost/consumer/payment/get/1</a></p></blockquote><h2 id="35-服务提供者的-集群搭建"><a href="#3-5、服务提供者的-集群搭建" class="headerlink" title="3.5、服务提供者的 集群搭建"></a>3.5、服务提供者的 集群搭建</h2><blockquote><p>8001 支付服务在以前已经搭建好，但是只有一个是不够的，好比一个学校提供教学服务，只有一个老师，那肯定教不了所有学生</p></blockquote><p>由此，我们搭建 8002 支付服务</p><h3 id="351-基础代码直接从8001辅助粘贴"><a href="#3-5-1、基础代码直接从8001辅助粘贴" class="headerlink" title="3.5.1、基础代码直接从8001辅助粘贴"></a>3.5.1、基础代码直接从8001辅助粘贴</h3><blockquote><p>不过还有问题，可以参展前面的</p></blockquote><h3 id="352-修改controoler方便显示调用的是哪个端口的服务"><a href="#3-5-2、修改controoler，方便显示调用的是哪个端口的服务" class="headerlink" title="3.5.2、修改controoler，方便显示调用的是哪个端口的服务"></a>3.5.2、修改controoler，方便显示调用的是哪个端口的服务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String serverPort;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//            return new CommonResult(200,&quot;插入数据库成功&quot;,result);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;插入数据库成功,serverPort: &quot;</span>+serverPort,result);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;查询成功,serverPort:  &quot;</span>+serverPort,payment);</span><br><span class="line"><span class="comment">//            return new CommonResult(200,&quot;查询成功  &quot;,payment);</span></span><br></pre></td></tr></table></figure><h3 id="353-修改80中-ordercontroller调用的端口"><a href="#3-5-3、修改80中-OrderController调用的端口" class="headerlink" title="3.5.3、修改80中 OrderController调用的端口"></a>3.5.3、修改80中 OrderController调用的端口</h3><blockquote><p>cloud-consumer-order80</p><p>使用服务名称 而不是写死的端口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">//    public static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL = <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="354-添加-负载均衡-注解"><a href="#3-5-4、添加-负载均衡-注解" class="headerlink" title="3.5.4、添加 负载均衡 注解"></a>3.5.4、添加 负载均衡 注解</h3><blockquote><p>cloud-consumer-order80</p><p>如果没有添加这个注解 通过服务名字 注册中心不知道 调用哪个服务  8001 还是 8002</p><p>为  RestTemplate  远程调用类  添加   @LoadBalanced  注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="355-测试"><a href="#3-5-5、测试" class="headerlink" title="3.5.5、测试"></a>3.5.5、测试</h3><blockquote><p>。。。</p></blockquote><h2 id="36-选actuator微服务信息完善"><a href="#3-6、（选）actuator微服务信息完善" class="headerlink" title="3.6、（选）actuator微服务信息完善"></a>3.6、（选）actuator微服务信息完善</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span>    <span class="comment">#修改服务名称</span></span><br><span class="line">      <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>   <span class="comment">#访问路径可以显示IP地址</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">    <span class="attr">instance:</span></span><br><span class="line">      <span class="attr">instance-id:</span> <span class="string">payment8002</span>  <span class="comment">#修改服务名称</span></span><br><span class="line">      <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>   <span class="comment">#访问路径可以显示IP地址</span></span><br></pre></td></tr></table></figure><h2 id="37-服务发现discovery"><a href="#3-7、服务发现Discovery" class="headerlink" title="3.7、服务发现Discovery"></a>3.7、服务发现Discovery</h2><h3 id="371-编辑要打印的服务相关信息格式"><a href="#3-7-1、编辑要打印的服务相关信息格式" class="headerlink" title="3.7.1、编辑要打印的服务相关信息格式"></a>3.7.1、编辑要打印的服务相关信息格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/discovery&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">    <span class="keyword">for</span> (String element : services) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;*****element: &quot;</span>+element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">        log.info(instance.getServiceId()+<span class="string">&quot;\t&quot;</span>+instance.getHost()+<span class="string">&quot;\t&quot;</span>+instance.getPort()+<span class="string">&quot;\t&quot;</span>+instance.getUri());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.discoveryClient;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="372-开启-enablediscoveryclient-服务发现"><a href="#3-7-2、开启-EnableDiscoveryClient-服务发现" class="headerlink" title="3.7.2、开启 @EnableDiscoveryClient  服务发现"></a>3.7.2、开启 @EnableDiscoveryClient  服务发现</h3><blockquote><p>@EnableDiscoveryClient</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>8001  8002请自行修改</p></blockquote><h2 id="38-eureka自我保护机制"><a href="#3-8、eureka自我保护机制" class="headerlink" title="3.8、eureka自我保护机制"></a>3.8、eureka自我保护机制</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attr">server:</span></span><br><span class="line"><span class="comment">#    关闭自我保护机制，保证不可用服务被及时踢除</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure><h1 id="4-zookeeper与springcloud的整合"><a href="#4、zookeeper与springcloud的整合" class="headerlink" title="4、zookeeper与springcloud的整合"></a>4、zookeeper与springcloud的整合</h1><h2 id="41-zookeper-安装"><a href="#4-1、zookeper-安装" class="headerlink" title="4.1、zookeper 安装"></a>4.1、zookeper 安装</h2><blockquote><p>略</p><p>写和实验的时候，我实在阿里云上docker下安装的最新版zookeeper  2020年7月底  版本 3.6.x</p></blockquote><h2 id="42-新建-cloud-provider-payment8004"><a href="#4-2、新建-cloud-provider-payment8004" class="headerlink" title="4.2、新建 cloud-provider-payment8004"></a>4.2、新建 cloud-provider-payment8004</h2><h3 id="421-pom"><a href="#4-2-1、pom" class="headerlink" title="4.2.1、pom"></a>4.2.1、pom</h3><blockquote><p>报错，可能是你的zookeper  jar包版本和你的安装版本冲突，下面依赖中注释部分可以更改，以消除版本的问题</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &amp;lt;!&amp;ndash;先排除自带的zookeeper3.5.3&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;exclusions&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;exclusion&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;/exclusion&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;/exclusions&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash;添加zookeeper3.4.9版本&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;3.4.9&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="422-yml"><a href="#4-2-2、yml" class="headerlink" title="4.2.2、yml"></a>4.2.2、yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#8004表示注册到zookeeper服务器的支付服务提供者端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务别名----注册zookeeper到注册中心名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">39.99</span><span class="number">.195</span><span class="number">.169</span><span class="string">:2181</span></span><br></pre></td></tr></table></figure><h3 id="423-主启动"><a href="#4-2-3、主启动" class="headerlink" title="4.2.3、主启动"></a>4.2.3、主启动</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//该注解用于向使用consul或者zookeeper作为注册中心时注册服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8004</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            SpringApplication.run(PaymentMain8004.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="424-paymentcontroller"><a href="#4-2-4、PaymentController" class="headerlink" title="4.2.4、PaymentController"></a>4.2.4、PaymentController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/payment/zk&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentzk</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springcloud with zookeeper: &quot;</span>+serverPort+<span class="string">&quot;\t&quot;</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="425-测试"><a href="#4-2-5、测试" class="headerlink" title="4.2.5、测试"></a>4.2.5、测试</h3><blockquote><p> <a href="http://localhost:8004/payment/zk">http://localhost:8004/payment/zk</a></p></blockquote><p><img src="/2021/03/09/springcloud1/image-20200808221608456.png"></p><h2 id="43-cloud-consumerzk-order80-消费者模块"><a href="#4-3、cloud-consumerzk-order80-消费者模块" class="headerlink" title="4.3、cloud-consumerzk-order80  消费者模块"></a>4.3、cloud-consumerzk-order80  消费者模块</h2><h3 id="431-pom"><a href="#4-3-1、pom" class="headerlink" title="4.3.1、pom"></a>4.3.1、pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="432-yml"><a href="#4-3-2、yml" class="headerlink" title="4.3.2、yml"></a>4.3.2、yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-consumer-order</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">39.99</span><span class="number">.195</span><span class="number">.169</span><span class="string">:2181</span></span><br></pre></td></tr></table></figure><h3 id="433主启动"><a href="#4-3-3主启动" class="headerlink" title="4.3.3主启动"></a>4.3.3主启动</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderZKMain80</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            SpringApplication.run(OrderZKMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="434-业务类"><a href="#4-3-4、业务类" class="headerlink" title="4.3.4、业务类"></a>4.3.4、业务类</h3><h4 id="4341-applicationcontextconfig"><a href="#4-3-4-1、ApplicationContextConfig" class="headerlink" title="4.3.4.1、ApplicationContextConfig"></a>4.3.4.1、ApplicationContextConfig</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.3.4.1、OrderZKController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderZKController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INVOKE_URL = <span class="string">&quot;http://cloud-provider-payment&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/consumer/payment/zk&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String result = restTemplate.getForObject(INVOKE_URL+<span class="string">&quot;/payment/zk&quot;</span>,String.class);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="435-测试"><a href="#4-3-5、测试" class="headerlink" title="4.3.5、测试"></a>4.3.5、测试</h3><blockquote><p><a href="http://localhost:8004/payment/zk">http://localhost:8004/payment/zk</a></p><p><a href="http://localhost/consumer/payment/zk">http://localhost/consumer/payment/zk</a></p></blockquote><h1 id="5-consul"><a href="#5、consul" class="headerlink" title="5、consul"></a>5、consul</h1><h2 id="51-阿里云docker安装-consul"><a href="#5-1、阿里云docker安装-consul" class="headerlink" title="5.1、阿里云docker安装 consul"></a>5.1、阿里云docker安装 consul</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注：周阳老师是在本地安装 consul ，而我是在阿里云上，有一点区别，安装的consul 2020.8月初 latest 版本</span><br></pre></td></tr></table></figure><blockquote><p>docker pull consul</p></blockquote><blockquote><p>docker run –name consul -p 8500:8500 -v /data/consul/conf/:/consul/conf/ -v /data/consul/data/:/consul<br>/data/ -d consul</p></blockquote><blockquote><p>记得打开阿里云安全组 端口  8500</p></blockquote><blockquote><p>访问 consul  客户端</p><p><a href="http://39.99.195.169:8500/">http://39.99.195.169:8500</a></p></blockquote><p><img src="/2021/03/09/springcloud1/image-20200810165323909.png"></p><h2 id="52-cloud-providerconsul-payment8006-模块"><a href="#5-2、cloud-providerconsul-payment8006-模块" class="headerlink" title="5.2、cloud-providerconsul-payment8006  模块"></a>5.2、cloud-providerconsul-payment8006  模块</h2><blockquote><p>cloud-providerconsul-payment8006</p></blockquote><h3 id="521-pom"><a href="#5-2-1、pom" class="headerlink" title="5.2.1、pom"></a>5.2.1、pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud consul-server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;cn.hutool&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;RELEASE&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;scope&gt;test&lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;cn.hutool&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;RELEASE&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;scope&gt;test&lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="522-yml"><a href="#5-2-2、yml" class="headerlink" title="5.2.2、yml"></a>5.2.2、yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###consul服务端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8006</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consul-provider-payment</span></span><br><span class="line"><span class="comment">####consul注册中心地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">39.99</span><span class="number">.195</span><span class="number">.169</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#hostname: 127.0.0.1</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure><h3 id="523-主启动"><a href="#5-2-3、主启动" class="headerlink" title="5.2.3、主启动"></a>5.2.3、主启动</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8006</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            SpringApplication.run(PaymentMain8006.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="524-业务类-paymentcontroller"><a href="#5-2-4、业务类-PaymentController" class="headerlink" title="5.2.4、业务类  PaymentController"></a>5.2.4、业务类  PaymentController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/payment/consul&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentConsul</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springcloud with consul: &quot;</span>+serverPort+<span class="string">&quot;\t   &quot;</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="525-启动8006"><a href="#5-2-5、启动8006" class="headerlink" title="5.2.5、启动8006"></a>5.2.5、启动8006</h3><p><img src="/2021/03/09/springcloud1/image-20200810171136436.png"></p><p>如果发现这个红叉 可以不管，是服务器获取不到你8006这边的健康状况</p><p>如果不放心可以查看一下8006的健康状况</p><blockquote><p><a href="http://localhost:8006/actuator/health">http://localhost:8006/actuator/health</a></p></blockquote><p><img src="/2021/03/09/springcloud1/image-20200810171322188.png"></p><p>说明是没问题的</p><p>如果你有强迫症，非要解决这个现实问题，可以去阿里云上的consul添加你主机的映射</p><h2 id="53-cloud-consumerconsul-order80-模块"><a href="#5-3、cloud-consumerconsul-order80-模块" class="headerlink" title="5.3、cloud-consumerconsul-order80 模块"></a>5.3、cloud-consumerconsul-order80 模块</h2><blockquote><p>cloud-consumerconsul-order80</p></blockquote><h3 id="531-pom"><a href="#5-3-1、pom" class="headerlink" title="5.3.1、pom"></a>5.3.1、pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud consul-server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="532-ynl"><a href="#5-3-2、ynl" class="headerlink" title="5.3.2、ynl"></a>5.3.2、ynl</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###consul服务端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-consumer-order</span></span><br><span class="line">  <span class="comment">####consul注册中心地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">39.99</span><span class="number">.195</span><span class="number">.169</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#hostname: 127.0.0.1</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure><h3 id="533-主启动"><a href="#5-3-3、主启动" class="headerlink" title="5.3.3、主启动"></a>5.3.3、主启动</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//该注解用于向使用consul或者zookeeper作为注册中心时注册服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderConsulMain80</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            SpringApplication.run(OrderConsulMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="534-业务类"><a href="#5-3-4、业务类" class="headerlink" title="5.3.4、业务类"></a>5.3.4、业务类</h3><h4 id="5341-config-配置-resttemplate"><a href="#5-3-4-1、Config-配置-RestTemplate" class="headerlink" title="5.3.4.1、Config 配置 RestTemplate"></a>5.3.4.1、Config 配置 RestTemplate</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class ApplicationContextConfig</span><br><span class="line">&#123;</span><br><span class="line">    @Bean</span><br><span class="line">    @LoadBalanced</span><br><span class="line">    public RestTemplate getRestTemplate()</span><br><span class="line">    &#123;</span><br><span class="line">        return new RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5341-controller"><a href="#5-3-4-1、Controller" class="headerlink" title="5.3.4.1、Controller"></a>5.3.4.1、Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderConsulController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INVOKE_URL = <span class="string">&quot;http://consul-provider-payment&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/consumer/payment/consul&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String result = restTemplate.getForObject(INVOKE_URL+<span class="string">&quot;/payment/consul&quot;</span>,String.class);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="535-测试"><a href="#5-3-5、测试" class="headerlink" title="5.3.5、测试"></a>5.3.5、测试</h3><blockquote><p>略</p></blockquote><h1 id="eureka-zookeeper-consul-的比较"><a href="#Eureka-、-zookeeper-、consul-的比较" class="headerlink" title="Eureka 、 zookeeper 、consul   的比较"></a>Eureka 、 zookeeper 、consul   的比较</h1><p><img src="/2021/03/09/springcloud1/image-20200810181629195.png"></p><p>经典CAP图</p><p><img src="/2021/03/09/springcloud1/image-20200810182002845.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;springcloud 简单入门，以及基本组件的使用。&lt;/p&gt;</summary>
    
    
    
    <category term="springcloud" scheme="http://zhouzhe111.github.io/categories/springcloud/"/>
    
    
  </entry>
  
</feed>
